
#include "fxlib.h"
#include "Fun.h"
#include "stdlib.h"
#include "pine-ini.h"
#include "ffun.h"
#include "string.h"
#include "astara.h"

#define MAX_NUM_OF_TOWER 100

void pop_when_quit(void)
{
    unsigned int key;
    PopUpWin(3);
    locate(7, 3);
    Print((unsigned char *)"QUIT GAME");
    locate(5, 5);
    Print((unsigned char *)"Press [EXE] key");
    do
    {
        GetKey(&key);
    } while (key != KEY_CTRL_EXE);
}

int AddIn_main(int isAppli, unsigned short OptionNum)
{

    // Initialization
    LPSTACK OpenList;
    LPSTACK CloseList;
    LPSTACK PathList;
    LPSTACK temp;

    PineIniFile *iniResult;
    PineIniError errorRet;
    PineIniSection *Section;

    char *TowerINIText;

    int filehandle;

    unsigned int key, i, j, round, IsPlace;
    long point;
    int Maps[37][37];
    int *maps;
    LPTOWER Tower_DataBase[MAX_NUM_OF_TOWER];
    LPTOWERPLACE Tower_PlaceTower[MAX_NUM_OF_TOWER];
    LPTOWERPLACE Tower_Buffer[5];
    int numOfPlace, numOfCurrent;
    int Tower_DbSize = 0;

    POSITION Cursor_position, screen_position;
    LPPOSITION Cursor_Position, Current_Screen;

    Cursor_Position = &Cursor_position;
    Current_Screen = &screen_position;

    Current_Screen->x = 0;
    Current_Screen->y = 0;
    Cursor_Position->x = 0;
    Cursor_Position->y = 0;

    round = 1;
    IsPlace = 1;
    numOfPlace = 0;
    numOfCurrent = 0;
    point = 0;

     maps=&Maps;

    OpenList = (LPSTACK)malloc(sizeof(Stack));
    OpenList->next = NULL;
    CloseList = (LPSTACK)malloc(sizeof(Stack));
    CloseList->next = NULL;
    PathList = (LPSTACK)malloc(sizeof(Stack));
    PathList->next = NULL;

    SetQuitHandler(pop_when_quit);

    filehandle = read_text_file(&TowerINIText, (char *)"\\\\crd0\\tower.txt");

    if (filehandle <= 0)
    {
        PopUpWin(3);
        locate(5, 3);
        Print((unsigned char *)"Read DATABASE");
        locate(5, 4);
        Print((unsigned char *)"ERROR");
        locate(5, 5);
        Print((unsigned char *)"Press [EXE] key");
        do
        {
            GetKey(&key);
        } while (key != KEY_CTRL_EXE);
        return 0;
    }

    iniResult = PineIni_Parse(TowerINIText, &errorRet);
    free(TowerINIText);

    if (iniResult == NULL)
    {
        PopUpWin(5);
        locate(9, 2);
        Print((unsigned char *)"ERROR");
        printf_pop_xy(5, 3, "Error Code:%d", errorRet.errorCode);
        printf_pop_xy(5, 4, "Line Number:%d", errorRet.lineNumber);
        locate(5, 5);
        Print((unsigned char *)"Press [EXE] key");
        do
        {
            GetKey(&key);
        } while (key != KEY_CTRL_EXE);
        return 0;
    }

    for (i = 0; i < iniResult->numSection; i++)
    {
        Section = iniResult->sections[i];
        if (strstr(Section->name, "tower"))
        {
            Tower_DataBase[Tower_DbSize] = (LPTOWER)malloc(sizeof(Tower));
            Tower_DataBase[Tower_DbSize]->id = PineIni_Section_GetInt(Section, "id", 0);
            Tower_DataBase[Tower_DbSize]->Tower_Level = PineIni_Section_GetInt(Section, "Tower_Level", 0);
            Tower_DataBase[Tower_DbSize]->Attack = PineIni_Section_GetFloat(Section, "Attack", 0);
            Tower_DataBase[Tower_DbSize]->Attack_Frequency = PineIni_Section_GetFloat(Section, "Attack_Frequency", 0);
            Tower_DataBase[Tower_DbSize]->Attack_Range = PineIni_Section_GetInt(Section, "Attack_Range", 0);
            Tower_DbSize++;
        }
    }

    for (i = 0; i < 37; i++)
    {
        for (j = 0; j < 37; j++)
        {
            if (i % 2 == 0)
            {
                if (j % 2 == 0)
                {
                    Maps[i][j] = 1;
                }
                else
                {
                    Maps[i][j] = 0;
                }
            }
            else
            {
                if (j % 2 == 1)
                {
                    Maps[i][j] = 1;
                }
                else
                {
                    Maps[i][j] = 0;
                }
            }
        }
    }

    Maps[2][4] = 2;
    Maps[32][34] = 3;
    Maps[18][4] = 4;
    Maps[18][32] = 5;
    Maps[4][32] = 6;
    Maps[4][18] = 7;
    Maps[32][18] = 8;

    // test astar
    Astar(2, 4, 32, 34, 37, maps, OpenList, CloseList, &PathList);
    temp = PathList;
    while (temp->next != NULL)
    {
        printf_pop_xy(0, i, "row:%d,col:%d,dir:%d", temp->nPoint->row, temp->nPoint->col, temp->nPoint->direction);
    }
    do
    {
        GetKey(&key);
    } while (key != KEY_CHAR_0);

    EnterGame();

    while (1)
    {
        if (IsKeyDown(KEY_CTRL_EXE))
        {
            PopUpWin(3);
            locate(7, 3);
            Print((unsigned char *)"START GAME");
            locate(5, 5);
            Print((unsigned char *)"Press [0] key");
            do
            {
                GetKey(&key);
            } while (key != KEY_CHAR_0);
            if (IsPlace)
            {
                Bdisp_AllClr_DDVRAM();
                printf_xy(42, 25, 0, "Round:%d", round);
                Sleep(1000);

                while (1)
                {
                    Bdisp_AllClr_DDVRAM();
                    Tower_Place(key, Cursor_Position, Current_Screen, maps, Tower_DataBase, Tower_DbSize, Tower_PlaceTower, Tower_Buffer, &numOfPlace, &numOfCurrent, OpenList, CloseList, PathList);
                    Cursor_Move(key, Cursor_Position, Current_Screen);
                    Map_Initialization(maps, Current_Screen, Cursor_Position, numOfCurrent);

                    GetKey(&key);

                    Open_Map(key, maps);
                    Jump_View(key, Current_Screen);
                    Check_Status(key, Cursor_Position, Current_Screen, maps, Tower_PlaceTower, Tower_DataBase, numOfPlace, Tower_DbSize);
                }
            }
        }
    }
    free(Tower_DataBase);
    free(Tower_Buffer);
    free(Tower_PlaceTower);
    return 1;
}

#pragma section _BR_Size
unsigned long BR_Size;
#pragma section

#pragma section _TOP

int InitializeSystem(int isAppli, unsigned short OptionNum)
{
    return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
}

#pragma section
