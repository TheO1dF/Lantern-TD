SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\c++learning\Lantern TD\astara.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        astara.c     1    #include "fxlib.h"
        astara.c     2    #include "stdlib.h"
        astara.c     3    #include "stdio.h"
        astara.c     4    #include "stdarg.h"
        astara.c     5    #include "string.h"
        astara.c     6    #include "astara.h"
        astara.c     7    
        astara.c     8    // find min f from OpenList
        astara.c     9    LPNODE GetNodeFormOpen(LPSTACK Open)
P   00000000              _GetNodeFormOpen:                ; function: GetNodeFormOpen
                                                           ; frame size=12
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF8                   ADD         #-8,R15
        astara.c    10    {
        astara.c    11        LPSTACK temp, min, minP;
        astara.c    12        LPNODE minx;
        astara.c    13    
        astara.c    14        temp = Open->next;
    00000004 5641                   MOV.L       @(4,R4),R6
    00000006 6563                   MOV         R6,R5
        astara.c    15        min = Open->next;
        astara.c    16        minP = Open;
        astara.c    17    
        astara.c    18        if (temp == NULL)
    00000008 2558                   TST         R5,R5
    0000000A 8B0D                   BF          L489
        astara.c    19        {
        astara.c    20            return NULL;
    0000000C 7F08                   ADD         #8,R15
    0000000E 4F26                   LDS.L       @R15+,PR
    00000010 000B                   RTS
    00000012 E000                   MOV         #0,R0
    00000014              L490:                             
        astara.c    21        }
        astara.c    22        while (temp->next != NULL)
        astara.c    23        {
        astara.c    24            if ((temp->next->nPoint->f) < (min->nPoint->f))
    00000014 5351                   MOV.L       @(4,R5),R3
    00000016 6232                   MOV.L       @R3,R2
    00000018 6162                   MOV.L       @R6,R1
    0000001A 6312                   MOV.L       @R1,R3
    0000001C 6222                   MOV.L       @R2,R2
    0000001E 3233                   CMP/GE      R3,R2
    00000020 8901                   BT          L491
        astara.c    25            {
        astara.c    26                min = temp->next;
        astara.c    27                minP = temp;
    00000022 6453                   MOV         R5,R4
    00000024 5651                   MOV.L       @(4,R5),R6
    00000026              L491:                             
        astara.c    28            }
        astara.c    29            temp = temp->next;
    00000026 5551                   MOV.L       @(4,R5),R5
    00000028              L489:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000028 5351                   MOV.L       @(4,R5),R3
    0000002A 2338                   TST         R3,R3
    0000002C 8BF2                   BF          L490
        astara.c    30        }
        astara.c    31        minx = min->nPoint;
    0000002E 6362                   MOV.L       @R6,R3
    00000030 1F31                   MOV.L       R3,@(4,R15)
        astara.c    32        temp = minP->next;
    00000032 5241                   MOV.L       @(4,R4),R2
    00000034 2F22                   MOV.L       R2,@R15
        astara.c    33        minP->next = minP->next->next;
    00000036 6323                   MOV         R2,R3
    00000038 5231                   MOV.L       @(4,R3),R2
    0000003A 1421                   MOV.L       R2,@(4,R4)
        astara.c    34        free(temp);
    0000003C D390                   MOV.L       L535,R3    ; _free
    0000003E 430B                   JSR         @R3
    00000040 64F2                   MOV.L       @R15,R4
        astara.c    35        return minx;
    00000042 50F1                   MOV.L       @(4,R15),R0
        astara.c    36    }
    00000044              L488:                             
    00000044 7F08                   ADD         #8,R15
    00000046 4F26                   LDS.L       @R15+,PR
    00000048 000B                   RTS
    0000004A 0009                   NOP
        astara.c    37    
        astara.c    38    LPNODE CheckList(LPSTACK List, int row, int col)
    0000004C              _CheckList:                      ; function: CheckList
                                                           ; frame size=0
        astara.c    39    {
        astara.c    40        LPSTACK temp = List->next;
    0000004C 5441                   MOV.L       @(4,R4),R4
        astara.c    41        if (temp == NULL)
    0000004E 2448                   TST         R4,R4
    00000050 890D                   BT          L481
        astara.c    42            return NULL;
        astara.c    43        while (temp != NULL)
    00000052 A00A                   BRA         L494
    00000054 0009                   NOP
    00000056              L495:                             
        astara.c    44        {
        astara.c    45            if ((temp->nPoint->row == row) && (temp->nPoint->col == col))
    00000056 6742                   MOV.L       @R4,R7
    00000058 5273                   MOV.L       @(12,R7),R2
    0000005A 3250                   CMP/EQ      R5,R2
    0000005C 8B04                   BF          L496
    0000005E 5174                   MOV.L       @(16,R7),R1
    00000060 3160                   CMP/EQ      R6,R1
    00000062 8B01                   BF          L496
        astara.c    46            {
        astara.c    47                return temp->nPoint;
    00000064 000B                   RTS
    00000066 6042                   MOV.L       @R4,R0
    00000068              L496:                             
        astara.c    48            }
        astara.c    49            else




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        astara.c    50            {
        astara.c    51                temp = temp->next;
    00000068 5441                   MOV.L       @(4,R4),R4
    0000006A              L494:                             
    0000006A 2448                   TST         R4,R4
    0000006C 8BF3                   BF          L495
    0000006E              L481:
        astara.c    52            }
        astara.c    53        }
        astara.c    54        return NULL;
    0000006E E000                   MOV         #0,R0
        astara.c    55    }
    00000070              L493:                             
    00000070 000B                   RTS
    00000072 0009                   NOP
        astara.c    56    
        astara.c    57    // Put Node in List
        astara.c    58    void PutNodeInList(LPNODE Node, LPSTACK List)
    00000074              _PutNodeInList:                  ; function: PutNodeInList
                                                           ; frame size=12
    00000074 4F22                   STS.L       PR,@-R15
    00000076 7FF8                   ADD         #-8,R15
        astara.c    59    {
        astara.c    60        LPSTACK temp;
        astara.c    61        temp = (LPSTACK)malloc(sizeof(Stack));
    00000078 D382                   MOV.L       L535+4,R3  ; _malloc
    0000007A 1F41                   MOV.L       R4,@(4,R15)
    0000007C 2F52                   MOV.L       R5,@R15
    0000007E 430B                   JSR         @R3
    00000080 E408                   MOV         #8,R4
    00000082 6403                   MOV         R0,R4
        astara.c    62        temp->nPoint = Node;
    00000084 52F1                   MOV.L       @(4,R15),R2
    00000086 2422                   MOV.L       R2,@R4
        astara.c    63    
        astara.c    64        temp->next = List->next;
    00000088 63F2                   MOV.L       @R15,R3
    0000008A 5231                   MOV.L       @(4,R3),R2
    0000008C 1421                   MOV.L       R2,@(4,R4)
        astara.c    65        List->next = temp;
    0000008E 63F2                   MOV.L       @R15,R3
    00000090 1341                   MOV.L       R4,@(4,R3)
        astara.c    66    }
    00000092 7F08                   ADD         #8,R15
    00000094 4F26                   LDS.L       @R15+,PR
    00000096 000B                   RTS
    00000098 0009                   NOP
        astara.c    67    
        astara.c    68    int GetH(int row, int col, int d_row, int d_col)
    0000009A              _GetH:                           ; function: GetH
                                                           ; frame size=24
    0000009A 2F86                   MOV.L       R8,@-R15
    0000009C 4F22                   STS.L       PR,@-R15
    0000009E 7FF0                   ADD         #-16,R15
        astara.c    69    {
        astara.c    70        return (abs(d_row - row) + abs(d_col - col));
    000000A0 D279                   MOV.L       L535+8,R2  ; _abs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000A2 2F42                   MOV.L       R4,@R15
    000000A4 1F51                   MOV.L       R5,@(4,R15)
    000000A6 1F63                   MOV.L       R6,@(12,R15)
    000000A8 1F72                   MOV.L       R7,@(8,R15)
    000000AA 63F2                   MOV.L       @R15,R3
    000000AC 54F3                   MOV.L       @(12,R15),R4
    000000AE 420B                   JSR         @R2
    000000B0 3438                   SUB         R3,R4
    000000B2 6803                   MOV         R0,R8
    000000B4 53F1                   MOV.L       @(4,R15),R3
    000000B6 54F2                   MOV.L       @(8,R15),R4
    000000B8 D273                   MOV.L       L535+8,R2  ; _abs
    000000BA 420B                   JSR         @R2
    000000BC 3438                   SUB         R3,R4
    000000BE 308C                   ADD         R8,R0
        astara.c    71    }
    000000C0 7F10                   ADD         #16,R15
    000000C2 4F26                   LDS.L       @R15+,PR
    000000C4 000B                   RTS
    000000C6 68F6                   MOV.L       @R15+,R8
        astara.c    72    
        astara.c    73    int IsCanMove(int row, int col, int Max, int *Map)
    000000C8              _IsCanMove:                      ; function: IsCanMove
                                                           ; frame size=4
    000000C8 4F12                   STS.L       MACL,@-R15
        astara.c    74    {
        astara.c    75        if (row < 0 || row >= Max)
    000000CA 4411                   CMP/PZ      R4
    000000CC 8B05                   BF          L482
    000000CE 3463                   CMP/GE      R6,R4
    000000D0 8903                   BT          L482
        astara.c    76            return 0;
        astara.c    77        if (col < 0 || col >= Max)
    000000D2 4511                   CMP/PZ      R5
    000000D4 8B01                   BF          L482
    000000D6 3563                   CMP/GE      R6,R5
    000000D8 8B02                   BF          L502
    000000DA              L482:
        astara.c    78            return 0;
    000000DA E000                   MOV         #0,R0
    000000DC 000B                   RTS
    000000DE 4F16                   LDS.L       @R15+,MACL
    000000E0              L502:                             
        astara.c    79        return Map[row * 37 + col] < 49;
    000000E0 E025                   MOV         #37,R0
    000000E2 E331                   MOV         #49,R3
    000000E4 0407                   MUL.L       R0,R4
    000000E6 001A                   STS         MACL,R0
    000000E8 305C                   ADD         R5,R0
    000000EA 4008                   SHLL2       R0
    000000EC 007E                   MOV.L       @(R0,R7),R0
    000000EE 3033                   CMP/GE      R3,R0
    000000F0 0029                   MOVT        R0
    000000F2 CA01                   XOR         #1,R0
        astara.c    80    }
    000000F4              L501:                             
    000000F4 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000F6 4F16                   LDS.L       @R15+,MACL
        astara.c    81    
        astara.c    82    void CreateNode(LPNODE bestNode, int row, int col, LPSTACK OpenList, LPSTACK CloseList, int d_row, int d_c
                         +ol, int *DirectionIndex)
    000000F8              _CreateNode:                     ; function: CreateNode
                                                           ; frame size=32
    000000F8 2FE6                   MOV.L       R14,@-R15
    000000FA 2FD6                   MOV.L       R13,@-R15
    000000FC 2FC6                   MOV.L       R12,@-R15
    000000FE 6D53                   MOV         R5,R13
    00000100 2FB6                   MOV.L       R11,@-R15
    00000102 6C63                   MOV         R6,R12
    00000104 2FA6                   MOV.L       R10,@-R15
    00000106 6A43                   MOV         R4,R10
    00000108 2F96                   MOV.L       R9,@-R15
    0000010A 6973                   MOV         R7,R9
    0000010C 2F86                   MOV.L       R8,@-R15
    0000010E 4F22                   STS.L       PR,@-R15
    00000110 58FB                   MOV.L       @(44,R15),R8
        astara.c    83    {
        astara.c    84        int g;
        astara.c    85        LPNODE oldNode, temp;
        astara.c    86    
        astara.c    87        g = bestNode->g + 1;
    00000112 5BA1                   MOV.L       @(4,R10),R11
    00000114 7B01                   ADD         #1,R11
        astara.c    88        if (CheckList(CloseList, row, col) != NULL)
    00000116 BF99                   BSR         _CheckList
    00000118 54F8                   MOV.L       @(32,R15),R4
    0000011A 2008                   TST         R0,R0
    0000011C 8910                   BT          L504
        astara.c    89        {
        astara.c    90            oldNode = NULL;
        astara.c    91            if (CheckList(OpenList, row, col) != NULL)
    0000011E 66C3                   MOV         R12,R6
    00000120 65D3                   MOV         R13,R5
    00000122 BF93                   BSR         _CheckList
    00000124 6493                   MOV         R9,R4
    00000126 2008                   TST         R0,R0
    00000128 892C                   BT          L506
        astara.c    92            {
        astara.c    93                oldNode = CheckList(OpenList, row, col);
    0000012A 66C3                   MOV         R12,R6
    0000012C 65D3                   MOV         R13,R5
    0000012E BF8D                   BSR         _CheckList
    00000130 6493                   MOV         R9,R4
    00000132 6403                   MOV         R0,R4
        astara.c    94                oldNode->parent = bestNode;
    00000134 14A6                   MOV.L       R10,@(24,R4)
        astara.c    95                oldNode->g = g;
    00000136 14B1                   MOV.L       R11,@(4,R4)
        astara.c    96                oldNode->f = g + oldNode->h;
    00000138 5242                   MOV.L       @(8,R4),R2
    0000013A 3B2C                   ADD         R2,R11
    0000013C A022                   BRA         L506
    0000013E 24B2                   MOV.L       R11,@R4
    00000140              L504:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        astara.c    97            }
        astara.c    98        }
        astara.c    99        else
        astara.c   100        {
        astara.c   101            temp = (LPNODE)malloc(sizeof(Node));
    00000140 D250                   MOV.L       L535+4,R2  ; _malloc
    00000142 420B                   JSR         @R2
    00000144 E41C                   MOV         #28,R4
    00000146 6E03                   MOV         R0,R14
        astara.c   102            temp->parent = bestNode;
    00000148 1EA6                   MOV.L       R10,@(24,R14)
        astara.c   103            temp->g = g;
        astara.c   104            temp->h = GetH(row, col, d_row, d_col);
    0000014A 65C3                   MOV         R12,R5
    0000014C 1EB1                   MOV.L       R11,@(4,R14)
    0000014E 57FA                   MOV.L       @(40,R15),R7
    00000150 56F9                   MOV.L       @(36,R15),R6
    00000152 BFA2                   BSR         _GetH
    00000154 64D3                   MOV         R13,R4
        astara.c   105            temp->f = temp->g + temp->h;
    00000156 6303                   MOV         R0,R3
    00000158 1E02                   MOV.L       R0,@(8,R14)
        astara.c   106            temp->row = row;
        astara.c   107            temp->col = col;
        astara.c   108            *DirectionIndex = *DirectionIndex + 1;
        astara.c   109            temp->direction = *DirectionIndex;
        astara.c   110    
        astara.c   111            PutNodeInList(temp, OpenList);
    0000015A 6593                   MOV         R9,R5
    0000015C 52E1                   MOV.L       @(4,R14),R2
    0000015E 64E3                   MOV         R14,R4
    00000160 323C                   ADD         R3,R2
    00000162 2E22                   MOV.L       R2,@R14
    00000164 1ED3                   MOV.L       R13,@(12,R14)
    00000166 1EC4                   MOV.L       R12,@(16,R14)
    00000168 6382                   MOV.L       @R8,R3
    0000016A 7301                   ADD         #1,R3
    0000016C 2832                   MOV.L       R3,@R8
    0000016E 6233                   MOV         R3,R2
    00000170 1E35                   MOV.L       R3,@(20,R14)
    00000172 4F26                   LDS.L       @R15+,PR
    00000174 68F6                   MOV.L       @R15+,R8
    00000176 69F6                   MOV.L       @R15+,R9
    00000178 6AF6                   MOV.L       @R15+,R10
    0000017A 6BF6                   MOV.L       @R15+,R11
    0000017C 6CF6                   MOV.L       @R15+,R12
    0000017E 6DF6                   MOV.L       @R15+,R13
    00000180 AF78                   BRA         _PutNodeInList
    00000182 6EF6                   MOV.L       @R15+,R14
    00000184              L506:                             
        astara.c   112        }
        astara.c   113    }
    00000184 4F26                   LDS.L       @R15+,PR
    00000186 68F6                   MOV.L       @R15+,R8
    00000188 69F6                   MOV.L       @R15+,R9
    0000018A 6AF6                   MOV.L       @R15+,R10
    0000018C 6BF6                   MOV.L       @R15+,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000018E 6CF6                   MOV.L       @R15+,R12
    00000190 6DF6                   MOV.L       @R15+,R13
    00000192 000B                   RTS
    00000194 6EF6                   MOV.L       @R15+,R14
        astara.c   114    
        astara.c   115    void SeachSecessionNode(LPNODE bestNode, int Max, int *Map, LPSTACK OpenList, LPSTACK CloseList, int d_row
                         +, int d_col, int *DirectionIndex)
    00000196              _SeachSecessionNode:             ; function: SeachSecessionNode
                                                           ; frame size=52
    00000196 2FE6                   MOV.L       R14,@-R15
    00000198 2FD6                   MOV.L       R13,@-R15
    0000019A 6E43                   MOV         R4,R14
    0000019C 2FC6                   MOV.L       R12,@-R15
    0000019E 6C63                   MOV         R6,R12
    000001A0 2FB6                   MOV.L       R11,@-R15
    000001A2 2FA6                   MOV.L       R10,@-R15
    000001A4 2F96                   MOV.L       R9,@-R15
    000001A6 2F86                   MOV.L       R8,@-R15
    000001A8 4F22                   STS.L       PR,@-R15
    000001AA 6853                   MOV         R5,R8
    000001AC 7FFC                   ADD         #-4,R15
        astara.c   116    {
        astara.c   117        int row, col;
        astara.c   118        if (IsCanMove(bestNode->row - 1, bestNode->col, Max, Map))
    000001AE 6683                   MOV         R8,R6
    000001B0 2F72                   MOV.L       R7,@R15
    000001B2 67C3                   MOV         R12,R7
    000001B4 55E4                   MOV.L       @(16,R14),R5
    000001B6 5DF9                   MOV.L       @(36,R15),R13
    000001B8 59FA                   MOV.L       @(40,R15),R9
    000001BA 5AFB                   MOV.L       @(44,R15),R10
    000001BC 5BFC                   MOV.L       @(48,R15),R11
    000001BE 54E3                   MOV.L       @(12,R14),R4
    000001C0 BF82                   BSR         _IsCanMove
    000001C2 74FF                   ADD         #-1,R4
    000001C4 2008                   TST         R0,R0
    000001C6 890A                   BT          L507
        astara.c   119        {
        astara.c   120            row = bestNode->row - 1;
    000001C8 55E3                   MOV.L       @(12,R14),R5
    000001CA 75FF                   ADD         #-1,R5
        astara.c   121            col = bestNode->col;
    000001CC 56E4                   MOV.L       @(16,R14),R6
        astara.c   122            CreateNode(bestNode, row, col, OpenList, CloseList, d_row, d_col, DirectionIndex);
    000001CE 2FB6                   MOV.L       R11,@-R15
    000001D0 2FA6                   MOV.L       R10,@-R15
    000001D2 2F96                   MOV.L       R9,@-R15
    000001D4 2FD6                   MOV.L       R13,@-R15
    000001D6 57F4                   MOV.L       @(16,R15),R7
    000001D8 BF8E                   BSR         _CreateNode
    000001DA 64E3                   MOV         R14,R4
    000001DC 7F10                   ADD         #16,R15
    000001DE              L507:                             
        astara.c   123        }
        astara.c   124        if (IsCanMove(bestNode->row + 1, bestNode->col, Max, Map))
    000001DE 67C3                   MOV         R12,R7
    000001E0 55E4                   MOV.L       @(16,R14),R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001E2 6683                   MOV         R8,R6
    000001E4 54E3                   MOV.L       @(12,R14),R4
    000001E6 BF6F                   BSR         _IsCanMove
    000001E8 7401                   ADD         #1,R4
    000001EA 2008                   TST         R0,R0
    000001EC 890A                   BT          L508
        astara.c   125        {
        astara.c   126            row = bestNode->row + 1;
    000001EE 55E3                   MOV.L       @(12,R14),R5
        astara.c   127            col = bestNode->col;
    000001F0 56E4                   MOV.L       @(16,R14),R6
    000001F2 7501                   ADD         #1,R5
        astara.c   128            CreateNode(bestNode, row, col, OpenList, CloseList, d_row, d_col, DirectionIndex);
    000001F4 2FB6                   MOV.L       R11,@-R15
    000001F6 2FA6                   MOV.L       R10,@-R15
    000001F8 2F96                   MOV.L       R9,@-R15
    000001FA 2FD6                   MOV.L       R13,@-R15
    000001FC 57F4                   MOV.L       @(16,R15),R7
    000001FE BF7B                   BSR         _CreateNode
    00000200 64E3                   MOV         R14,R4
    00000202 7F10                   ADD         #16,R15
    00000204              L508:                             
        astara.c   129        }
        astara.c   130        if (IsCanMove(bestNode->row, bestNode->col - 1, Max, Map))
    00000204 55E4                   MOV.L       @(16,R14),R5
    00000206 67C3                   MOV         R12,R7
    00000208 6683                   MOV         R8,R6
    0000020A 75FF                   ADD         #-1,R5
    0000020C BF5C                   BSR         _IsCanMove
    0000020E 54E3                   MOV.L       @(12,R14),R4
    00000210 2008                   TST         R0,R0
    00000212 890A                   BT          L509
        astara.c   131        {
        astara.c   132            row = bestNode->row;
    00000214 55E3                   MOV.L       @(12,R14),R5
        astara.c   133            col = bestNode->col - 1;
    00000216 56E4                   MOV.L       @(16,R14),R6
        astara.c   134            CreateNode(bestNode, row, col, OpenList, CloseList, d_row, d_col, DirectionIndex);
    00000218 2FB6                   MOV.L       R11,@-R15
    0000021A 76FF                   ADD         #-1,R6
    0000021C 2FA6                   MOV.L       R10,@-R15
    0000021E 2F96                   MOV.L       R9,@-R15
    00000220 2FD6                   MOV.L       R13,@-R15
    00000222 57F4                   MOV.L       @(16,R15),R7
    00000224 BF68                   BSR         _CreateNode
    00000226 64E3                   MOV         R14,R4
    00000228 7F10                   ADD         #16,R15
    0000022A              L509:                             
        astara.c   135        }
        astara.c   136        if (IsCanMove(bestNode->row, bestNode->col + 1, Max, Map))
    0000022A 67C3                   MOV         R12,R7
    0000022C 55E4                   MOV.L       @(16,R14),R5
    0000022E 6683                   MOV         R8,R6
    00000230 7501                   ADD         #1,R5
    00000232 BF49                   BSR         _IsCanMove
    00000234 54E3                   MOV.L       @(12,R14),R4
    00000236 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000238 890A                   BT          L510
        astara.c   137        {
        astara.c   138            row = bestNode->row;
    0000023A 55E3                   MOV.L       @(12,R14),R5
        astara.c   139            col = bestNode->col + 1;
    0000023C 56E4                   MOV.L       @(16,R14),R6
    0000023E 7601                   ADD         #1,R6
        astara.c   140            CreateNode(bestNode, row, col, OpenList, CloseList, d_row, d_col, DirectionIndex);
    00000240 2FB6                   MOV.L       R11,@-R15
    00000242 2FA6                   MOV.L       R10,@-R15
    00000244 2F96                   MOV.L       R9,@-R15
    00000246 2FD6                   MOV.L       R13,@-R15
    00000248 57F4                   MOV.L       @(16,R15),R7
    0000024A BF55                   BSR         _CreateNode
    0000024C 64E3                   MOV         R14,R4
    0000024E 7F10                   ADD         #16,R15
    00000250              L510:                             
        astara.c   141        }
        astara.c   142        PutNodeInList(bestNode, CloseList);
    00000250 65D3                   MOV         R13,R5
    00000252 64E3                   MOV         R14,R4
    00000254 7F04                   ADD         #4,R15
    00000256 4F26                   LDS.L       @R15+,PR
    00000258 68F6                   MOV.L       @R15+,R8
    0000025A 69F6                   MOV.L       @R15+,R9
    0000025C 6AF6                   MOV.L       @R15+,R10
    0000025E 6BF6                   MOV.L       @R15+,R11
    00000260 6CF6                   MOV.L       @R15+,R12
    00000262 6DF6                   MOV.L       @R15+,R13
    00000264 AF06                   BRA         _PutNodeInList
    00000266 6EF6                   MOV.L       @R15+,R14
        astara.c   143    }
        astara.c   144    
        astara.c   145    int ListClear(LPSTACK List)
    00000268              _ListClear:                      ; function: ListClear
                                                           ; frame size=20
    00000268 2FE6                   MOV.L       R14,@-R15
    0000026A 2FD6                   MOV.L       R13,@-R15
    0000026C 2FC6                   MOV.L       R12,@-R15
    0000026E 2FB6                   MOV.L       R11,@-R15
    00000270 4F22                   STS.L       PR,@-R15
    00000272 6B43                   MOV         R4,R11
        astara.c   146    {
        astara.c   147        LPSTACK temp, head;
        astara.c   148        LPNODE p_node;
        astara.c   149    
        astara.c   150        temp = List->next;
    00000274 5EB1                   MOV.L       @(4,R11),R14
        astara.c   151        if (temp == NULL)
    00000276 2EE8                   TST         R14,R14
    00000278 8911                   BT          L483
    0000027A DD01                   MOV.L       L535,R13   ; _free
        astara.c   152        {
        astara.c   153            return 1;
        astara.c   154        }
        astara.c   155        while (temp != NULL)
    0000027C A00D                   BRA         L513




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000027E 0009                   NOP
    00000280              L535:                             
    00000280 <00000000>             .DATA.L     _free
    00000284 <00000000>             .DATA.L     _malloc
    00000288 <00000000>             .DATA.L     _abs
    0000028C              L514:                             
        astara.c   156        {
        astara.c   157            head = temp;
    0000028C 6CE3                   MOV         R14,R12
        astara.c   158            temp = temp->next;
    0000028E 5EE1                   MOV.L       @(4,R14),R14
        astara.c   159            p_node = head->nPoint;
        astara.c   160            free(p_node);
    00000290 4D0B                   JSR         @R13
    00000292 64C2                   MOV.L       @R12,R4
        astara.c   161            free(head);
    00000294 4D0B                   JSR         @R13
    00000296 64C3                   MOV         R12,R4
        astara.c   162            List->next = temp;
    00000298 1BE1                   MOV.L       R14,@(4,R11)
    0000029A              L513:                             
    0000029A 2EE8                   TST         R14,R14
    0000029C 8BF6                   BF          L514
    0000029E              L483:
        astara.c   163        }
        astara.c   164        return 1;
    0000029E E001                   MOV         #1,R0
        astara.c   165    }
    000002A0 4F26                   LDS.L       @R15+,PR
    000002A2 6BF6                   MOV.L       @R15+,R11
    000002A4 6CF6                   MOV.L       @R15+,R12
    000002A6 6DF6                   MOV.L       @R15+,R13
    000002A8 000B                   RTS
    000002AA 6EF6                   MOV.L       @R15+,R14
        astara.c   166    
        astara.c   167    int Astar(int startX, int startY, int destinationX, int destinationY, int Max, int *Map, LPSTACK OpenList,
                         + LPSTACK CloseList, int *Direction, int *numOFDirection)
    000002AC              _Astar:                          ; function: Astar
                                                           ; frame size=60
    000002AC 2FE6                   MOV.L       R14,@-R15
    000002AE 2FD6                   MOV.L       R13,@-R15
    000002B0 2FC6                   MOV.L       R12,@-R15
    000002B2 2FB6                   MOV.L       R11,@-R15
    000002B4 2FA6                   MOV.L       R10,@-R15
    000002B6 6B73                   MOV         R7,R11
        astara.c   168    {
        astara.c   169        LPNODE startNode = (LPNODE)malloc(sizeof(Node));
    000002B8 D34B                   MOV.L       L536+2,R3  ; _malloc
    000002BA 6A63                   MOV         R6,R10
    000002BC 2F96                   MOV.L       R9,@-R15
    000002BE 2F86                   MOV.L       R8,@-R15
    000002C0 4F22                   STS.L       PR,@-R15
    000002C2 7FF4                   ADD         #-12,R15
    000002C4 1F42                   MOV.L       R4,@(8,R15)
    000002C6 1F51                   MOV.L       R5,@(4,R15)
    000002C8 59FD                   MOV.L       @(52,R15),R9
    000002CA 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002CC E41C                   MOV         #28,R4
    000002CE 6E03                   MOV         R0,R14
        astara.c   170        LPNODE bestNode, temp, temp_parent;
        astara.c   171        int index, nodeSum, nodeIndex, directionIndex;
        astara.c   172    
        astara.c   173        index = 0;
        astara.c   174        nodeSum = 0;
    000002D0 ED00                   MOV         #0,R13
    000002D2 6CD3                   MOV         R13,R12
        astara.c   175        nodeIndex = 0;
        astara.c   176        directionIndex = 0;
    000002D4 2FD2                   MOV.L       R13,@R15
        astara.c   177        bestNode = NULL;
        astara.c   178    
        astara.c   179        startNode->parent = NULL;
        astara.c   180        startNode->row = startX;
        astara.c   181        startNode->col = startY;
        astara.c   182        startNode->g = 0;
        astara.c   183        startNode->h = GetH(startNode->row, startNode->col, destinationX, destinationY);
    000002D6 67B3                   MOV         R11,R7
    000002D8 1EC6                   MOV.L       R12,@(24,R14)
    000002DA 66A3                   MOV         R10,R6
    000002DC 53F2                   MOV.L       @(8,R15),R3
    000002DE 1E33                   MOV.L       R3,@(12,R14)
    000002E0 52F1                   MOV.L       @(4,R15),R2
    000002E2 1E24                   MOV.L       R2,@(16,R14)
    000002E4 1EC1                   MOV.L       R12,@(4,R14)
    000002E6 55E4                   MOV.L       @(16,R14),R5
    000002E8 BED7                   BSR         _GetH
    000002EA 54E3                   MOV.L       @(12,R14),R4
    000002EC 1E02                   MOV.L       R0,@(8,R14)
        astara.c   184        startNode->f = startNode->g + startNode->h;
    000002EE 6303                   MOV         R0,R3
    000002F0 52E1                   MOV.L       @(4,R14),R2
        astara.c   185        startNode->direction = 0;
        astara.c   186        PutNodeInList(startNode, OpenList);
    000002F2 6593                   MOV         R9,R5
    000002F4 323C                   ADD         R3,R2
    000002F6 2E22                   MOV.L       R2,@R14
    000002F8 1EC5                   MOV.L       R12,@(20,R14)
    000002FA BEBB                   BSR         _PutNodeInList
    000002FC 64E3                   MOV         R14,R4
    000002FE E804                   MOV         #4,R8
    00000300 EE03                   MOV         #3,R14
        astara.c   187    
        astara.c   188        while (1)
    00000302              L516:                             
        astara.c   189        {
        astara.c   190            bestNode = GetNodeFormOpen(OpenList);
    00000302 BE7D                   BSR         _GetNodeFormOpen
    00000304 6493                   MOV         R9,R4
    00000306 6403                   MOV         R0,R4
        astara.c   191            if (bestNode == NULL)
    00000308 2448                   TST         R4,R4
    0000030A 8B01                   BF          L517
        astara.c   192            {
        astara.c   193                return 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000030C A061                   BRA         L518
    0000030E E000                   MOV         #0,R0
    00000310              L517:                             
        astara.c   194            }
        astara.c   195            else if (bestNode->row == destinationX && bestNode->col == destinationY)
    00000310 5243                   MOV.L       @(12,R4),R2
    00000312 32A0                   CMP/EQ      R10,R2
    00000314 8B4F                   BF          L519
    00000316 5144                   MOV.L       @(16,R4),R1
    00000318 31B0                   CMP/EQ      R11,R1
    0000031A 8B4C                   BF          L519
        astara.c   196            {
        astara.c   197                temp = bestNode;
        astara.c   198                while (temp->parent != NULL)
    0000031C A002                   BRA         L521
    0000031E 6543                   MOV         R4,R5
    00000320              L522:                             
        astara.c   199                {
        astara.c   200                    nodeSum++;
        astara.c   201                    temp = temp->parent;
    00000320 5556                   MOV.L       @(24,R5),R5
    00000322 7C01                   ADD         #1,R12
    00000324              L521:                             
    00000324 5356                   MOV.L       @(24,R5),R3
    00000326 2338                   TST         R3,R3
    00000328 8BFA                   BF          L522
        astara.c   202                }
        astara.c   203                temp = bestNode;
        astara.c   204                nodeIndex = nodeSum - 1;
    0000032A 67C3                   MOV         R12,R7
        astara.c   205                *numOFDirection = nodeSum;
    0000032C E040                   MOV         #64,R0
    0000032E 03FE                   MOV.L       @(R0,R15),R3
    00000330 23C2                   MOV.L       R12,@R3
        astara.c   206                while (temp->parent != NULL && nodeIndex >= 0)
    00000332 A039                   BRA         L523
    00000334 77FF                   ADD         #-1,R7
    00000336              L524:                             
    00000336 6673                   MOV         R7,R6
    00000338 53FF                   MOV.L       @(60,R15),R3
    0000033A 4608                   SHLL2       R6
        astara.c   207                {
        astara.c   208                    temp_parent = temp->parent;
    0000033C 5546                   MOV.L       @(24,R4),R5
    0000033E 363C                   ADD         R3,R6
    00000340 5254                   MOV.L       @(16,R5),R2
    00000342 5344                   MOV.L       @(16,R4),R3
    00000344 3238                   SUB         R3,R2
    00000346 2228                   TST         R2,R2
    00000348 8B06                   BF          L525
    0000034A 5343                   MOV.L       @(12,R4),R3
    0000034C 5053                   MOV.L       @(12,R5),R0
    0000034E 3038                   SUB         R3,R0
    00000350 8801                   CMP/EQ      #1,R0
    00000352 8B01                   BF          L525
        astara.c   209                    if (temp_parent->col - temp->col == 0 && temp_parent->row - temp->row == 1)
        astara.c   210                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        astara.c   211                        Direction[nodeIndex] = 1; // Up
    00000354 A00B                   BRA         L534
    00000356 E201                   MOV         #1,R2
    00000358              L525:                             
        astara.c   212                    }
        astara.c   213                    else if (temp_parent->col - temp->col == 0 && temp_parent->row - temp->row == -1)
    00000358 5344                   MOV.L       @(16,R4),R3
    0000035A 5154                   MOV.L       @(16,R5),R1
    0000035C 3138                   SUB         R3,R1
    0000035E 2118                   TST         R1,R1
    00000360 8B07                   BF          L527
    00000362 5343                   MOV.L       @(12,R4),R3
    00000364 5053                   MOV.L       @(12,R5),R0
    00000366 3038                   SUB         R3,R0
    00000368 88FF                   CMP/EQ      #-1,R0
    0000036A 8B02                   BF          L527
        astara.c   214                    {
        astara.c   215                        Direction[nodeIndex] = 2; // Down
    0000036C E202                   MOV         #2,R2
    0000036E              L534:                             
    0000036E A019                   BRA         L526
    00000370 2622                   MOV.L       R2,@R6
    00000372              L527:                             
        astara.c   216                    }
        astara.c   217                    else if (temp_parent->col - temp->col == 1 && temp_parent->row - temp->row == 0)
    00000372 5344                   MOV.L       @(16,R4),R3
    00000374 5054                   MOV.L       @(16,R5),R0
    00000376 3038                   SUB         R3,R0
    00000378 8801                   CMP/EQ      #1,R0
    0000037A 8B06                   BF          L529
    0000037C 5343                   MOV.L       @(12,R4),R3
    0000037E 5253                   MOV.L       @(12,R5),R2
    00000380 3238                   SUB         R3,R2
    00000382 2228                   TST         R2,R2
    00000384 8B01                   BF          L529
        astara.c   218                    {
        astara.c   219                        Direction[nodeIndex] = 3; // Left
    00000386 A00D                   BRA         L526
    00000388 26E2                   MOV.L       R14,@R6
    0000038A              L529:                             
        astara.c   220                    }
        astara.c   221                    else if (temp_parent->col - temp->col == -1 && temp_parent->row - temp->row == 0)
    0000038A 5344                   MOV.L       @(16,R4),R3
    0000038C 5054                   MOV.L       @(16,R5),R0
    0000038E 3038                   SUB         R3,R0
    00000390 88FF                   CMP/EQ      #-1,R0
    00000392 8B06                   BF          L531
    00000394 5343                   MOV.L       @(12,R4),R3
    00000396 5253                   MOV.L       @(12,R5),R2
    00000398 3238                   SUB         R3,R2
    0000039A 2228                   TST         R2,R2
    0000039C 8B01                   BF          L531
        astara.c   222                    {
        astara.c   223                        Direction[nodeIndex] = 4; // Right
    0000039E A001                   BRA         L526
    000003A0 2682                   MOV.L       R8,@R6
    000003A2              L531:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        astara.c   224                    }
        astara.c   225                    else
        astara.c   226                    {
        astara.c   227                        Direction[nodeIndex] = 0;
    000003A2 26D2                   MOV.L       R13,@R6
    000003A4              L526:                             
        astara.c   228                    }
        astara.c   229                    nodeIndex--;
        astara.c   230                    temp = temp->parent;
    000003A4 5446                   MOV.L       @(24,R4),R4
    000003A6 77FF                   ADD         #-1,R7
    000003A8              L523:                             
    000003A8 5246                   MOV.L       @(24,R4),R2
    000003AA 2228                   TST         R2,R2
    000003AC 8901                   BT          L533
    000003AE 4711                   CMP/PZ      R7
    000003B0 89C1                   BT          L524
    000003B2              L533:                             
        astara.c   231                }
        astara.c   232                return 1;
    000003B2 A00E                   BRA         L518
    000003B4 E001                   MOV         #1,R0
    000003B6              L519:                             
        astara.c   233            }
        astara.c   234            index++;
        astara.c   235            SeachSecessionNode(bestNode, Max, Map, OpenList, CloseList, destinationX, destinationY, &direction
                         +Index);
    000003B6 62F3                   MOV         R15,R2
    000003B8 2F26                   MOV.L       R2,@-R15
    000003BA E044                   MOV         #68,R0
    000003BC 2FB6                   MOV.L       R11,@-R15
    000003BE 6793                   MOV         R9,R7
    000003C0 2FA6                   MOV.L       R10,@-R15
    000003C2 03FE                   MOV.L       @(R0,R15),R3
    000003C4 2F36                   MOV.L       R3,@-R15
    000003C6 E040                   MOV         #64,R0
    000003C8 06FE                   MOV.L       @(R0,R15),R6
    000003CA BEE4                   BSR         _SeachSecessionNode
    000003CC 55FF                   MOV.L       @(60,R15),R5
    000003CE AF98                   BRA         L516
    000003D0 7F10                   ADD         #16,R15
    000003D2              L518:                             
        astara.c   236        }
        astara.c   237    }
    000003D2 7F0C                   ADD         #12,R15
    000003D4 4F26                   LDS.L       @R15+,PR
    000003D6 68F6                   MOV.L       @R15+,R8
    000003D8 69F6                   MOV.L       @R15+,R9
    000003DA 6AF6                   MOV.L       @R15+,R10
    000003DC 6BF6                   MOV.L       @R15+,R11
    000003DE 6CF6                   MOV.L       @R15+,R12
    000003E0 6DF6                   MOV.L       @R15+,R13
    000003E2 000B                   RTS
    000003E4 6EF6                   MOV.L       @R15+,R14
    000003E6              L536:                             
    000003E6 0000                   .DATA.W     0
    000003E8 <00000000>             .DATA.L     _malloc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Mar-2023 22:55:51  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      237



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000003EC Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000003EC Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            3
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           9
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            50






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\hasee\AppData\Local\Temp\hmkCA99.tmp 

