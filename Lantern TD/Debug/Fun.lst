SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\c++learning\Lantern TD\Fun.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c     1    #include "fxlib.h"
           Fun.c     2    #include "stdlib.h"
           Fun.c     3    #include "stdio.h"
           Fun.c     4    #include "Fun.h"
           Fun.c     5    #include "stdarg.h"
           Fun.c     6    #include "string.h"
           Fun.c     7    #include "astara.h"
           Fun.c     8    #include "monster.h"
           Fun.c     9    
           Fun.c    10    const int SysCallWrapper[] = {0xD201422B, 0x60F20000, 0x80010070};
           Fun.c    11    const int (*iSysCallFuncPtr)(int R4, int R5, int R6, int R7, int FNo) = (void *)&SysCallWrapper;
           Fun.c    12    
           Fun.c    13    #define RTC_GetTicks() (int)(*iSysCallFuncPtr)(0, 0, 0, 0, 0x03B)
           Fun.c    14    #define GETCODE(c1, c2) (gcode1 = (c1), gcode2 = (c2))
           Fun.c    15    
           Fun.c    16    const unsigned char POINT[] = {
           Fun.c    17        0x80,
           Fun.c    18    };
           Fun.c    19    const unsigned char cursor_graph_[] =
           Fun.c    20        {
           Fun.c    21            0xF0,
           Fun.c    22            0xC0,
           Fun.c    23            0x80,
           Fun.c    24            0x81,
           Fun.c    25            0x81,
           Fun.c    26            0x1,
           Fun.c    27            0x3,
           Fun.c    28            0xF,
           Fun.c    29    };
           Fun.c    30    const char spawn_door_graph_[] =
           Fun.c    31        {
           Fun.c    32            0xFF,
           Fun.c    33            0xFF,
           Fun.c    34            0xBF,
           Fun.c    35            0xFD,
           Fun.c    36            0xC0,
           Fun.c    37            0x3,
           Fun.c    38            0xE0,
           Fun.c    39            0x7,
           Fun.c    40            0xEE,
           Fun.c    41            0x77,
           Fun.c    42            0xDE,
           Fun.c    43            0x7B,
           Fun.c    44            0x80,
           Fun.c    45            0x1,
           Fun.c    46            0xEF,
           Fun.c    47            0xF7,
           Fun.c    48            0xEF,
           Fun.c    49            0xF7,
           Fun.c    50            0xEF,
           Fun.c    51            0xF7,
           Fun.c    52            0xCF,
           Fun.c    53            0xF3,
           Fun.c    54            0xCF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c    55            0xF3,
           Fun.c    56            0xCF,
           Fun.c    57            0xF3,
           Fun.c    58            0xCF,
           Fun.c    59            0xF3,
           Fun.c    60            0x9F,
           Fun.c    61            0xF9,
           Fun.c    62            0xFF,
           Fun.c    63            0xFF,
           Fun.c    64    };
           Fun.c    65    const char base_graph_[] =
           Fun.c    66        {
           Fun.c    67            0x0,
           Fun.c    68            0x0,
           Fun.c    69            0x3F,
           Fun.c    70            0xFC,
           Fun.c    71            0x7C,
           Fun.c    72            0x1E,
           Fun.c    73            0x79,
           Fun.c    74            0xCE,
           Fun.c    75            0x73,
           Fun.c    76            0xC6,
           Fun.c    77            0x76,
           Fun.c    78            0xE6,
           Fun.c    79            0x76,
           Fun.c    80            0xE6,
           Fun.c    81            0x76,
           Fun.c    82            0xE6,
           Fun.c    83            0x75,
           Fun.c    84            0x66,
           Fun.c    85            0x75,
           Fun.c    86            0x66,
           Fun.c    87            0x76,
           Fun.c    88            0xE6,
           Fun.c    89            0x76,
           Fun.c    90            0xE6,
           Fun.c    91            0x76,
           Fun.c    92            0xE6,
           Fun.c    93            0x77,
           Fun.c    94            0xE6,
           Fun.c    95            0x3F,
           Fun.c    96            0xFC,
           Fun.c    97            0x0,
           Fun.c    98            0x0,
           Fun.c    99    };
           Fun.c   100    const char check_point_1_graph_[] =
           Fun.c   101        {
           Fun.c   102            0x0,
           Fun.c   103            0x0,
           Fun.c   104            0x7F,
           Fun.c   105            0xFE,
           Fun.c   106            0x5F,
           Fun.c   107            0xFA,
           Fun.c   108            0x7E,
           Fun.c   109            0x7E,
           Fun.c   110            0x7C,
           Fun.c   111            0x7E,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   112            0x78,
           Fun.c   113            0x7E,
           Fun.c   114            0x7E,
           Fun.c   115            0x7E,
           Fun.c   116            0x7E,
           Fun.c   117            0x7E,
           Fun.c   118            0x7E,
           Fun.c   119            0x7E,
           Fun.c   120            0x7E,
           Fun.c   121            0x7E,
           Fun.c   122            0x7E,
           Fun.c   123            0x7E,
           Fun.c   124            0x7E,
           Fun.c   125            0x7E,
           Fun.c   126            0x7F,
           Fun.c   127            0xFE,
           Fun.c   128            0x5F,
           Fun.c   129            0xFA,
           Fun.c   130            0x7F,
           Fun.c   131            0xFE,
           Fun.c   132            0x0,
           Fun.c   133            0x0,
           Fun.c   134    };
           Fun.c   135    const char check_point_2_graph_[] =
           Fun.c   136        {
           Fun.c   137            0x0,
           Fun.c   138            0x0,
           Fun.c   139            0x7F,
           Fun.c   140            0xFE,
           Fun.c   141            0x5F,
           Fun.c   142            0xFA,
           Fun.c   143            0x78,
           Fun.c   144            0x1E,
           Fun.c   145            0x78,
           Fun.c   146            0x1E,
           Fun.c   147            0x7F,
           Fun.c   148            0x9E,
           Fun.c   149            0x7F,
           Fun.c   150            0x9E,
           Fun.c   151            0x78,
           Fun.c   152            0x1E,
           Fun.c   153            0x78,
           Fun.c   154            0x1E,
           Fun.c   155            0x79,
           Fun.c   156            0xFE,
           Fun.c   157            0x79,
           Fun.c   158            0xFE,
           Fun.c   159            0x78,
           Fun.c   160            0x1E,
           Fun.c   161            0x78,
           Fun.c   162            0x1E,
           Fun.c   163            0x5F,
           Fun.c   164            0xFA,
           Fun.c   165            0x7F,
           Fun.c   166            0xFE,
           Fun.c   167            0x0,
           Fun.c   168            0x0,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   169    };
           Fun.c   170    const char check_point_3_graph_[] =
           Fun.c   171        {
           Fun.c   172            0x0,
           Fun.c   173            0x0,
           Fun.c   174            0x7F,
           Fun.c   175            0xFE,
           Fun.c   176            0x5F,
           Fun.c   177            0xFA,
           Fun.c   178            0x78,
           Fun.c   179            0x1E,
           Fun.c   180            0x78,
           Fun.c   181            0x1E,
           Fun.c   182            0x7F,
           Fun.c   183            0x9E,
           Fun.c   184            0x7F,
           Fun.c   185            0x9E,
           Fun.c   186            0x78,
           Fun.c   187            0x1E,
           Fun.c   188            0x78,
           Fun.c   189            0x1E,
           Fun.c   190            0x7F,
           Fun.c   191            0x9E,
           Fun.c   192            0x7F,
           Fun.c   193            0x9E,
           Fun.c   194            0x78,
           Fun.c   195            0x1E,
           Fun.c   196            0x78,
           Fun.c   197            0x1E,
           Fun.c   198            0x5F,
           Fun.c   199            0xFA,
           Fun.c   200            0x7F,
           Fun.c   201            0xFE,
           Fun.c   202            0x0,
           Fun.c   203            0x0,
           Fun.c   204    };
           Fun.c   205    const char check_point_4_graph_[] =
           Fun.c   206        {
           Fun.c   207            0x0,
           Fun.c   208            0x0,
           Fun.c   209            0x7F,
           Fun.c   210            0xFE,
           Fun.c   211            0x5F,
           Fun.c   212            0xFA,
           Fun.c   213            0x79,
           Fun.c   214            0x9E,
           Fun.c   215            0x79,
           Fun.c   216            0x9E,
           Fun.c   217            0x79,
           Fun.c   218            0x9E,
           Fun.c   219            0x79,
           Fun.c   220            0x9E,
           Fun.c   221            0x78,
           Fun.c   222            0x1E,
           Fun.c   223            0x78,
           Fun.c   224            0x1E,
           Fun.c   225            0x7F,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   226            0x9E,
           Fun.c   227            0x7F,
           Fun.c   228            0x9E,
           Fun.c   229            0x7F,
           Fun.c   230            0x9E,
           Fun.c   231            0x7F,
           Fun.c   232            0x9E,
           Fun.c   233            0x5F,
           Fun.c   234            0xFA,
           Fun.c   235            0x7F,
           Fun.c   236            0xFE,
           Fun.c   237            0x0,
           Fun.c   238            0x0,
           Fun.c   239    };
           Fun.c   240    const char check_point_5_graph_[] =
           Fun.c   241        {
           Fun.c   242            0x0,
           Fun.c   243            0x0,
           Fun.c   244            0x7F,
           Fun.c   245            0xFE,
           Fun.c   246            0x5F,
           Fun.c   247            0xFA,
           Fun.c   248            0x78,
           Fun.c   249            0x1E,
           Fun.c   250            0x78,
           Fun.c   251            0x1E,
           Fun.c   252            0x79,
           Fun.c   253            0xFE,
           Fun.c   254            0x79,
           Fun.c   255            0xFE,
           Fun.c   256            0x78,
           Fun.c   257            0x1E,
           Fun.c   258            0x78,
           Fun.c   259            0x1E,
           Fun.c   260            0x7F,
           Fun.c   261            0x9E,
           Fun.c   262            0x7F,
           Fun.c   263            0x9E,
           Fun.c   264            0x78,
           Fun.c   265            0x1E,
           Fun.c   266            0x78,
           Fun.c   267            0x1E,
           Fun.c   268            0x5F,
           Fun.c   269            0xFA,
           Fun.c   270            0x7F,
           Fun.c   271            0xFE,
           Fun.c   272            0x0,
           Fun.c   273            0x0,
           Fun.c   274    };
           Fun.c   275    const char Wall_graph_[] =
           Fun.c   276        {
           Fun.c   277            0x0,
           Fun.c   278            0x0,
           Fun.c   279            0x77,
           Fun.c   280            0xF6,
           Fun.c   281            0x77,
           Fun.c   282            0xF6,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   283            0x0,
           Fun.c   284            0x0,
           Fun.c   285            0x7E,
           Fun.c   286            0xFE,
           Fun.c   287            0x7E,
           Fun.c   288            0xFE,
           Fun.c   289            0x0,
           Fun.c   290            0x0,
           Fun.c   291            0x77,
           Fun.c   292            0xF6,
           Fun.c   293            0x77,
           Fun.c   294            0xF6,
           Fun.c   295            0x0,
           Fun.c   296            0x0,
           Fun.c   297            0x7D,
           Fun.c   298            0xFE,
           Fun.c   299            0x7D,
           Fun.c   300            0xFE,
           Fun.c   301            0x0,
           Fun.c   302            0x0,
           Fun.c   303            0x77,
           Fun.c   304            0xF6,
           Fun.c   305            0x77,
           Fun.c   306            0xF6,
           Fun.c   307            0x0,
           Fun.c   308            0x0,
           Fun.c   309    };
           Fun.c   310    const char Tile_Default_graph_[] =
           Fun.c   311        {
           Fun.c   312            0x0,
           Fun.c   313            0x0,
           Fun.c   314            0x12,
           Fun.c   315            0x48,
           Fun.c   316            0x24,
           Fun.c   317            0x92,
           Fun.c   318            0x49,
           Fun.c   319            0x24,
           Fun.c   320            0x12,
           Fun.c   321            0x48,
           Fun.c   322            0x24,
           Fun.c   323            0x92,
           Fun.c   324            0x49,
           Fun.c   325            0x24,
           Fun.c   326            0x12,
           Fun.c   327            0x48,
           Fun.c   328            0x24,
           Fun.c   329            0x92,
           Fun.c   330            0x49,
           Fun.c   331            0x24,
           Fun.c   332            0x12,
           Fun.c   333            0x48,
           Fun.c   334            0x24,
           Fun.c   335            0x92,
           Fun.c   336            0x49,
           Fun.c   337            0x24,
           Fun.c   338            0x12,
           Fun.c   339            0x48,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   340            0x24,
           Fun.c   341            0x92,
           Fun.c   342            0x0,
           Fun.c   343            0x0,
           Fun.c   344    };
           Fun.c   345    const char Tower_Default_graph_[] =
           Fun.c   346        {
           Fun.c   347            0x0,
           Fun.c   348            0x0,
           Fun.c   349            0x41,
           Fun.c   350            0xC0,
           Fun.c   351            0xA1,
           Fun.c   352            0x40,
           Fun.c   353            0xA7,
           Fun.c   354            0xF0,
           Fun.c   355            0x4F,
           Fun.c   356            0xF8,
           Fun.c   357            0xF,
           Fun.c   358            0xF8,
           Fun.c   359            0xF,
           Fun.c   360            0xF8,
           Fun.c   361            0x6,
           Fun.c   362            0x10,
           Fun.c   363            0x7,
           Fun.c   364            0xB0,
           Fun.c   365            0x6,
           Fun.c   366            0x10,
           Fun.c   367            0x6,
           Fun.c   368            0xD0,
           Fun.c   369            0x6,
           Fun.c   370            0x10,
           Fun.c   371            0x7,
           Fun.c   372            0xF0,
           Fun.c   373            0xF,
           Fun.c   374            0xF8,
           Fun.c   375            0x1F,
           Fun.c   376            0xFC,
           Fun.c   377            0x3F,
           Fun.c   378            0xFE,
           Fun.c   379    };
           Fun.c   380    const char Tower_1_graph_[] =
           Fun.c   381        {
           Fun.c   382            0x0,
           Fun.c   383            0x0,
           Fun.c   384            0x40,
           Fun.c   385            0x0,
           Fun.c   386            0xA1,
           Fun.c   387            0xE0,
           Fun.c   388            0xA1,
           Fun.c   389            0x20,
           Fun.c   390            0x47,
           Fun.c   391            0x38,
           Fun.c   392            0x3,
           Fun.c   393            0xF0,
           Fun.c   394            0x2,
           Fun.c   395            0x10,
           Fun.c   396            0x2,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   397            0xB0,
           Fun.c   398            0x2,
           Fun.c   399            0x10,
           Fun.c   400            0x2,
           Fun.c   401            0x50,
           Fun.c   402            0x7,
           Fun.c   403            0xF8,
           Fun.c   404            0x7,
           Fun.c   405            0xF8,
           Fun.c   406            0x1,
           Fun.c   407            0xE0,
           Fun.c   408            0x0,
           Fun.c   409            0xC0,
           Fun.c   410            0x0,
           Fun.c   411            0xC0,
           Fun.c   412            0x0,
           Fun.c   413            0x0,
           Fun.c   414    };
           Fun.c   415    const char Tower_2_graph_[] =
           Fun.c   416        {
           Fun.c   417            0x3,
           Fun.c   418            0xE0,
           Fun.c   419            0x44,
           Fun.c   420            0x10,
           Fun.c   421            0xA4,
           Fun.c   422            0x10,
           Fun.c   423            0xA4,
           Fun.c   424            0x10,
           Fun.c   425            0x44,
           Fun.c   426            0x10,
           Fun.c   427            0x7,
           Fun.c   428            0xF0,
           Fun.c   429            0x4,
           Fun.c   430            0x10,
           Fun.c   431            0xC,
           Fun.c   432            0x10,
           Fun.c   433            0xD,
           Fun.c   434            0x58,
           Fun.c   435            0xD,
           Fun.c   436            0x48,
           Fun.c   437            0x4,
           Fun.c   438            0x8,
           Fun.c   439            0x4,
           Fun.c   440            0x48,
           Fun.c   441            0x7,
           Fun.c   442            0xF8,
           Fun.c   443            0xF,
           Fun.c   444            0xFC,
           Fun.c   445            0x1F,
           Fun.c   446            0xFE,
           Fun.c   447            0x0,
           Fun.c   448            0x0,
           Fun.c   449    };
           Fun.c   450    const char Tower_3_graph_[] =
           Fun.c   451        {
           Fun.c   452            0x0,
           Fun.c   453            0x0,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   454            0x41,
           Fun.c   455            0xC0,
           Fun.c   456            0xA1,
           Fun.c   457            0x40,
           Fun.c   458            0xA3,
           Fun.c   459            0xE0,
           Fun.c   460            0x47,
           Fun.c   461            0xF0,
           Fun.c   462            0x8,
           Fun.c   463            0x8,
           Fun.c   464            0x10,
           Fun.c   465            0x4,
           Fun.c   466            0x22,
           Fun.c   467            0x12,
           Fun.c   468            0x22,
           Fun.c   469            0x12,
           Fun.c   470            0x22,
           Fun.c   471            0x12,
           Fun.c   472            0x20,
           Fun.c   473            0x2,
           Fun.c   474            0x10,
           Fun.c   475            0xC4,
           Fun.c   476            0x8,
           Fun.c   477            0x8,
           Fun.c   478            0x7,
           Fun.c   479            0xF0,
           Fun.c   480            0x3,
           Fun.c   481            0xE0,
           Fun.c   482            0x1,
           Fun.c   483            0xC0,
           Fun.c   484    };
           Fun.c   485    const char Tower_4_graph_[] =
           Fun.c   486        {
           Fun.c   487            0x0,
           Fun.c   488            0xC0,
           Fun.c   489            0x41,
           Fun.c   490            0xE0,
           Fun.c   491            0xA3,
           Fun.c   492            0xF0,
           Fun.c   493            0xA4,
           Fun.c   494            0x8,
           Fun.c   495            0x44,
           Fun.c   496            0x8,
           Fun.c   497            0xD,
           Fun.c   498            0xBC,
           Fun.c   499            0xC,
           Fun.c   500            0xC,
           Fun.c   501            0xC,
           Fun.c   502            0x4C,
           Fun.c   503            0x4,
           Fun.c   504            0x8,
           Fun.c   505            0x4,
           Fun.c   506            0x8,
           Fun.c   507            0x4,
           Fun.c   508            0x8,
           Fun.c   509            0x2,
           Fun.c   510            0x10,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   511            0x1,
           Fun.c   512            0xE0,
           Fun.c   513            0x7,
           Fun.c   514            0xF8,
           Fun.c   515            0xF,
           Fun.c   516            0xFC,
           Fun.c   517            0x0,
           Fun.c   518            0x0,
           Fun.c   519    };
           Fun.c   520    
           Fun.c   521    const char MainMenu_graph_[] =
           Fun.c   522        {
           Fun.c   523            0xFF,
           Fun.c   524            0xFF,
           Fun.c   525            0xFF,
           Fun.c   526            0xFF,
           Fun.c   527            0xFF,
           Fun.c   528            0xFF,
           Fun.c   529            0xFF,
           Fun.c   530            0xFF,
           Fun.c   531            0xFF,
           Fun.c   532            0xFF,
           Fun.c   533            0xFF,
           Fun.c   534            0xFF,
           Fun.c   535            0xFF,
           Fun.c   536            0xFF,
           Fun.c   537            0xFF,
           Fun.c   538            0xFF,
           Fun.c   539            0x80,
           Fun.c   540            0x0,
           Fun.c   541            0x0,
           Fun.c   542            0x0,
           Fun.c   543            0x0,
           Fun.c   544            0x0,
           Fun.c   545            0x0,
           Fun.c   546            0x0,
           Fun.c   547            0x0,
           Fun.c   548            0x0,
           Fun.c   549            0x0,
           Fun.c   550            0x0,
           Fun.c   551            0x0,
           Fun.c   552            0x0,
           Fun.c   553            0x0,
           Fun.c   554            0x1,
           Fun.c   555            0xBF,
           Fun.c   556            0xFF,
           Fun.c   557            0xFF,
           Fun.c   558            0xFF,
           Fun.c   559            0xFF,
           Fun.c   560            0xFF,
           Fun.c   561            0xFF,
           Fun.c   562            0xFF,
           Fun.c   563            0xFF,
           Fun.c   564            0xFF,
           Fun.c   565            0xFF,
           Fun.c   566            0xFF,
           Fun.c   567            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   568            0xFF,
           Fun.c   569            0xFF,
           Fun.c   570            0xFD,
           Fun.c   571            0xBF,
           Fun.c   572            0xFF,
           Fun.c   573            0xFF,
           Fun.c   574            0xFF,
           Fun.c   575            0xFF,
           Fun.c   576            0xFF,
           Fun.c   577            0xFF,
           Fun.c   578            0xFF,
           Fun.c   579            0xFF,
           Fun.c   580            0xFF,
           Fun.c   581            0xFF,
           Fun.c   582            0xFF,
           Fun.c   583            0xFF,
           Fun.c   584            0xFF,
           Fun.c   585            0xFF,
           Fun.c   586            0xFD,
           Fun.c   587            0xBC,
           Fun.c   588            0x0,
           Fun.c   589            0x0,
           Fun.c   590            0x0,
           Fun.c   591            0x0,
           Fun.c   592            0x0,
           Fun.c   593            0x0,
           Fun.c   594            0x0,
           Fun.c   595            0x0,
           Fun.c   596            0x0,
           Fun.c   597            0x0,
           Fun.c   598            0x0,
           Fun.c   599            0x0,
           Fun.c   600            0x0,
           Fun.c   601            0x0,
           Fun.c   602            0x7D,
           Fun.c   603            0xBD,
           Fun.c   604            0xFF,
           Fun.c   605            0xFF,
           Fun.c   606            0xFF,
           Fun.c   607            0xFF,
           Fun.c   608            0xFF,
           Fun.c   609            0xFF,
           Fun.c   610            0xFF,
           Fun.c   611            0xFF,
           Fun.c   612            0xFF,
           Fun.c   613            0xFF,
           Fun.c   614            0xFF,
           Fun.c   615            0xFF,
           Fun.c   616            0xFF,
           Fun.c   617            0xFF,
           Fun.c   618            0x3D,
           Fun.c   619            0xBD,
           Fun.c   620            0x0,
           Fun.c   621            0x0,
           Fun.c   622            0x0,
           Fun.c   623            0x0,
           Fun.c   624            0x0,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   625            0x0,
           Fun.c   626            0x0,
           Fun.c   627            0x0,
           Fun.c   628            0x0,
           Fun.c   629            0x0,
           Fun.c   630            0x0,
           Fun.c   631            0x0,
           Fun.c   632            0x0,
           Fun.c   633            0x1,
           Fun.c   634            0xBD,
           Fun.c   635            0xBD,
           Fun.c   636            0x0,
           Fun.c   637            0xE0,
           Fun.c   638            0x1F,
           Fun.c   639            0xC3,
           Fun.c   640            0x1C,
           Fun.c   641            0x7F,
           Fun.c   642            0x8F,
           Fun.c   643            0xF1,
           Fun.c   644            0xFC,
           Fun.c   645            0x38,
           Fun.c   646            0xC7,
           Fun.c   647            0xF8,
           Fun.c   648            0xFE,
           Fun.c   649            0x1,
           Fun.c   650            0xBD,
           Fun.c   651            0xBD,
           Fun.c   652            0x0,
           Fun.c   653            0xE0,
           Fun.c   654            0x1F,
           Fun.c   655            0xC3,
           Fun.c   656            0x1C,
           Fun.c   657            0x7C,
           Fun.c   658            0x8F,
           Fun.c   659            0xF1,
           Fun.c   660            0xCC,
           Fun.c   661            0x38,
           Fun.c   662            0xC4,
           Fun.c   663            0xF8,
           Fun.c   664            0xFE,
           Fun.c   665            0x1,
           Fun.c   666            0xBD,
           Fun.c   667            0xBD,
           Fun.c   668            0x0,
           Fun.c   669            0xE0,
           Fun.c   670            0x1F,
           Fun.c   671            0xC3,
           Fun.c   672            0x9C,
           Fun.c   673            0x7C,
           Fun.c   674            0x8F,
           Fun.c   675            0x1,
           Fun.c   676            0xCC,
           Fun.c   677            0x39,
           Fun.c   678            0xC4,
           Fun.c   679            0xF8,
           Fun.c   680            0x9F,
           Fun.c   681            0x1,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   682            0xBD,
           Fun.c   683            0xBD,
           Fun.c   684            0x0,
           Fun.c   685            0xE0,
           Fun.c   686            0x18,
           Fun.c   687            0xC3,
           Fun.c   688            0xDC,
           Fun.c   689            0x7F,
           Fun.c   690            0x8F,
           Fun.c   691            0xF1,
           Fun.c   692            0xFC,
           Fun.c   693            0x3B,
           Fun.c   694            0xC7,
           Fun.c   695            0xF8,
           Fun.c   696            0x9F,
           Fun.c   697            0x1,
           Fun.c   698            0xBD,
           Fun.c   699            0xBD,
           Fun.c   700            0x0,
           Fun.c   701            0xE0,
           Fun.c   702            0x18,
           Fun.c   703            0xC3,
           Fun.c   704            0xFC,
           Fun.c   705            0x7F,
           Fun.c   706            0x8F,
           Fun.c   707            0xF1,
           Fun.c   708            0xFC,
           Fun.c   709            0x3F,
           Fun.c   710            0xC7,
           Fun.c   711            0xF8,
           Fun.c   712            0xFF,
           Fun.c   713            0x1,
           Fun.c   714            0xBD,
           Fun.c   715            0xBD,
           Fun.c   716            0x0,
           Fun.c   717            0xE0,
           Fun.c   718            0x1F,
           Fun.c   719            0xE3,
           Fun.c   720            0x7C,
           Fun.c   721            0x1C,
           Fun.c   722            0xF,
           Fun.c   723            0xF1,
           Fun.c   724            0xFC,
           Fun.c   725            0x3E,
           Fun.c   726            0xC0,
           Fun.c   727            0xE0,
           Fun.c   728            0xFF,
           Fun.c   729            0x1,
           Fun.c   730            0xBD,
           Fun.c   731            0xBD,
           Fun.c   732            0x0,
           Fun.c   733            0xE0,
           Fun.c   734            0x1F,
           Fun.c   735            0xE3,
           Fun.c   736            0x3C,
           Fun.c   737            0x1C,
           Fun.c   738            0xF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   739            0x1,
           Fun.c   740            0xFC,
           Fun.c   741            0x3C,
           Fun.c   742            0xC0,
           Fun.c   743            0xE0,
           Fun.c   744            0xFF,
           Fun.c   745            0x1,
           Fun.c   746            0xBD,
           Fun.c   747            0xBD,
           Fun.c   748            0x0,
           Fun.c   749            0xFF,
           Fun.c   750            0x1F,
           Fun.c   751            0xE3,
           Fun.c   752            0x3C,
           Fun.c   753            0x1C,
           Fun.c   754            0xF,
           Fun.c   755            0xF1,
           Fun.c   756            0xCE,
           Fun.c   757            0x3C,
           Fun.c   758            0xC0,
           Fun.c   759            0xE0,
           Fun.c   760            0xFF,
           Fun.c   761            0x1,
           Fun.c   762            0xBD,
           Fun.c   763            0xBD,
           Fun.c   764            0x0,
           Fun.c   765            0x9F,
           Fun.c   766            0x1F,
           Fun.c   767            0xE3,
           Fun.c   768            0x1C,
           Fun.c   769            0x1C,
           Fun.c   770            0xF,
           Fun.c   771            0xF1,
           Fun.c   772            0xCE,
           Fun.c   773            0x38,
           Fun.c   774            0xC0,
           Fun.c   775            0xE0,
           Fun.c   776            0xFF,
           Fun.c   777            0x1,
           Fun.c   778            0xBD,
           Fun.c   779            0xBD,
           Fun.c   780            0x0,
           Fun.c   781            0x9F,
           Fun.c   782            0x18,
           Fun.c   783            0x63,
           Fun.c   784            0x1C,
           Fun.c   785            0x1C,
           Fun.c   786            0xF,
           Fun.c   787            0xF1,
           Fun.c   788            0xCE,
           Fun.c   789            0x38,
           Fun.c   790            0xC0,
           Fun.c   791            0xE0,
           Fun.c   792            0xFF,
           Fun.c   793            0x1,
           Fun.c   794            0xBD,
           Fun.c   795            0xBD,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   796            0x0,
           Fun.c   797            0xFF,
           Fun.c   798            0x18,
           Fun.c   799            0x63,
           Fun.c   800            0x1C,
           Fun.c   801            0x1C,
           Fun.c   802            0xF,
           Fun.c   803            0xF1,
           Fun.c   804            0xCE,
           Fun.c   805            0x38,
           Fun.c   806            0xC0,
           Fun.c   807            0xE0,
           Fun.c   808            0xFE,
           Fun.c   809            0x1,
           Fun.c   810            0xBD,
           Fun.c   811            0xBD,
           Fun.c   812            0x0,
           Fun.c   813            0x0,
           Fun.c   814            0x0,
           Fun.c   815            0x0,
           Fun.c   816            0x0,
           Fun.c   817            0x0,
           Fun.c   818            0x0,
           Fun.c   819            0x0,
           Fun.c   820            0x0,
           Fun.c   821            0x0,
           Fun.c   822            0x0,
           Fun.c   823            0x0,
           Fun.c   824            0x0,
           Fun.c   825            0x1,
           Fun.c   826            0xBD,
           Fun.c   827            0xBD,
           Fun.c   828            0x0,
           Fun.c   829            0x0,
           Fun.c   830            0x0,
           Fun.c   831            0x0,
           Fun.c   832            0x0,
           Fun.c   833            0x0,
           Fun.c   834            0x0,
           Fun.c   835            0x0,
           Fun.c   836            0x0,
           Fun.c   837            0x0,
           Fun.c   838            0x0,
           Fun.c   839            0x0,
           Fun.c   840            0x0,
           Fun.c   841            0x1,
           Fun.c   842            0xBD,
           Fun.c   843            0xBD,
           Fun.c   844            0xFF,
           Fun.c   845            0xFF,
           Fun.c   846            0xFF,
           Fun.c   847            0xFF,
           Fun.c   848            0xFF,
           Fun.c   849            0xFF,
           Fun.c   850            0xFF,
           Fun.c   851            0xFF,
           Fun.c   852            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   853            0xFF,
           Fun.c   854            0xFF,
           Fun.c   855            0xFF,
           Fun.c   856            0xFF,
           Fun.c   857            0xFF,
           Fun.c   858            0xBD,
           Fun.c   859            0xBC,
           Fun.c   860            0xFF,
           Fun.c   861            0xFF,
           Fun.c   862            0xFF,
           Fun.c   863            0xFF,
           Fun.c   864            0xFF,
           Fun.c   865            0xFF,
           Fun.c   866            0xFF,
           Fun.c   867            0xFF,
           Fun.c   868            0xFF,
           Fun.c   869            0xFF,
           Fun.c   870            0xFF,
           Fun.c   871            0xFF,
           Fun.c   872            0xFF,
           Fun.c   873            0xFF,
           Fun.c   874            0xBD,
           Fun.c   875            0xBE,
           Fun.c   876            0x0,
           Fun.c   877            0x0,
           Fun.c   878            0x0,
           Fun.c   879            0x0,
           Fun.c   880            0x0,
           Fun.c   881            0x0,
           Fun.c   882            0x0,
           Fun.c   883            0x0,
           Fun.c   884            0x0,
           Fun.c   885            0x0,
           Fun.c   886            0x0,
           Fun.c   887            0x0,
           Fun.c   888            0x0,
           Fun.c   889            0x0,
           Fun.c   890            0x3D,
           Fun.c   891            0xBF,
           Fun.c   892            0xFF,
           Fun.c   893            0xFF,
           Fun.c   894            0xFF,
           Fun.c   895            0xFF,
           Fun.c   896            0xFF,
           Fun.c   897            0xFF,
           Fun.c   898            0xFF,
           Fun.c   899            0xFF,
           Fun.c   900            0xFF,
           Fun.c   901            0xFF,
           Fun.c   902            0xFF,
           Fun.c   903            0xFF,
           Fun.c   904            0xFF,
           Fun.c   905            0xFF,
           Fun.c   906            0xFD,
           Fun.c   907            0xBF,
           Fun.c   908            0xFF,
           Fun.c   909            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   910            0xFF,
           Fun.c   911            0xFF,
           Fun.c   912            0xFF,
           Fun.c   913            0xFF,
           Fun.c   914            0xFF,
           Fun.c   915            0xFF,
           Fun.c   916            0xFF,
           Fun.c   917            0xFF,
           Fun.c   918            0xFF,
           Fun.c   919            0xFF,
           Fun.c   920            0xFF,
           Fun.c   921            0xFF,
           Fun.c   922            0xFD,
           Fun.c   923            0xBF,
           Fun.c   924            0xFF,
           Fun.c   925            0xFF,
           Fun.c   926            0xFF,
           Fun.c   927            0xFF,
           Fun.c   928            0xFF,
           Fun.c   929            0xFF,
           Fun.c   930            0xFF,
           Fun.c   931            0xFF,
           Fun.c   932            0xFF,
           Fun.c   933            0xFF,
           Fun.c   934            0xFF,
           Fun.c   935            0xFF,
           Fun.c   936            0xFF,
           Fun.c   937            0xFF,
           Fun.c   938            0xFD,
           Fun.c   939            0xBF,
           Fun.c   940            0xFF,
           Fun.c   941            0xFF,
           Fun.c   942            0xFF,
           Fun.c   943            0xFF,
           Fun.c   944            0xFF,
           Fun.c   945            0xFF,
           Fun.c   946            0xFF,
           Fun.c   947            0xFF,
           Fun.c   948            0xFF,
           Fun.c   949            0xFF,
           Fun.c   950            0xFF,
           Fun.c   951            0xFF,
           Fun.c   952            0xFF,
           Fun.c   953            0xFF,
           Fun.c   954            0xFD,
           Fun.c   955            0xBF,
           Fun.c   956            0xFF,
           Fun.c   957            0xFF,
           Fun.c   958            0xFF,
           Fun.c   959            0xFF,
           Fun.c   960            0xFF,
           Fun.c   961            0xFF,
           Fun.c   962            0xFF,
           Fun.c   963            0xFF,
           Fun.c   964            0xFF,
           Fun.c   965            0xFF,
           Fun.c   966            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c   967            0xFF,
           Fun.c   968            0xFF,
           Fun.c   969            0xFF,
           Fun.c   970            0xFD,
           Fun.c   971            0xBF,
           Fun.c   972            0xFF,
           Fun.c   973            0xFF,
           Fun.c   974            0xFF,
           Fun.c   975            0xFF,
           Fun.c   976            0xFF,
           Fun.c   977            0xFF,
           Fun.c   978            0xFF,
           Fun.c   979            0xFF,
           Fun.c   980            0xFF,
           Fun.c   981            0xFF,
           Fun.c   982            0xFF,
           Fun.c   983            0xFF,
           Fun.c   984            0xFF,
           Fun.c   985            0xFF,
           Fun.c   986            0xFD,
           Fun.c   987            0xBF,
           Fun.c   988            0xFF,
           Fun.c   989            0xFF,
           Fun.c   990            0xFF,
           Fun.c   991            0xFF,
           Fun.c   992            0xFF,
           Fun.c   993            0xFF,
           Fun.c   994            0xFF,
           Fun.c   995            0xFF,
           Fun.c   996            0xFF,
           Fun.c   997            0xFF,
           Fun.c   998            0xFF,
           Fun.c   999            0xFF,
           Fun.c  1000            0xFF,
           Fun.c  1001            0xFF,
           Fun.c  1002            0xFD,
           Fun.c  1003            0xBF,
           Fun.c  1004            0xFF,
           Fun.c  1005            0xFF,
           Fun.c  1006            0xFF,
           Fun.c  1007            0xFF,
           Fun.c  1008            0xFF,
           Fun.c  1009            0xFF,
           Fun.c  1010            0xFF,
           Fun.c  1011            0xFF,
           Fun.c  1012            0xFF,
           Fun.c  1013            0xFF,
           Fun.c  1014            0xFF,
           Fun.c  1015            0xFF,
           Fun.c  1016            0xFF,
           Fun.c  1017            0xFF,
           Fun.c  1018            0xFD,
           Fun.c  1019            0xBF,
           Fun.c  1020            0xFF,
           Fun.c  1021            0xFF,
           Fun.c  1022            0xFF,
           Fun.c  1023            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1024            0xF0,
           Fun.c  1025            0x0,
           Fun.c  1026            0x0,
           Fun.c  1027            0x0,
           Fun.c  1028            0x0,
           Fun.c  1029            0xF,
           Fun.c  1030            0xFF,
           Fun.c  1031            0xFF,
           Fun.c  1032            0xFF,
           Fun.c  1033            0xFF,
           Fun.c  1034            0xFD,
           Fun.c  1035            0xBF,
           Fun.c  1036            0xFF,
           Fun.c  1037            0xFF,
           Fun.c  1038            0xFF,
           Fun.c  1039            0xFF,
           Fun.c  1040            0xEF,
           Fun.c  1041            0xFF,
           Fun.c  1042            0xFF,
           Fun.c  1043            0xFF,
           Fun.c  1044            0xFF,
           Fun.c  1045            0xF7,
           Fun.c  1046            0xFF,
           Fun.c  1047            0xFF,
           Fun.c  1048            0xFF,
           Fun.c  1049            0xFF,
           Fun.c  1050            0xFD,
           Fun.c  1051            0xBF,
           Fun.c  1052            0xFF,
           Fun.c  1053            0xFF,
           Fun.c  1054            0xFF,
           Fun.c  1055            0xFF,
           Fun.c  1056            0xE8,
           Fun.c  1057            0x0,
           Fun.c  1058            0x0,
           Fun.c  1059            0x0,
           Fun.c  1060            0x0,
           Fun.c  1061            0x17,
           Fun.c  1062            0xFF,
           Fun.c  1063            0xFF,
           Fun.c  1064            0xFF,
           Fun.c  1065            0xFF,
           Fun.c  1066            0xFD,
           Fun.c  1067            0xBF,
           Fun.c  1068            0xFF,
           Fun.c  1069            0xFF,
           Fun.c  1070            0xFF,
           Fun.c  1071            0xFF,
           Fun.c  1072            0xEB,
           Fun.c  1073            0xB9,
           Fun.c  1074            0x33,
           Fun.c  1075            0x88,
           Fun.c  1076            0x95,
           Fun.c  1077            0xD7,
           Fun.c  1078            0xFF,
           Fun.c  1079            0xFF,
           Fun.c  1080            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1081            0xFF,
           Fun.c  1082            0xFD,
           Fun.c  1083            0xBF,
           Fun.c  1084            0xFF,
           Fun.c  1085            0xFF,
           Fun.c  1086            0xFF,
           Fun.c  1087            0xFF,
           Fun.c  1088            0xEB,
           Fun.c  1089            0x12,
           Fun.c  1090            0xA9,
           Fun.c  1091            0x11,
           Fun.c  1092            0x5D,
           Fun.c  1093            0x17,
           Fun.c  1094            0xFF,
           Fun.c  1095            0xFF,
           Fun.c  1096            0xFF,
           Fun.c  1097            0xFF,
           Fun.c  1098            0xFD,
           Fun.c  1099            0xBF,
           Fun.c  1100            0xFF,
           Fun.c  1101            0xFF,
           Fun.c  1102            0xFF,
           Fun.c  1103            0xFF,
           Fun.c  1104            0xE9,
           Fun.c  1105            0x93,
           Fun.c  1106            0xB1,
           Fun.c  1107            0x15,
           Fun.c  1108            0xD5,
           Fun.c  1109            0x97,
           Fun.c  1110            0xFF,
           Fun.c  1111            0xFF,
           Fun.c  1112            0xFF,
           Fun.c  1113            0xFF,
           Fun.c  1114            0xFD,
           Fun.c  1115            0xBF,
           Fun.c  1116            0xFF,
           Fun.c  1117            0xFF,
           Fun.c  1118            0xFF,
           Fun.c  1119            0xFF,
           Fun.c  1120            0xEB,
           Fun.c  1121            0x92,
           Fun.c  1122            0xA9,
           Fun.c  1123            0xD,
           Fun.c  1124            0x55,
           Fun.c  1125            0xD7,
           Fun.c  1126            0xFF,
           Fun.c  1127            0xFF,
           Fun.c  1128            0xFF,
           Fun.c  1129            0xFF,
           Fun.c  1130            0xFD,
           Fun.c  1131            0xBF,
           Fun.c  1132            0xFF,
           Fun.c  1133            0xFF,
           Fun.c  1134            0xFF,
           Fun.c  1135            0xFF,
           Fun.c  1136            0xE8,
           Fun.c  1137            0x0,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1138            0x0,
           Fun.c  1139            0x0,
           Fun.c  1140            0x0,
           Fun.c  1141            0x17,
           Fun.c  1142            0xFF,
           Fun.c  1143            0xFF,
           Fun.c  1144            0xFF,
           Fun.c  1145            0xFF,
           Fun.c  1146            0xFD,
           Fun.c  1147            0xBF,
           Fun.c  1148            0xFF,
           Fun.c  1149            0xFF,
           Fun.c  1150            0xFF,
           Fun.c  1151            0xFF,
           Fun.c  1152            0xEF,
           Fun.c  1153            0xFF,
           Fun.c  1154            0xFF,
           Fun.c  1155            0xFF,
           Fun.c  1156            0xFF,
           Fun.c  1157            0xF7,
           Fun.c  1158            0xFF,
           Fun.c  1159            0xFF,
           Fun.c  1160            0xFF,
           Fun.c  1161            0xFF,
           Fun.c  1162            0xFD,
           Fun.c  1163            0xBF,
           Fun.c  1164            0xFF,
           Fun.c  1165            0xFF,
           Fun.c  1166            0xFF,
           Fun.c  1167            0xFF,
           Fun.c  1168            0xF0,
           Fun.c  1169            0x0,
           Fun.c  1170            0x0,
           Fun.c  1171            0x0,
           Fun.c  1172            0x0,
           Fun.c  1173            0xF,
           Fun.c  1174            0xFF,
           Fun.c  1175            0xFF,
           Fun.c  1176            0xFF,
           Fun.c  1177            0xFF,
           Fun.c  1178            0xFD,
           Fun.c  1179            0xBF,
           Fun.c  1180            0xFF,
           Fun.c  1181            0xFF,
           Fun.c  1182            0xFF,
           Fun.c  1183            0xFF,
           Fun.c  1184            0xFF,
           Fun.c  1185            0xFF,
           Fun.c  1186            0xFF,
           Fun.c  1187            0xFF,
           Fun.c  1188            0xFF,
           Fun.c  1189            0xFF,
           Fun.c  1190            0xFF,
           Fun.c  1191            0xFF,
           Fun.c  1192            0xFF,
           Fun.c  1193            0xFF,
           Fun.c  1194            0xFD,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1195            0xBF,
           Fun.c  1196            0xFF,
           Fun.c  1197            0xFF,
           Fun.c  1198            0xFF,
           Fun.c  1199            0xFF,
           Fun.c  1200            0xFF,
           Fun.c  1201            0xFF,
           Fun.c  1202            0xFF,
           Fun.c  1203            0xEE,
           Fun.c  1204            0xFF,
           Fun.c  1205            0xFF,
           Fun.c  1206            0xFF,
           Fun.c  1207            0xFF,
           Fun.c  1208            0xFF,
           Fun.c  1209            0xFF,
           Fun.c  1210            0xFD,
           Fun.c  1211            0xBF,
           Fun.c  1212            0xFF,
           Fun.c  1213            0xFF,
           Fun.c  1214            0xFF,
           Fun.c  1215            0xFF,
           Fun.c  1216            0xFF,
           Fun.c  1217            0xFD,
           Fun.c  1218            0xFF,
           Fun.c  1219            0xDB,
           Fun.c  1220            0x7F,
           Fun.c  1221            0xFF,
           Fun.c  1222            0xFF,
           Fun.c  1223            0xFF,
           Fun.c  1224            0xFF,
           Fun.c  1225            0xFF,
           Fun.c  1226            0xFD,
           Fun.c  1227            0xBF,
           Fun.c  1228            0xFF,
           Fun.c  1229            0xFF,
           Fun.c  1230            0xFF,
           Fun.c  1231            0xFF,
           Fun.c  1232            0xFF,
           Fun.c  1233            0xFF,
           Fun.c  1234            0xBF,
           Fun.c  1235            0xA5,
           Fun.c  1236            0xBF,
           Fun.c  1237            0xFF,
           Fun.c  1238            0xFF,
           Fun.c  1239            0xFF,
           Fun.c  1240            0xFF,
           Fun.c  1241            0xFF,
           Fun.c  1242            0xFD,
           Fun.c  1243            0xBF,
           Fun.c  1244            0xFF,
           Fun.c  1245            0xFF,
           Fun.c  1246            0xFF,
           Fun.c  1247            0xFF,
           Fun.c  1248            0xFF,
           Fun.c  1249            0xFB,
           Fun.c  1250            0xFF,
           Fun.c  1251            0x42,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1252            0xDF,
           Fun.c  1253            0xFF,
           Fun.c  1254            0xFF,
           Fun.c  1255            0xFF,
           Fun.c  1256            0xFF,
           Fun.c  1257            0xFF,
           Fun.c  1258            0xFD,
           Fun.c  1259            0xBF,
           Fun.c  1260            0xFF,
           Fun.c  1261            0xFF,
           Fun.c  1262            0xFF,
           Fun.c  1263            0xFF,
           Fun.c  1264            0xFF,
           Fun.c  1265            0xFF,
           Fun.c  1266            0x7E,
           Fun.c  1267            0xFF,
           Fun.c  1268            0xEF,
           Fun.c  1269            0xFF,
           Fun.c  1270            0xFF,
           Fun.c  1271            0xFF,
           Fun.c  1272            0xFF,
           Fun.c  1273            0xFF,
           Fun.c  1274            0xFD,
           Fun.c  1275            0xBF,
           Fun.c  1276            0xFF,
           Fun.c  1277            0xFF,
           Fun.c  1278            0xFF,
           Fun.c  1279            0xFF,
           Fun.c  1280            0xFF,
           Fun.c  1281            0xF9,
           Fun.c  1282            0xCF,
           Fun.c  1283            0x56,
           Fun.c  1284            0xDF,
           Fun.c  1285            0xFF,
           Fun.c  1286            0xFF,
           Fun.c  1287            0xFF,
           Fun.c  1288            0xFF,
           Fun.c  1289            0xFF,
           Fun.c  1290            0xFD,
           Fun.c  1291            0xBF,
           Fun.c  1292            0xFF,
           Fun.c  1293            0xFF,
           Fun.c  1294            0xFF,
           Fun.c  1295            0xFF,
           Fun.c  1296            0xFF,
           Fun.c  1297            0xFA,
           Fun.c  1298            0x2F,
           Fun.c  1299            0x56,
           Fun.c  1300            0xDF,
           Fun.c  1301            0xFF,
           Fun.c  1302            0xFF,
           Fun.c  1303            0xFF,
           Fun.c  1304            0xFF,
           Fun.c  1305            0xFF,
           Fun.c  1306            0xFD,
           Fun.c  1307            0xBF,
           Fun.c  1308            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1309            0xFF,
           Fun.c  1310            0xFF,
           Fun.c  1311            0xFF,
           Fun.c  1312            0xFF,
           Fun.c  1313            0xE3,
           Fun.c  1314            0xEF,
           Fun.c  1315            0x5F,
           Fun.c  1316            0xDF,
           Fun.c  1317            0xFF,
           Fun.c  1318            0xFF,
           Fun.c  1319            0xFF,
           Fun.c  1320            0xFF,
           Fun.c  1321            0xFF,
           Fun.c  1322            0xFD,
           Fun.c  1323            0xBF,
           Fun.c  1324            0xFF,
           Fun.c  1325            0xFF,
           Fun.c  1326            0xFF,
           Fun.c  1327            0xFF,
           Fun.c  1328            0xFF,
           Fun.c  1329            0xEA,
           Fun.c  1330            0xAF,
           Fun.c  1331            0x40,
           Fun.c  1332            0x5F,
           Fun.c  1333            0xFF,
           Fun.c  1334            0xFF,
           Fun.c  1335            0xFF,
           Fun.c  1336            0xFF,
           Fun.c  1337            0xFF,
           Fun.c  1338            0xFD,
           Fun.c  1339            0xBF,
           Fun.c  1340            0xFF,
           Fun.c  1341            0xFF,
           Fun.c  1342            0xFF,
           Fun.c  1343            0xFF,
           Fun.c  1344            0xFF,
           Fun.c  1345            0xEB,
           Fun.c  1346            0xEF,
           Fun.c  1347            0x46,
           Fun.c  1348            0x5F,
           Fun.c  1349            0xFF,
           Fun.c  1350            0xFF,
           Fun.c  1351            0xFF,
           Fun.c  1352            0xFF,
           Fun.c  1353            0xFF,
           Fun.c  1354            0xFD,
           Fun.c  1355            0xBF,
           Fun.c  1356            0xFF,
           Fun.c  1357            0xFF,
           Fun.c  1358            0xFF,
           Fun.c  1359            0xFF,
           Fun.c  1360            0xFF,
           Fun.c  1361            0xE3,
           Fun.c  1362            0xEF,
           Fun.c  1363            0x40,
           Fun.c  1364            0x5F,
           Fun.c  1365            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1366            0xFF,
           Fun.c  1367            0xFF,
           Fun.c  1368            0xFF,
           Fun.c  1369            0xFF,
           Fun.c  1370            0xFD,
           Fun.c  1371            0x9F,
           Fun.c  1372            0xFF,
           Fun.c  1373            0xFF,
           Fun.c  1374            0xFF,
           Fun.c  1375            0xFF,
           Fun.c  1376            0xFF,
           Fun.c  1377            0xF9,
           Fun.c  1378            0xCE,
           Fun.c  1379            0xFF,
           Fun.c  1380            0xCF,
           Fun.c  1381            0xFF,
           Fun.c  1382            0xFF,
           Fun.c  1383            0xFF,
           Fun.c  1384            0xFF,
           Fun.c  1385            0xFF,
           Fun.c  1386            0xFD,
           Fun.c  1387            0xAF,
           Fun.c  1388            0xFF,
           Fun.c  1389            0xFF,
           Fun.c  1390            0xFF,
           Fun.c  1391            0xFF,
           Fun.c  1392            0xFF,
           Fun.c  1393            0xFE,
           Fun.c  1394            0x3D,
           Fun.c  1395            0x6B,
           Fun.c  1396            0xE7,
           Fun.c  1397            0xFF,
           Fun.c  1398            0xFF,
           Fun.c  1399            0xFF,
           Fun.c  1400            0xFF,
           Fun.c  1401            0xFF,
           Fun.c  1402            0xFD,
           Fun.c  1403            0x97,
           Fun.c  1404            0xFF,
           Fun.c  1405            0xFF,
           Fun.c  1406            0xFF,
           Fun.c  1407            0xFF,
           Fun.c  1408            0xFF,
           Fun.c  1409            0xFF,
           Fun.c  1410            0xFA,
           Fun.c  1411            0xD7,
           Fun.c  1412            0xF3,
           Fun.c  1413            0xFF,
           Fun.c  1414            0xFF,
           Fun.c  1415            0xFF,
           Fun.c  1416            0xFF,
           Fun.c  1417            0xFF,
           Fun.c  1418            0xFD,
           Fun.c  1419            0xAB,
           Fun.c  1420            0xFF,
           Fun.c  1421            0xFF,
           Fun.c  1422            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1423            0xFF,
           Fun.c  1424            0xFF,
           Fun.c  1425            0xFF,
           Fun.c  1426            0xFF,
           Fun.c  1427            0xFF,
           Fun.c  1428            0xFF,
           Fun.c  1429            0xFF,
           Fun.c  1430            0xFF,
           Fun.c  1431            0xFF,
           Fun.c  1432            0xFF,
           Fun.c  1433            0xFF,
           Fun.c  1434            0xFD,
           Fun.c  1435            0x95,
           Fun.c  1436            0xFF,
           Fun.c  1437            0xFF,
           Fun.c  1438            0xFF,
           Fun.c  1439            0xFF,
           Fun.c  1440            0xFF,
           Fun.c  1441            0xFF,
           Fun.c  1442            0xFF,
           Fun.c  1443            0xFF,
           Fun.c  1444            0xFF,
           Fun.c  1445            0xFF,
           Fun.c  1446            0xFF,
           Fun.c  1447            0xFF,
           Fun.c  1448            0xFF,
           Fun.c  1449            0xFF,
           Fun.c  1450            0xFD,
           Fun.c  1451            0xAA,
           Fun.c  1452            0xFF,
           Fun.c  1453            0xFF,
           Fun.c  1454            0xFF,
           Fun.c  1455            0xFF,
           Fun.c  1456            0xFF,
           Fun.c  1457            0xFF,
           Fun.c  1458            0xFF,
           Fun.c  1459            0xFF,
           Fun.c  1460            0xFF,
           Fun.c  1461            0xFF,
           Fun.c  1462            0xFF,
           Fun.c  1463            0xFF,
           Fun.c  1464            0xFF,
           Fun.c  1465            0xFF,
           Fun.c  1466            0xFD,
           Fun.c  1467            0x95,
           Fun.c  1468            0x7F,
           Fun.c  1469            0xFF,
           Fun.c  1470            0xFF,
           Fun.c  1471            0xFF,
           Fun.c  1472            0xFF,
           Fun.c  1473            0xFF,
           Fun.c  1474            0xFF,
           Fun.c  1475            0xFF,
           Fun.c  1476            0xFF,
           Fun.c  1477            0xFF,
           Fun.c  1478            0xFF,
           Fun.c  1479            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1480            0xFF,
           Fun.c  1481            0xFF,
           Fun.c  1482            0xFD,
           Fun.c  1483            0xAA,
           Fun.c  1484            0xBF,
           Fun.c  1485            0xFF,
           Fun.c  1486            0xFF,
           Fun.c  1487            0xFF,
           Fun.c  1488            0xFF,
           Fun.c  1489            0xFF,
           Fun.c  1490            0xFF,
           Fun.c  1491            0xFF,
           Fun.c  1492            0xFF,
           Fun.c  1493            0xFF,
           Fun.c  1494            0xFF,
           Fun.c  1495            0xFF,
           Fun.c  1496            0xFF,
           Fun.c  1497            0xFF,
           Fun.c  1498            0xFD,
           Fun.c  1499            0x95,
           Fun.c  1500            0x5F,
           Fun.c  1501            0xFF,
           Fun.c  1502            0xFF,
           Fun.c  1503            0xFF,
           Fun.c  1504            0xFF,
           Fun.c  1505            0xFF,
           Fun.c  1506            0xFF,
           Fun.c  1507            0xFF,
           Fun.c  1508            0xFF,
           Fun.c  1509            0xFF,
           Fun.c  1510            0xFF,
           Fun.c  1511            0xFF,
           Fun.c  1512            0xFF,
           Fun.c  1513            0xFF,
           Fun.c  1514            0xFD,
           Fun.c  1515            0x80,
           Fun.c  1516            0x0,
           Fun.c  1517            0x0,
           Fun.c  1518            0x0,
           Fun.c  1519            0x0,
           Fun.c  1520            0x0,
           Fun.c  1521            0x0,
           Fun.c  1522            0x0,
           Fun.c  1523            0x0,
           Fun.c  1524            0x0,
           Fun.c  1525            0x0,
           Fun.c  1526            0x0,
           Fun.c  1527            0x0,
           Fun.c  1528            0x0,
           Fun.c  1529            0x0,
           Fun.c  1530            0x1,
           Fun.c  1531            0xFF,
           Fun.c  1532            0xFF,
           Fun.c  1533            0xFF,
           Fun.c  1534            0xFF,
           Fun.c  1535            0xFF,
           Fun.c  1536            0xFF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1537            0xFF,
           Fun.c  1538            0xFF,
           Fun.c  1539            0xFF,
           Fun.c  1540            0xFF,
           Fun.c  1541            0xFF,
           Fun.c  1542            0xFF,
           Fun.c  1543            0xFF,
           Fun.c  1544            0xFF,
           Fun.c  1545            0xFF,
           Fun.c  1546            0xFF,
           Fun.c  1547    };
           Fun.c  1548    
           Fun.c  1549    const char Button_1_graph_[] =
           Fun.c  1550        {
           Fun.c  1551            0xFE,
           Fun.c  1552            0xFF,
           Fun.c  1553            0xC0,
           Fun.c  1554            0xFD,
           Fun.c  1555            0x7F,
           Fun.c  1556            0xC0,
           Fun.c  1557            0xFB,
           Fun.c  1558            0xBF,
           Fun.c  1559            0xC0,
           Fun.c  1560            0xF7,
           Fun.c  1561            0x7F,
           Fun.c  1562            0xC0,
           Fun.c  1563            0xEA,
           Fun.c  1564            0xBF,
           Fun.c  1565            0xC0,
           Fun.c  1566            0xF5,
           Fun.c  1567            0x5F,
           Fun.c  1568            0x80,
           Fun.c  1569            0xFB,
           Fun.c  1570            0xAF,
           Fun.c  1571            0x0,
           Fun.c  1572            0xFF,
           Fun.c  1573            0xCE,
           Fun.c  1574            0x0,
           Fun.c  1575    };
           Fun.c  1576    
           Fun.c  1577    const char Button_2_graph_[] =
           Fun.c  1578        {
           Fun.c  1579            0xFF,
           Fun.c  1580            0xFF,
           Fun.c  1581            0xC0,
           Fun.c  1582            0xBB,
           Fun.c  1583            0x31,
           Fun.c  1584            0xC0,
           Fun.c  1585            0x92,
           Fun.c  1586            0xD6,
           Fun.c  1587            0xC0,
           Fun.c  1588            0xAA,
           Fun.c  1589            0x11,
           Fun.c  1590            0xC0,
           Fun.c  1591            0xBA,
           Fun.c  1592            0xD7,
           Fun.c  1593            0xC0,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1594            0xBA,
           Fun.c  1595            0xD7,
           Fun.c  1596            0x80,
           Fun.c  1597            0xFF,
           Fun.c  1598            0xFF,
           Fun.c  1599            0x0,
           Fun.c  1600            0xFF,
           Fun.c  1601            0xFE,
           Fun.c  1602            0x0,
           Fun.c  1603    };
           Fun.c  1604    
           Fun.c  1605    const char Button_3_graph_[] =
           Fun.c  1606        {
           Fun.c  1607            0xFF,
           Fun.c  1608            0xFF,
           Fun.c  1609            0xC0,
           Fun.c  1610            0x15,
           Fun.c  1611            0x74,
           Fun.c  1612            0x40,
           Fun.c  1613            0xB5,
           Fun.c  1614            0x25,
           Fun.c  1615            0x40,
           Fun.c  1616            0xB5,
           Fun.c  1617            0x54,
           Fun.c  1618            0x40,
           Fun.c  1619            0xB5,
           Fun.c  1620            0x55,
           Fun.c  1621            0xC0,
           Fun.c  1622            0x31,
           Fun.c  1623            0x75,
           Fun.c  1624            0x80,
           Fun.c  1625            0xFF,
           Fun.c  1626            0xFF,
           Fun.c  1627            0x0,
           Fun.c  1628            0xFF,
           Fun.c  1629            0xFE,
           Fun.c  1630            0x0,
           Fun.c  1631    };
           Fun.c  1632    const char Button_4_graph_[] =
           Fun.c  1633        {
           Fun.c  1634            0xFF,
           Fun.c  1635            0xFF,
           Fun.c  1636            0xC0,
           Fun.c  1637            0xB4,
           Fun.c  1638            0x44,
           Fun.c  1639            0x40,
           Fun.c  1640            0xAD,
           Fun.c  1641            0xDD,
           Fun.c  1642            0x40,
           Fun.c  1643            0x9C,
           Fun.c  1644            0xCC,
           Fun.c  1645            0x40,
           Fun.c  1646            0xAD,
           Fun.c  1647            0xDD,
           Fun.c  1648            0xC0,
           Fun.c  1649            0xB4,
           Fun.c  1650            0x45,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1651            0x80,
           Fun.c  1652            0xFF,
           Fun.c  1653            0xFF,
           Fun.c  1654            0x0,
           Fun.c  1655            0xFF,
           Fun.c  1656            0xFE,
           Fun.c  1657            0x0,
           Fun.c  1658    };
           Fun.c  1659    const char Button_5_graph_[] =
           Fun.c  1660        {
           Fun.c  1661            0xFF,
           Fun.c  1662            0xFF,
           Fun.c  1663            0xC0,
           Fun.c  1664            0x88,
           Fun.c  1665            0xD8,
           Fun.c  1666            0xC0,
           Fun.c  1667            0xBD,
           Fun.c  1668            0xAD,
           Fun.c  1669            0xC0,
           Fun.c  1670            0x8D,
           Fun.c  1671            0xAD,
           Fun.c  1672            0xC0,
           Fun.c  1673            0xED,
           Fun.c  1674            0x8D,
           Fun.c  1675            0xC0,
           Fun.c  1676            0x8D,
           Fun.c  1677            0xAD,
           Fun.c  1678            0x80,
           Fun.c  1679            0xFF,
           Fun.c  1680            0xFF,
           Fun.c  1681            0x0,
           Fun.c  1682            0xFF,
           Fun.c  1683            0xFE,
           Fun.c  1684            0x0,
           Fun.c  1685    };
           Fun.c  1686    const char monster_1_graph_[] =
           Fun.c  1687        {
           Fun.c  1688            0x10,
           Fun.c  1689            0x8,
           Fun.c  1690            0x19,
           Fun.c  1691            0x98,
           Fun.c  1692            0x5B,
           Fun.c  1693            0xDA,
           Fun.c  1694            0x2F,
           Fun.c  1695            0xF4,
           Fun.c  1696            0x6B,
           Fun.c  1697            0xD6,
           Fun.c  1698            0x6D,
           Fun.c  1699            0xB6,
           Fun.c  1700            0xF7,
           Fun.c  1701            0xEF,
           Fun.c  1702            0xDB,
           Fun.c  1703            0xDB,
           Fun.c  1704            0xBC,
           Fun.c  1705            0x3D,
           Fun.c  1706            0x37,
           Fun.c  1707            0xEC,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1708            0x67,
           Fun.c  1709            0xE6,
           Fun.c  1710            0x73,
           Fun.c  1711            0xCE,
           Fun.c  1712            0x46,
           Fun.c  1713            0x62,
           Fun.c  1714            0xC,
           Fun.c  1715            0x30,
           Fun.c  1716            0x1C,
           Fun.c  1717            0x38,
           Fun.c  1718            0x14,
           Fun.c  1719            0x28,
           Fun.c  1720    };
           Fun.c  1721    const char Monster_2_graph_[] =
           Fun.c  1722        {
           Fun.c  1723            0x0,
           Fun.c  1724            0x10,
           Fun.c  1725            0x0,
           Fun.c  1726            0x7E,
           Fun.c  1727            0x0,
           Fun.c  1728            0xEE,
           Fun.c  1729            0x0,
           Fun.c  1730            0xFE,
           Fun.c  1731            0x1,
           Fun.c  1732            0xFE,
           Fun.c  1733            0x21,
           Fun.c  1734            0xEA,
           Fun.c  1735            0x11,
           Fun.c  1736            0xF0,
           Fun.c  1737            0x21,
           Fun.c  1738            0xFC,
           Fun.c  1739            0x11,
           Fun.c  1740            0xE0,
           Fun.c  1741            0x10,
           Fun.c  1742            0xF0,
           Fun.c  1743            0x20,
           Fun.c  1744            0x7C,
           Fun.c  1745            0x20,
           Fun.c  1746            0x1E,
           Fun.c  1747            0x3D,
           Fun.c  1748            0xEE,
           Fun.c  1749            0x1F,
           Fun.c  1750            0xFC,
           Fun.c  1751            0x7,
           Fun.c  1752            0xF0,
           Fun.c  1753            0x0,
           Fun.c  1754            0x0,
           Fun.c  1755    };
           Fun.c  1756    const char Monster_3_graph_[] =
           Fun.c  1757        {
           Fun.c  1758            0x0,
           Fun.c  1759            0x0,
           Fun.c  1760            0x7,
           Fun.c  1761            0x70,
           Fun.c  1762            0xD,
           Fun.c  1763            0xD8,
           Fun.c  1764            0xD,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1765            0xD8,
           Fun.c  1766            0xD,
           Fun.c  1767            0xD8,
           Fun.c  1768            0xF,
           Fun.c  1769            0xFC,
           Fun.c  1770            0xE,
           Fun.c  1771            0x3C,
           Fun.c  1772            0xF,
           Fun.c  1773            0xFC,
           Fun.c  1774            0x7,
           Fun.c  1775            0xF8,
           Fun.c  1776            0x0,
           Fun.c  1777            0x0,
           Fun.c  1778            0x3,
           Fun.c  1779            0xF0,
           Fun.c  1780            0x0,
           Fun.c  1781            0x8,
           Fun.c  1782            0xB,
           Fun.c  1783            0xF0,
           Fun.c  1784            0x2,
           Fun.c  1785            0x10,
           Fun.c  1786            0x0,
           Fun.c  1787            0x0,
           Fun.c  1788            0x0,
           Fun.c  1789            0x0,
           Fun.c  1790    };
           Fun.c  1791    const char Monster_4_graph_[] =
           Fun.c  1792        {
           Fun.c  1793            0x0,
           Fun.c  1794            0x0,
           Fun.c  1795            0x1C,
           Fun.c  1796            0x1C,
           Fun.c  1797            0x3,
           Fun.c  1798            0xE0,
           Fun.c  1799            0x7,
           Fun.c  1800            0xF8,
           Fun.c  1801            0x3C,
           Fun.c  1802            0xCC,
           Fun.c  1803            0x1F,
           Fun.c  1804            0xF8,
           Fun.c  1805            0x1F,
           Fun.c  1806            0xF8,
           Fun.c  1807            0x1F,
           Fun.c  1808            0xF8,
           Fun.c  1809            0x5,
           Fun.c  1810            0x50,
           Fun.c  1811            0x0,
           Fun.c  1812            0x4,
           Fun.c  1813            0x1D,
           Fun.c  1814            0xFC,
           Fun.c  1815            0x1D,
           Fun.c  1816            0xFC,
           Fun.c  1817            0x1F,
           Fun.c  1818            0xF8,
           Fun.c  1819            0x17,
           Fun.c  1820            0xF8,
           Fun.c  1821            0x4,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1822            0x10,
           Fun.c  1823            0x0,
           Fun.c  1824            0x0,
           Fun.c  1825    };
           Fun.c  1826    const char Monster_5_graph_[] =
           Fun.c  1827        {
           Fun.c  1828            0x0,
           Fun.c  1829            0x0,
           Fun.c  1830            0x7,
           Fun.c  1831            0xF0,
           Fun.c  1832            0xE,
           Fun.c  1833            0x8,
           Fun.c  1834            0xC,
           Fun.c  1835            0x24,
           Fun.c  1836            0x1C,
           Fun.c  1837            0xA4,
           Fun.c  1838            0x1C,
           Fun.c  1839            0x84,
           Fun.c  1840            0x3C,
           Fun.c  1841            0x4,
           Fun.c  1842            0x34,
           Fun.c  1843            0x4,
           Fun.c  1844            0x26,
           Fun.c  1845            0x8,
           Fun.c  1846            0x3,
           Fun.c  1847            0xF0,
           Fun.c  1848            0x4,
           Fun.c  1849            0x8,
           Fun.c  1850            0x3,
           Fun.c  1851            0xF0,
           Fun.c  1852            0x3,
           Fun.c  1853            0xF4,
           Fun.c  1854            0xB,
           Fun.c  1855            0xF0,
           Fun.c  1856            0x1,
           Fun.c  1857            0x10,
           Fun.c  1858            0x1,
           Fun.c  1859            0x10,
           Fun.c  1860    };
           Fun.c  1861    
           Fun.c  1862    int Bkey_n_IsKeyDown(int keycode)
P   00000000              _Bkey_n_IsKeyDown:               ; function: Bkey_n_IsKeyDown
                                                           ; frame size=52
    00000000 2FE6                   MOV.L       R14,@-R15
           Fun.c  1863    {
           Fun.c  1864        int kcode1 = 0, kcode2 = 0;
    00000002 E300                   MOV         #0,R3
    00000004 2FD6                   MOV.L       R13,@-R15
           Fun.c  1865        int gcode1, gcode2;
           Fun.c  1866        short unused = 0;
           Fun.c  1867    
           Fun.c  1868        switch (keycode)
    00000006 E704                   MOV         #4,R7
    00000008 2FC6                   MOV.L       R12,@-R15
    0000000A 6233                   MOV         R3,R2
    0000000C 2FB6                   MOV.L       R11,@-R15
    0000000E EC05                   MOV         #5,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000010 2FA6                   MOV.L       R10,@-R15
    00000012 6023                   MOV         R2,R0
    00000014 2F96                   MOV.L       R9,@-R15
    00000016 EA02                   MOV         #2,R10
    00000018 2F86                   MOV.L       R8,@-R15
    0000001A E90A                   MOV         #10,R9
    0000001C 4F22                   STS.L       PR,@-R15
    0000001E E809                   MOV         #9,R8
    00000020 7FF4                   ADD         #-12,R15
    00000022 EB03                   MOV         #3,R11
    00000024 1F31                   MOV.L       R3,@(4,R15)
    00000026 E607                   MOV         #7,R6
    00000028 2F22                   MOV.L       R2,@R15
    0000002A 81F4                   MOV.W       R0,@(8,R15)
    0000002C 6043                   MOV         R4,R0
    0000002E 8830                   CMP/EQ      #48,R0
    00000030 8F02                   BF/S        L1146
    00000032 E506                   MOV         #6,R5
    00000034 A109                   BRA         L756
    00000036 0009                   NOP
    00000038              L1146:                            
    00000038 8831                   CMP/EQ      #49,R0
    0000003A 8B01                   BF          L1147
    0000003C A107                   BRA         L757
    0000003E 0009                   NOP
    00000040              L1147:                            
    00000040 8832                   CMP/EQ      #50,R0
    00000042 8B01                   BF          L1148
    00000044 A105                   BRA         L758
    00000046 0009                   NOP
    00000048              L1148:                            
    00000048 8833                   CMP/EQ      #51,R0
    0000004A 8B01                   BF          L1149
    0000004C A103                   BRA         L759
    0000004E 0009                   NOP
    00000050              L1149:                            
    00000050 8834                   CMP/EQ      #52,R0
    00000052 8B01                   BF          L1150
    00000054 A101                   BRA         L760
    00000056 0009                   NOP
    00000058              L1150:                            
    00000058 8835                   CMP/EQ      #53,R0
    0000005A 8B01                   BF          L1151
    0000005C A0FF                   BRA         L761
    0000005E 0009                   NOP
    00000060              L1151:                            
    00000060 8836                   CMP/EQ      #54,R0
    00000062 8B01                   BF          L1152
    00000064 A0FD                   BRA         L762
    00000066 0009                   NOP
    00000068              L1152:                            
    00000068 8837                   CMP/EQ      #55,R0
    0000006A 8B01                   BF          L1153
    0000006C A0FB                   BRA         L763
    0000006E 0009                   NOP
    00000070              L1153:                            
    00000070 8838                   CMP/EQ      #56,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000072 8B01                   BF          L1154
    00000074 A0F9                   BRA         L764
    00000076 0009                   NOP
    00000078              L1154:                            
    00000078 8839                   CMP/EQ      #57,R0
    0000007A 8B01                   BF          L1155
    0000007C A0F7                   BRA         L765
    0000007E 0009                   NOP
    00000080              L1155:                            
    00000080 882E                   CMP/EQ      #46,R0
    00000082 8B01                   BF          L1156
    00000084 A0F5                   BRA         L766
    00000086 0009                   NOP
    00000088              L1156:                            
    00000088 880F                   CMP/EQ      #15,R0
    0000008A 8B01                   BF          L1157
    0000008C A0F3                   BRA         L767
    0000008E 0009                   NOP
    00000090              L1157:                            
    00000090 9137                   MOV.W       L1158,R1   ; H'0087
    00000092 3010                   CMP/EQ      R1,R0
    00000094 8B01                   BF          L1159
    00000096 A0F0                   BRA         L768
    00000098 0009                   NOP
    0000009A              L1159:                            
    0000009A 9133                   MOV.W       L1158+2,R1 ; H'0089
    0000009C 3010                   CMP/EQ      R1,R0
    0000009E 8B01                   BF          L1160
    000000A0 A0ED                   BRA         L769
    000000A2 0009                   NOP
    000000A4              L1160:                            
    000000A4 912F                   MOV.W       L1158+4,R1 ; H'0099
    000000A6 3010                   CMP/EQ      R1,R0
    000000A8 8B01                   BF          L1161
    000000AA A0EA                   BRA         L770
    000000AC 0009                   NOP
    000000AE              L1161:                            
    000000AE 912B                   MOV.W       L1158+6,R1 ; H'00A9
    000000B0 3010                   CMP/EQ      R1,R0
    000000B2 8B01                   BF          L1162
    000000B4 A0E8                   BRA         L771
    000000B6 0009                   NOP
    000000B8              L1162:                            
    000000B8 9127                   MOV.W       L1158+8,R1 ; H'00B9
    000000BA 3010                   CMP/EQ      R1,R0
    000000BC 8B01                   BF          L1163
    000000BE A0E5                   BRA         L772
    000000C0 0009                   NOP
    000000C2              L1163:                            
    000000C2 9123                   MOV.W       L1158+10,R1; H'7534
    000000C4 3010                   CMP/EQ      R1,R0
    000000C6 8B01                   BF          L1164
    000000C8 A0E3                   BRA         L773
    000000CA 0009                   NOP
    000000CC              L1164:                            
    000000CC 911F                   MOV.W       L1158+12,R1; H'7549
    000000CE 3010                   CMP/EQ      R1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D0 8B01                   BF          L1165
    000000D2 A0E1                   BRA         L774
    000000D4 0009                   NOP
    000000D6              L1165:                            
    000000D6 911B                   MOV.W       L1158+14,R1; H'753F
    000000D8 3010                   CMP/EQ      R1,R0
    000000DA 8B01                   BF          L1166
    000000DC A0DF                   BRA         L775
    000000DE 0009                   NOP
    000000E0              L1166:                            
    000000E0 9117                   MOV.W       L1158+16,R1; H'00BB
    000000E2 3010                   CMP/EQ      R1,R0
    000000E4 8B01                   BF          L1167
    000000E6 A0DE                   BRA         L776
    000000E8 0009                   NOP
    000000EA              L1167:                            
    000000EA 9113                   MOV.W       L1158+18,R1; H'755E
    000000EC 3010                   CMP/EQ      R1,R0
    000000EE 8B01                   BF          L1168
    000000F0 A0DB                   BRA         L777
    000000F2 0009                   NOP
    000000F4              L1168:                            
    000000F4 8828                   CMP/EQ      #40,R0
    000000F6 8B01                   BF          L1169
    000000F8 A0D9                   BRA         L778
    000000FA 0009                   NOP
    000000FC              L1169:                            
    000000FC 8829                   CMP/EQ      #41,R0
    000000FE A00A                   BRA         L1109
    00000100 0009                   NOP
    00000102              L1158:                            
    00000102 0087                   .DATA.W     H'0087
    00000104 0089                   .DATA.W     H'0089
    00000106 0099                   .DATA.W     H'0099
    00000108 00A9                   .DATA.W     H'00A9
    0000010A 00B9                   .DATA.W     H'00B9
    0000010C 7534                   .DATA.W     H'7534
    0000010E 7549                   .DATA.W     H'7549
    00000110 753F                   .DATA.W     H'753F
    00000112 00BB                   .DATA.W     H'00BB
    00000114 755E                   .DATA.W     H'755E
    00000116              L1109:                            
    00000116 8B01                   BF          L1170
    00000118 A0CB                   BRA         L779
    0000011A 0009                   NOP
    0000011C              L1170:                            
    0000011C 882C                   CMP/EQ      #44,R0
    0000011E 8B01                   BF          L1171
    00000120 A0C9                   BRA         L780
    00000122 0009                   NOP
    00000124              L1171:                            
    00000124 880E                   CMP/EQ      #14,R0
    00000126 8B01                   BF          L1172
    00000128 A0C7                   BRA         L781
    0000012A 0009                   NOP
    0000012C              L1172:                            
    0000012C 9166                   MOV.W       L1173,R1   ; H'7531




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000012E 3010                   CMP/EQ      R1,R0
    00000130 8B01                   BF          L1174
    00000132 A0C5                   BRA         L782
    00000134 0009                   NOP
    00000136              L1174:                            
    00000136 9162                   MOV.W       L1173+2,R1 ; H'0095
    00000138 3010                   CMP/EQ      R1,R0
    0000013A 8B01                   BF          L1175
    0000013C A0C2                   BRA         L783
    0000013E 0009                   NOP
    00000140              L1175:                            
    00000140 915E                   MOV.W       L1173+4,R1 ; H'0085
    00000142 3010                   CMP/EQ      R1,R0
    00000144 8B01                   BF          L1176
    00000146 A0BF                   BRA         L784
    00000148 0009                   NOP
    0000014A              L1176:                            
    0000014A 915A                   MOV.W       L1173+6,R1 ; H'0081
    0000014C 3010                   CMP/EQ      R1,R0
    0000014E 8B01                   BF          L1177
    00000150 A0BC                   BRA         L785
    00000152 0009                   NOP
    00000154              L1177:                            
    00000154 9156                   MOV.W       L1173+8,R1 ; H'0082
    00000156 3010                   CMP/EQ      R1,R0
    00000158 8B01                   BF          L1178
    0000015A A0B9                   BRA         L786
    0000015C 0009                   NOP
    0000015E              L1178:                            
    0000015E 9152                   MOV.W       L1173+10,R1; H'0083
    00000160 3010                   CMP/EQ      R1,R0
    00000162 8B01                   BF          L1179
    00000164 A0B6                   BRA         L787
    00000166 0009                   NOP
    00000168              L1179:                            
    00000168 914E                   MOV.W       L1173+12,R1; H'008B
    0000016A 3010                   CMP/EQ      R1,R0
    0000016C 8B01                   BF          L1180
    0000016E A0B4                   BRA         L788
    00000170 0009                   NOP
    00000172              L1180:                            
    00000172 914A                   MOV.W       L1173+14,R1; H'00A8
    00000174 3010                   CMP/EQ      R1,R0
    00000176 8B01                   BF          L1181
    00000178 A0B1                   BRA         L789
    0000017A 0009                   NOP
    0000017C              L1181:                            
    0000017C 9146                   MOV.W       L1173+16,R1; H'7532
    0000017E 3010                   CMP/EQ      R1,R0
    00000180 8B01                   BF          L1182
    00000182 A0AE                   BRA         L790
    00000184 0009                   NOP
    00000186              L1182:                            
    00000186 9142                   MOV.W       L1173+18,R1; H'7536
    00000188 3010                   CMP/EQ      R1,R0
    0000018A 8B01                   BF          L1183
    0000018C A0AB                   BRA         L791




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000018E 0009                   NOP
    00000190              L1183:                            
    00000190 913E                   MOV.W       L1173+20,R1; H'7537
    00000192 3010                   CMP/EQ      R1,R0
    00000194 8B01                   BF          L1184
    00000196 A0AB                   BRA         L792
    00000198 0009                   NOP
    0000019A              L1184:                            
    0000019A 913A                   MOV.W       L1173+22,R1; H'7538
    0000019C 3010                   CMP/EQ      R1,R0
    0000019E 8B01                   BF          L1185
    000001A0 A0A8                   BRA         L793
    000001A2 0009                   NOP
    000001A4              L1185:                            
    000001A4 9136                   MOV.W       L1173+24,R1; H'7540
    000001A6 3010                   CMP/EQ      R1,R0
    000001A8 8B01                   BF          L1186
    000001AA A0A5                   BRA         L794
    000001AC 0009                   NOP
    000001AE              L1186:                            
    000001AE 9132                   MOV.W       L1173+26,R1; H'7533
    000001B0 3010                   CMP/EQ      R1,R0
    000001B2 8B01                   BF          L1187
    000001B4 A0A2                   BRA         L795
    000001B6 0009                   NOP
    000001B8              L1187:                            
    000001B8 912E                   MOV.W       L1173+28,R1; H'7542
    000001BA 3010                   CMP/EQ      R1,R0
    000001BC 8B01                   BF          L1188
    000001BE A09F                   BRA         L796
    000001C0 0009                   NOP
    000001C2              L1188:                            
    000001C2 912A                   MOV.W       L1173+30,R1; H'7547
    000001C4 3010                   CMP/EQ      R1,R0
    000001C6 8B01                   BF          L1189
    000001C8 A09C                   BRA         L797
    000001CA 0009                   NOP
    000001CC              L1189:                            
    000001CC 9126                   MOV.W       L1173+32,R1; H'7544
    000001CE 3010                   CMP/EQ      R1,R0
    000001D0 8B01                   BF          L1190
    000001D2 A099                   BRA         L798
    000001D4 0009                   NOP
    000001D6              L1190:                            
    000001D6 9122                   MOV.W       L1173+34,R1; H'7545
    000001D8 3010                   CMP/EQ      R1,R0
    000001DA 8B01                   BF          L1191
    000001DC A097                   BRA         L799
    000001DE 0009                   NOP
    000001E0              L1191:                            
    000001E0 911E                   MOV.W       L1173+36,R1; H'7539
    000001E2 3010                   CMP/EQ      R1,R0
    000001E4 8B01                   BF          L1192
    000001E6 A095                   BRA         L800
    000001E8 0009                   NOP
    000001EA              L1192:                            
    000001EA 911A                   MOV.W       L1173+38,R1; H'753A




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001EC 3010                   CMP/EQ      R1,R0
    000001EE 8B01                   BF          L1193
    000001F0 A092                   BRA         L801
    000001F2 0009                   NOP
    000001F4              L1193:                            
    000001F4 9116                   MOV.W       L1173+40,R1; H'753B
    000001F6 3010                   CMP/EQ      R1,R0
    000001F8 A015                   BRA         L1110
    000001FA 0009                   NOP
    000001FC              L1173:                            
    000001FC 7531                   .DATA.W     H'7531
    000001FE 0095                   .DATA.W     H'0095
    00000200 0085                   .DATA.W     H'0085
    00000202 0081                   .DATA.W     H'0081
    00000204 0082                   .DATA.W     H'0082
    00000206 0083                   .DATA.W     H'0083
    00000208 008B                   .DATA.W     H'008B
    0000020A 00A8                   .DATA.W     H'00A8
    0000020C 7532                   .DATA.W     H'7532
    0000020E 7536                   .DATA.W     H'7536
    00000210 7537                   .DATA.W     H'7537
    00000212 7538                   .DATA.W     H'7538
    00000214 7540                   .DATA.W     H'7540
    00000216 7533                   .DATA.W     H'7533
    00000218 7542                   .DATA.W     H'7542
    0000021A 7547                   .DATA.W     H'7547
    0000021C 7544                   .DATA.W     H'7544
    0000021E 7545                   .DATA.W     H'7545
    00000220 7539                   .DATA.W     H'7539
    00000222 753A                   .DATA.W     H'753A
    00000224 753B                   .DATA.W     H'753B
    00000226              L1110:                            
    00000226 8B01                   BF          L1194
    00000228 A078                   BRA         L802
    0000022A 0009                   NOP
    0000022C              L1194:                            
    0000022C 915D                   MOV.W       L1195,R1   ; H'753C
    0000022E 3010                   CMP/EQ      R1,R0
    00000230 8B01                   BF          L1196
    00000232 A075                   BRA         L803
    00000234 0009                   NOP
    00000236              L1196:                            
    00000236 9159                   MOV.W       L1195+2,R1 ; H'753D
    00000238 3010                   CMP/EQ      R1,R0
    0000023A 8B01                   BF          L1197
    0000023C A072                   BRA         L804
    0000023E 0009                   NOP
    00000240              L1197:                            
    00000240 9155                   MOV.W       L1195+4,R1 ; H'753E
    00000242 3010                   CMP/EQ      R1,R0
    00000244 8970                   BT          L805
    00000246 A089                   BRA         L737
    00000248 0009                   NOP
    0000024A              L756:                            ; case label 
           Fun.c  1869        {
           Fun.c  1870        case KEY_CHAR_0:
           Fun.c  1871            GETCODE(7, 2);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  1872            break;
    0000024A A023                   BRA         L1082
    0000024C 6D63                   MOV         R6,R13
    0000024E              L757:                            ; case label 
           Fun.c  1873        case KEY_CHAR_1:
           Fun.c  1874            GETCODE(7, 3);
           Fun.c  1875            break;
    0000024E A019                   BRA         L1079
    00000250 6D63                   MOV         R6,R13
    00000252              L758:                            ; case label 
           Fun.c  1876        case KEY_CHAR_2:
           Fun.c  1877            GETCODE(6, 3);
           Fun.c  1878            break;
    00000252 A017                   BRA         L1079
    00000254 6D53                   MOV         R5,R13
    00000256              L759:                            ; case label 
           Fun.c  1879        case KEY_CHAR_3:
           Fun.c  1880            GETCODE(5, 3);
           Fun.c  1881            break;
    00000256 A015                   BRA         L1079
    00000258 6DC3                   MOV         R12,R13
    0000025A              L760:                            ; case label 
           Fun.c  1882        case KEY_CHAR_4:
           Fun.c  1883            GETCODE(7, 4);
           Fun.c  1884            break;
    0000025A A018                   BRA         L1081
    0000025C 6D63                   MOV         R6,R13
    0000025E              L761:                            ; case label 
           Fun.c  1885        case KEY_CHAR_5:
           Fun.c  1886            GETCODE(6, 4);
           Fun.c  1887            break;
    0000025E A016                   BRA         L1081
    00000260 6D53                   MOV         R5,R13
    00000262              L762:                            ; case label 
           Fun.c  1888        case KEY_CHAR_6:
           Fun.c  1889            GETCODE(5, 4);
           Fun.c  1890            break;
    00000262 A014                   BRA         L1081
    00000264 6DC3                   MOV         R12,R13
    00000266              L763:                            ; case label 
           Fun.c  1891        case KEY_CHAR_7:
           Fun.c  1892            GETCODE(7, 5);
           Fun.c  1893            break;
    00000266 A018                   BRA         L1083
    00000268 6D63                   MOV         R6,R13
    0000026A              L764:                            ; case label 
           Fun.c  1894        case KEY_CHAR_8:
           Fun.c  1895            GETCODE(6, 5);
           Fun.c  1896            break;
    0000026A A016                   BRA         L1083
    0000026C 6D53                   MOV         R5,R13
    0000026E              L765:                            ; case label 
           Fun.c  1897        case KEY_CHAR_9:
           Fun.c  1898            GETCODE(5, 5);
           Fun.c  1899            break;
    0000026E A014                   BRA         L1083
    00000270 6DC3                   MOV         R12,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000272              L766:                            ; case label 
           Fun.c  1900        case KEY_CHAR_DP:
           Fun.c  1901            GETCODE(6, 2);
           Fun.c  1902            break;
    00000272 A00F                   BRA         L1082
    00000274 6D53                   MOV         R5,R13
    00000276              L767:                            ; case label 
           Fun.c  1903        case KEY_CHAR_EXP:
           Fun.c  1904            GETCODE(5, 2);
           Fun.c  1905            break;
    00000276 A00D                   BRA         L1082
    00000278 6DC3                   MOV         R12,R13
    0000027A              L768:                            ; case label 
           Fun.c  1906        case KEY_CHAR_PMINUS:
           Fun.c  1907            GETCODE(4, 2);
           Fun.c  1908            break;
    0000027A A00B                   BRA         L1082
    0000027C 6D73                   MOV         R7,R13
    0000027E              L769:                            ; case label 
           Fun.c  1909        case KEY_CHAR_PLUS:
           Fun.c  1910            GETCODE(4, 3);
           Fun.c  1911            break;
    0000027E A001                   BRA         L1079
    00000280 6D73                   MOV         R7,R13
    00000282              L770:                            ; case label 
           Fun.c  1912        case KEY_CHAR_MINUS:
           Fun.c  1913            GETCODE(3, 3);
    00000282 6DB3                   MOV         R11,R13
           Fun.c  1914            break;
    00000284              L1079:                            
    00000284 A052                   BRA         L891
    00000286 6EB3                   MOV         R11,R14
    00000288              L771:                            ; case label 
           Fun.c  1915        case KEY_CHAR_MULT:
           Fun.c  1916            GETCODE(4, 4);
           Fun.c  1917            break;
    00000288 A001                   BRA         L1081
    0000028A 6D73                   MOV         R7,R13
    0000028C              L772:                            ; case label 
           Fun.c  1918        case KEY_CHAR_DIV:
           Fun.c  1919            GETCODE(3, 4);
    0000028C 6DB3                   MOV         R11,R13
           Fun.c  1920            break;
    0000028E              L1081:                            
    0000028E A04D                   BRA         L891
    00000290 6E73                   MOV         R7,R14
    00000292              L773:                            ; case label 
           Fun.c  1921        case KEY_CTRL_EXE:
           Fun.c  1922            GETCODE(3, 2);
    00000292 6DB3                   MOV         R11,R13
           Fun.c  1923            break;
    00000294              L1082:                            
    00000294 A04A                   BRA         L891
    00000296 6EA3                   MOV         R10,R14
    00000298              L774:                            ; case label 
           Fun.c  1924        case KEY_CTRL_DEL:
           Fun.c  1925            GETCODE(4, 5);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000298 6D73                   MOV         R7,R13
           Fun.c  1926            break;
    0000029A              L1083:                            
    0000029A A047                   BRA         L891
    0000029C 6EC3                   MOV         R12,R14
    0000029E              L775:                            ; case label 
           Fun.c  1927        case KEY_CTRL_AC:
           Fun.c  1928            GETCODE(1, 1);
    0000029E E401                   MOV         #1,R4
    000002A0 6D43                   MOV         R4,R13
           Fun.c  1929            break;
    000002A2 A043                   BRA         L891
    000002A4 6E43                   MOV         R4,R14
    000002A6              L776:                            ; case label 
           Fun.c  1930        case KEY_CHAR_FRAC:
           Fun.c  1931            GETCODE(7, 6);
           Fun.c  1932            break;
    000002A6 A009                   BRA         L1088
    000002A8 6D63                   MOV         R6,R13
    000002AA              L777:                            ; case label 
           Fun.c  1933        case KEY_CTRL_FD:
           Fun.c  1934            GETCODE(6, 6);
           Fun.c  1935            break;
    000002AA A007                   BRA         L1088
    000002AC 6D53                   MOV         R5,R13
    000002AE              L778:                            ; case label 
           Fun.c  1936        case KEY_CHAR_LPAR:
           Fun.c  1937            GETCODE(5, 6);
           Fun.c  1938            break;
    000002AE A005                   BRA         L1088
    000002B0 6DC3                   MOV         R12,R13
    000002B2              L779:                            ; case label 
           Fun.c  1939        case KEY_CHAR_RPAR:
           Fun.c  1940            GETCODE(4, 6);
           Fun.c  1941            break;
    000002B2 A003                   BRA         L1088
    000002B4 6D73                   MOV         R7,R13
    000002B6              L780:                            ; case label 
           Fun.c  1942        case KEY_CHAR_COMMA:
           Fun.c  1943            GETCODE(3, 6);
           Fun.c  1944            break;
    000002B6 A001                   BRA         L1088
    000002B8 6DB3                   MOV         R11,R13
    000002BA              L781:                            ; case label 
           Fun.c  1945        case KEY_CHAR_STORE:
           Fun.c  1946            GETCODE(2, 6);
    000002BA 6DA3                   MOV         R10,R13
           Fun.c  1947            break;
    000002BC              L1088:                            
    000002BC A036                   BRA         L891
    000002BE 6E53                   MOV         R5,R14
    000002C0              L782:                            ; case label 
           Fun.c  1948        case KEY_CTRL_XTT:
           Fun.c  1949            GETCODE(7, 7);
           Fun.c  1950            break;
    000002C0 A009                   BRA         L1093
    000002C2 6D63                   MOV         R6,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002C4              L783:                            ; case label 
           Fun.c  1951        case KEY_CHAR_LOG:
           Fun.c  1952            GETCODE(6, 7);
           Fun.c  1953            break;
    000002C4 A007                   BRA         L1093
    000002C6 6D53                   MOV         R5,R13
    000002C8              L784:                            ; case label 
           Fun.c  1954        case KEY_CHAR_LN:
           Fun.c  1955            GETCODE(5, 7);
           Fun.c  1956            break;
    000002C8 A005                   BRA         L1093
    000002CA 6DC3                   MOV         R12,R13
    000002CC              L785:                            ; case label 
           Fun.c  1957        case KEY_CHAR_SIN:
           Fun.c  1958            GETCODE(4, 7);
           Fun.c  1959            break;
    000002CC A003                   BRA         L1093
    000002CE 6D73                   MOV         R7,R13
    000002D0              L786:                            ; case label 
           Fun.c  1960        case KEY_CHAR_COS:
           Fun.c  1961            GETCODE(3, 7);
           Fun.c  1962            break;
    000002D0 A001                   BRA         L1093
    000002D2 6DB3                   MOV         R11,R13
    000002D4              L787:                            ; case label 
           Fun.c  1963        case KEY_CHAR_TAN:
           Fun.c  1964            GETCODE(2, 7);
    000002D4 6DA3                   MOV         R10,R13
           Fun.c  1965            break;
    000002D6              L1093:                            
    000002D6 A029                   BRA         L891
    000002D8 6E63                   MOV         R6,R14
    000002DA              L788:                            ; case label 
           Fun.c  1966        case KEY_CHAR_SQUARE:
           Fun.c  1967            GETCODE(6, 8);
           Fun.c  1968            break;
    000002DA A019                   BRA         L1103
    000002DC 6D53                   MOV         R5,R13
    000002DE              L789:                            ; case label 
           Fun.c  1969        case KEY_CHAR_POW:
           Fun.c  1970            GETCODE(5, 8);
           Fun.c  1971            break;
    000002DE A017                   BRA         L1103
    000002E0 6DC3                   MOV         R12,R13
    000002E2              L790:                            ; case label 
           Fun.c  1972        case KEY_CTRL_EXIT:
           Fun.c  1973            GETCODE(4, 8);
           Fun.c  1974            break;
    000002E2 A015                   BRA         L1103
    000002E4 6D73                   MOV         R7,R13
    000002E6              L791:                            ; case label 
           Fun.c  1975        case KEY_CTRL_SHIFT:
           Fun.c  1976            GETCODE(7, 9);
           Fun.c  1977            break;
    000002E6 A010                   BRA         L1102
    000002E8 6D63                   MOV         R6,R13
    000002EA              L1195:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002EA 753C                   .DATA.W     H'753C
    000002EC 753D                   .DATA.W     H'753D
    000002EE 753E                   .DATA.W     H'753E
    000002F0              L792:                            ; case label 
           Fun.c  1978        case KEY_CTRL_ALPHA:
           Fun.c  1979            GETCODE(7, 8);
           Fun.c  1980            break;
    000002F0 A00E                   BRA         L1103
    000002F2 6D63                   MOV         R6,R13
    000002F4              L793:                            ; case label 
           Fun.c  1981        case KEY_CTRL_OPTN:
           Fun.c  1982            GETCODE(6, 9);
           Fun.c  1983            break;
    000002F4 A009                   BRA         L1102
    000002F6 6D53                   MOV         R5,R13
    000002F8              L794:                            ; case label 
           Fun.c  1984        case KEY_CTRL_VARS:
           Fun.c  1985            GETCODE(5, 9);
           Fun.c  1986            break;
    000002F8 A007                   BRA         L1102
    000002FA 6DC3                   MOV         R12,R13
    000002FC              L795:                            ; case label 
           Fun.c  1987        case KEY_CTRL_MENU:
           Fun.c  1988            GETCODE(4, 9);
           Fun.c  1989            break;
    000002FC A005                   BRA         L1102
    000002FE 6D73                   MOV         R7,R13
    00000300              L796:                            ; case label 
           Fun.c  1990        case KEY_CTRL_UP:
           Fun.c  1991            GETCODE(2, 9);
           Fun.c  1992            break;
    00000300 A003                   BRA         L1102
    00000302 6DA3                   MOV         R10,R13
    00000304              L797:                            ; case label 
           Fun.c  1993        case KEY_CTRL_DOWN:
           Fun.c  1994            GETCODE(3, 8);
           Fun.c  1995            break;
    00000304 A004                   BRA         L1103
    00000306 6DB3                   MOV         R11,R13
    00000308              L798:                            ; case label 
           Fun.c  1996        case KEY_CTRL_LEFT:
           Fun.c  1997            GETCODE(3, 9);
    00000308 6DB3                   MOV         R11,R13
           Fun.c  1998            break;
    0000030A              L1102:                            
    0000030A A00F                   BRA         L891
    0000030C 6E83                   MOV         R8,R14
    0000030E              L799:                            ; case label 
           Fun.c  1999        case KEY_CTRL_RIGHT:
           Fun.c  2000            GETCODE(2, 8);
    0000030E 6DA3                   MOV         R10,R13
           Fun.c  2001            break;
    00000310              L1103:                            
    00000310 A00C                   BRA         L891
    00000312 EE08                   MOV         #8,R14
    00000314              L800:                            ; case label 
           Fun.c  2002        case KEY_CTRL_F1:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2003            GETCODE(7, 10);
           Fun.c  2004            break;
    00000314 A009                   BRA         L1108
    00000316 6D63                   MOV         R6,R13
    00000318              L801:                            ; case label 
           Fun.c  2005        case KEY_CTRL_F2:
           Fun.c  2006            GETCODE(6, 10);
           Fun.c  2007            break;
    00000318 A007                   BRA         L1108
    0000031A 6D53                   MOV         R5,R13
    0000031C              L802:                            ; case label 
           Fun.c  2008        case KEY_CTRL_F3:
           Fun.c  2009            GETCODE(5, 10);
           Fun.c  2010            break;
    0000031C A005                   BRA         L1108
    0000031E 6DC3                   MOV         R12,R13
    00000320              L803:                            ; case label 
           Fun.c  2011        case KEY_CTRL_F4:
           Fun.c  2012            GETCODE(4, 10);
           Fun.c  2013            break;
    00000320 A003                   BRA         L1108
    00000322 6D73                   MOV         R7,R13
    00000324              L804:                            ; case label 
           Fun.c  2014        case KEY_CTRL_F5:
           Fun.c  2015            GETCODE(3, 10);
           Fun.c  2016            break;
    00000324 A001                   BRA         L1108
    00000326 6DB3                   MOV         R11,R13
    00000328              L805:                            ; case label 
           Fun.c  2017        case KEY_CTRL_F6:
           Fun.c  2018            GETCODE(2, 10);
    00000328 6DA3                   MOV         R10,R13
           Fun.c  2019            break;
    0000032A              L1108:                            
    0000032A 6E93                   MOV         R9,R14
    0000032C              L891:                             
           Fun.c  2020    
           Fun.c  2021        default:
           Fun.c  2022            return 0;
           Fun.c  2023        }
           Fun.c  2024    
           Fun.c  2025        if (Bkey_GetKeyWait(&kcode1, &kcode2, KEYWAIT_HALTOFF_TIMEROFF, 0, 0, &unused) == KEYREP_KEYEVENT)
    0000032C 62F3                   MOV         R15,R2
    0000032E 7208                   ADD         #8,R2
    00000330 2F26                   MOV.L       R2,@-R15
    00000332 E300                   MOV         #0,R3
    00000334 D287                   MOV.L       L1198+2,R2 ; _Bkey_GetKeyWait
    00000336 E601                   MOV         #1,R6
    00000338 2F36                   MOV.L       R3,@-R15
    0000033A 6733                   MOV         R3,R7
    0000033C 65F3                   MOV         R15,R5
    0000033E 7508                   ADD         #8,R5
    00000340 64F3                   MOV         R15,R4
    00000342 420B                   JSR         @R2
    00000344 740C                   ADD         #12,R4
    00000346 8801                   CMP/EQ      #1,R0
    00000348 8F08                   BF/S        L737




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000034A 7F08                   ADD         #8,R15
           Fun.c  2026        {
           Fun.c  2027            if ((kcode1 == gcode1) && (kcode2 == gcode2))
    0000034C 52F1                   MOV.L       @(4,R15),R2
    0000034E 32D0                   CMP/EQ      R13,R2
    00000350 8B04                   BF          L737
    00000352 61F2                   MOV.L       @R15,R1
    00000354 31E0                   CMP/EQ      R14,R1
    00000356 8B01                   BF          L737
           Fun.c  2028                return 1;
    00000358 A001                   BRA         L892
    0000035A E001                   MOV         #1,R0
    0000035C              L737:
           Fun.c  2029        }
           Fun.c  2030        return 0;
    0000035C E000                   MOV         #0,R0
           Fun.c  2031    }
    0000035E              L892:                             
    0000035E 7F0C                   ADD         #12,R15
    00000360 4F26                   LDS.L       @R15+,PR
    00000362 68F6                   MOV.L       @R15+,R8
    00000364 69F6                   MOV.L       @R15+,R9
    00000366 6AF6                   MOV.L       @R15+,R10
    00000368 6BF6                   MOV.L       @R15+,R11
    0000036A 6CF6                   MOV.L       @R15+,R12
    0000036C 6DF6                   MOV.L       @R15+,R13
    0000036E 000B                   RTS
    00000370 6EF6                   MOV.L       @R15+,R14
           Fun.c  2032    void Data_Match(LPTOWERPLACE Need_Match, LPTOWER Tower_data, LPPOSITION Tower_Position)
    00000372              _Data_Match:                     ; function: Data_Match
                                                           ; frame size=0
           Fun.c  2033    {
           Fun.c  2034        Need_Match->Place_Tower->id = Tower_data->id;
    00000372 6342                   MOV.L       @R4,R3
    00000374 6252                   MOV.L       @R5,R2
    00000376 2322                   MOV.L       R2,@R3
           Fun.c  2035        Need_Match->Place_Tower->Attack = Tower_data->Attack;
    00000378 6142                   MOV.L       @R4,R1
    0000037A 6253                   MOV         R5,R2
    0000037C 7208                   ADD         #8,R2
    0000037E 7108                   ADD         #8,R1
    00000380 6022                   MOV.L       @R2,R0
           Fun.c  2036        Need_Match->Place_Tower->Attack_Frequency = Tower_data->Attack_Frequency;
    00000382 6353                   MOV         R5,R3
    00000384 2102                   MOV.L       R0,@R1
    00000386 7310                   ADD         #16,R3
    00000388 5021                   MOV.L       @(4,R2),R0
    0000038A 1101                   MOV.L       R0,@(4,R1)
    0000038C 6142                   MOV.L       @R4,R1
    0000038E 7110                   ADD         #16,R1
    00000390 6032                   MOV.L       @R3,R0
    00000392 2102                   MOV.L       R0,@R1
    00000394 5031                   MOV.L       @(4,R3),R0
    00000396 1101                   MOV.L       R0,@(4,R1)
           Fun.c  2037        Need_Match->Place_Tower->Attack_Range = Tower_data->Attack_Range;
    00000398 6342                   MOV.L       @R4,R3
    0000039A 5256                   MOV.L       @(24,R5),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000039C 1326                   MOV.L       R2,@(24,R3)
           Fun.c  2038        Need_Match->Place_Tower->Tower_Level = Tower_data->Tower_Level;
    0000039E 6342                   MOV.L       @R4,R3
    000003A0 5251                   MOV.L       @(4,R5),R2
    000003A2 1321                   MOV.L       R2,@(4,R3)
           Fun.c  2039        Need_Match->position->x = Tower_Position->x;
    000003A4 5341                   MOV.L       @(4,R4),R3
    000003A6 6262                   MOV.L       @R6,R2
    000003A8 2322                   MOV.L       R2,@R3
           Fun.c  2040        Need_Match->position->y = Tower_Position->y;
    000003AA 5341                   MOV.L       @(4,R4),R3
    000003AC 5261                   MOV.L       @(4,R6),R2
           Fun.c  2041    }
    000003AE 000B                   RTS
    000003B0 1321                   MOV.L       R2,@(4,R3)
           Fun.c  2042    
           Fun.c  2043    void printf_xy(int x, int y, int mode, const char *format, ...)
    000003B2              _printf_xy:                      ; function: printf_xy
                                                           ; frame size=20
    000003B2 2FE6                   MOV.L       R14,@-R15
    000003B4 4F22                   STS.L       PR,@-R15
    000003B6 7FF4                   ADD         #-12,R15
    000003B8 1F41                   MOV.L       R4,@(4,R15)
           Fun.c  2044    {
           Fun.c  2045        static char buff[200];
           Fun.c  2046        va_list args;
           Fun.c  2047        int i;
           Fun.c  2048        va_start(args, format);
    000003BA 60F3                   MOV         R15,R0
    000003BC 2F52                   MOV.L       R5,@R15
    000003BE 7014                   ADD         #20,R0
    000003C0 1F62                   MOV.L       R6,@(8,R15)
    000003C2 E503                   MOV         #3,R5
    000003C4 7004                   ADD         #4,R0
    000003C6 2508                   TST         R0,R5
    000003C8 8903                   BT          L895
    000003CA 65F3                   MOV         R15,R5
    000003CC 7514                   ADD         #20,R5
    000003CE A003                   BRA         L896
    000003D0 7508                   ADD         #8,R5
    000003D2              L895:                             
    000003D2 65F3                   MOV         R15,R5
    000003D4 7514                   ADD         #20,R5
    000003D6 7504                   ADD         #4,R5
    000003D8              L896:                             
           Fun.c  2049        i = vsprintf(buff, format, args);
    000003D8 DE5F                   MOV.L       L1198+6,R14; __$buff$450
    000003DA 6653                   MOV         R5,R6
    000003DC D35F                   MOV.L       L1198+10,R3; _vsprintf
    000003DE 55F5                   MOV.L       @(20,R15),R5
    000003E0 430B                   JSR         @R3
    000003E2 64E3                   MOV         R14,R4
           Fun.c  2050        va_end(args);
           Fun.c  2051        buff[i] = '\0';
    000003E4 E300                   MOV         #0,R3
           Fun.c  2052        PrintXY(x, y, (const unsigned char *)buff, mode);
    000003E6 66E3                   MOV         R14,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003E8 0E34                   MOV.B       R3,@(R0,R14)
    000003EA 57F2                   MOV.L       @(8,R15),R7
    000003EC 65F2                   MOV.L       @R15,R5
    000003EE D35C                   MOV.L       L1198+14,R3; _PrintXY
    000003F0 430B                   JSR         @R3
    000003F2 54F1                   MOV.L       @(4,R15),R4
           Fun.c  2053        Bdisp_PutDisp_DD();
    000003F4 D25B                   MOV.L       L1198+18,R2; _Bdisp_PutDisp_DD
    000003F6 420B                   JSR         @R2
    000003F8 0009                   NOP
           Fun.c  2054    }
    000003FA 7F0C                   ADD         #12,R15
    000003FC 4F26                   LDS.L       @R15+,PR
    000003FE 000B                   RTS
    00000400 6EF6                   MOV.L       @R15+,R14
           Fun.c  2055    void printf_pop_xy(int x, int y, const char *format, ...)
    00000402              _printf_pop_xy:                  ; function: printf_pop_xy
                                                           ; frame size=16
    00000402 2FE6                   MOV.L       R14,@-R15
    00000404 4F22                   STS.L       PR,@-R15
    00000406 7FF8                   ADD         #-8,R15
    00000408 2F42                   MOV.L       R4,@R15
           Fun.c  2056    {
           Fun.c  2057        static char buff[200];
           Fun.c  2058        va_list args;
           Fun.c  2059        int i;
           Fun.c  2060        va_start(args, format);
    0000040A 60F3                   MOV         R15,R0
    0000040C 1F51                   MOV.L       R5,@(4,R15)
    0000040E 7010                   ADD         #16,R0
    00000410 7004                   ADD         #4,R0
    00000412 E503                   MOV         #3,R5
    00000414 2508                   TST         R0,R5
    00000416 8903                   BT          L897
    00000418 65F3                   MOV         R15,R5
    0000041A 7510                   ADD         #16,R5
    0000041C A003                   BRA         L898
    0000041E 7508                   ADD         #8,R5
    00000420              L897:                             
    00000420 65F3                   MOV         R15,R5
    00000422 7510                   ADD         #16,R5
    00000424 7504                   ADD         #4,R5
    00000426              L898:                             
           Fun.c  2061        i = vsprintf(buff, format, args);
    00000426 6653                   MOV         R5,R6
    00000428 D34C                   MOV.L       L1198+10,R3; _vsprintf
    0000042A DE4F                   MOV.L       L1198+22,R14; __$buff$457
    0000042C 55F4                   MOV.L       @(16,R15),R5
    0000042E 430B                   JSR         @R3
    00000430 64E3                   MOV         R14,R4
           Fun.c  2062        va_end(args);
           Fun.c  2063        buff[i] = '\0';
    00000432 E300                   MOV         #0,R3
    00000434 0E34                   MOV.B       R3,@(R0,R14)
           Fun.c  2064        locate(x, y);
    00000436 55F1                   MOV.L       @(4,R15),R5
    00000438 D34C                   MOV.L       L1198+26,R3; _locate




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000043A 430B                   JSR         @R3
    0000043C 64F2                   MOV.L       @R15,R4
           Fun.c  2065        Print((const unsigned char *)buff);
    0000043E D24C                   MOV.L       L1198+30,R2; _Print
    00000440 420B                   JSR         @R2
    00000442 64E3                   MOV         R14,R4
           Fun.c  2066        Bdisp_PutDisp_DD();
    00000444 D347                   MOV.L       L1198+18,R3; _Bdisp_PutDisp_DD
    00000446 430B                   JSR         @R3
    00000448 0009                   NOP
           Fun.c  2067    }
    0000044A 7F08                   ADD         #8,R15
    0000044C 4F26                   LDS.L       @R15+,PR
    0000044E 000B                   RTS
    00000450 6EF6                   MOV.L       @R15+,R14
           Fun.c  2068    
           Fun.c  2069    int my_atoi(const char *str)
    00000452              _my_atoi:                        ; function: my_atoi
                                                           ; frame size=0
           Fun.c  2070    {
           Fun.c  2071        int n = 0;
           Fun.c  2072        while (*str != '\0')
    00000452 A009                   BRA         L899
    00000454 E500                   MOV         #0,R5
    00000456              L900:                             
           Fun.c  2073        {
           Fun.c  2074            n = n * 10 + (*str - '0');
    00000456 6253                   MOV         R5,R2
    00000458 6144                   MOV.B       @R4+,R1
    0000045A 6353                   MOV         R5,R3
    0000045C 4208                   SHLL2       R2
    0000045E 323C                   ADD         R3,R2
    00000460 4200                   SHLL        R2
    00000462 321C                   ADD         R1,R2
    00000464 6523                   MOV         R2,R5
    00000466 75D0                   ADD         #-48,R5
           Fun.c  2075            str++;
    00000468              L899:                             
    00000468 6340                   MOV.B       @R4,R3
    0000046A 2338                   TST         R3,R3
    0000046C 8BF3                   BF          L900
           Fun.c  2076        }
           Fun.c  2077        return n;
           Fun.c  2078    }
    0000046E 000B                   RTS
    00000470 6053                   MOV         R5,R0
           Fun.c  2079    
           Fun.c  2080    void draw_picture(int x, int y, int width, int height, int kind, int mod, unsigned char *pGraph)
    00000472              _draw_picture:                   ; function: draw_picture
                                                           ; frame size=28
           Fun.c  2081    {
           Fun.c  2082        DISPGRAPH dg;
           Fun.c  2083        dg.x = x;
           Fun.c  2084        dg.y = y;
           Fun.c  2085        dg.GraphData.width = width;
           Fun.c  2086        dg.GraphData.height = height;
           Fun.c  2087        dg.GraphData.pBitmap = pGraph;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2088        dg.WriteModify = mod;
    00000472 E014                   MOV         #20,R0
    00000474 4F22                   STS.L       PR,@-R15
    00000476 7FE8                   ADD         #-24,R15
    00000478 2F42                   MOV.L       R4,@R15
    0000047A 1F51                   MOV.L       R5,@(4,R15)
    0000047C 1F62                   MOV.L       R6,@(8,R15)
    0000047E 1F73                   MOV.L       R7,@(12,R15)
    00000480 53F9                   MOV.L       @(36,R15),R3
    00000482 1F34                   MOV.L       R3,@(16,R15)
    00000484 52F8                   MOV.L       @(32,R15),R2
    00000486 0F24                   MOV.B       R2,@(R0,R15)
           Fun.c  2089        dg.WriteKind = kind;
    00000488 53F7                   MOV.L       @(28,R15),R3
    0000048A E015                   MOV         #21,R0
    0000048C 0F34                   MOV.B       R3,@(R0,R15)
           Fun.c  2090        Bdisp_WriteGraph_VRAM(&dg);
    0000048E D339                   MOV.L       L1198+34,R3; _Bdisp_WriteGraph_VRAM
    00000490 430B                   JSR         @R3
    00000492 64F3                   MOV         R15,R4
           Fun.c  2091    }
    00000494 7F18                   ADD         #24,R15
    00000496 4F26                   LDS.L       @R15+,PR
    00000498 000B                   RTS
    0000049A 0009                   NOP
           Fun.c  2092    
           Fun.c  2093    void area_clear(int left, int top, int right, int bottom, int sel)
    0000049C              _area_clear:                     ; function: area_clear
                                                           ; frame size=28
    0000049C 2FE6                   MOV.L       R14,@-R15
    0000049E 4F22                   STS.L       PR,@-R15
    000004A0 7FEC                   ADD         #-20,R15
           Fun.c  2094    {
           Fun.c  2095        DISPBOX box;
           Fun.c  2096        box.left = left;
    000004A2 1F41                   MOV.L       R4,@(4,R15)
           Fun.c  2097        box.top = top;
    000004A4 1F52                   MOV.L       R5,@(8,R15)
           Fun.c  2098        box.right = right;
    000004A6 1F63                   MOV.L       R6,@(12,R15)
           Fun.c  2099        box.bottom = bottom;
    000004A8 1F74                   MOV.L       R7,@(16,R15)
           Fun.c  2100        if (sel != 1)
    000004AA 50F7                   MOV.L       @(28,R15),R0
    000004AC 8801                   CMP/EQ      #1,R0
    000004AE 8903                   BT          L902
           Fun.c  2101            Bdisp_AreaClr_VRAM(&box);
    000004B0 D231                   MOV.L       L1198+38,R2; _Bdisp_AreaClr_VRAM
    000004B2 64F3                   MOV         R15,R4
    000004B4 420B                   JSR         @R2
    000004B6 7404                   ADD         #4,R4
    000004B8              L902:                             
           Fun.c  2102        if (sel != 0)
    000004B8 53F7                   MOV.L       @(28,R15),R3
    000004BA 2338                   TST         R3,R3
    000004BC 8918                   BT          L903
           Fun.c  2103        {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2104            Bdisp_DrawLineVRAM(box.left, box.top, box.right, box.top);
    000004BE DE2F                   MOV.L       L1198+42,R14; _Bdisp_DrawLineVRAM
    000004C0 57F2                   MOV.L       @(8,R15),R7
    000004C2 2F72                   MOV.L       R7,@R15
    000004C4 56F3                   MOV.L       @(12,R15),R6
    000004C6 6573                   MOV         R7,R5
    000004C8 4E0B                   JSR         @R14
    000004CA 54F1                   MOV.L       @(4,R15),R4
           Fun.c  2105            Bdisp_DrawLineVRAM(box.left, box.bottom, box.right, box.bottom);
    000004CC 57F4                   MOV.L       @(16,R15),R7
    000004CE 2F72                   MOV.L       R7,@R15
    000004D0 56F3                   MOV.L       @(12,R15),R6
    000004D2 6573                   MOV         R7,R5
    000004D4 4E0B                   JSR         @R14
    000004D6 54F1                   MOV.L       @(4,R15),R4
           Fun.c  2106            Bdisp_DrawLineVRAM(box.left, box.top, box.left, box.bottom);
    000004D8 57F4                   MOV.L       @(16,R15),R7
    000004DA 56F1                   MOV.L       @(4,R15),R6
    000004DC 2F62                   MOV.L       R6,@R15
    000004DE 55F2                   MOV.L       @(8,R15),R5
    000004E0 4E0B                   JSR         @R14
    000004E2 6463                   MOV         R6,R4
           Fun.c  2107            Bdisp_DrawLineVRAM(box.right, box.top, box.right, box.bottom);
    000004E4 57F4                   MOV.L       @(16,R15),R7
    000004E6 56F3                   MOV.L       @(12,R15),R6
    000004E8 2F62                   MOV.L       R6,@R15
    000004EA 55F2                   MOV.L       @(8,R15),R5
    000004EC 4E0B                   JSR         @R14
    000004EE 6463                   MOV         R6,R4
    000004F0              L903:                             
           Fun.c  2108        }
           Fun.c  2109    }
    000004F0 7F14                   ADD         #20,R15
    000004F2 4F26                   LDS.L       @R15+,PR
    000004F4 000B                   RTS
    000004F6 6EF6                   MOV.L       @R15+,R14
           Fun.c  2110    
           Fun.c  2111    void EnterGame()
    000004F8              _EnterGame:                      ; function: EnterGame
                                                           ; frame size=16
    000004F8 4F22                   STS.L       PR,@-R15
           Fun.c  2112    {
           Fun.c  2113        // Bdisp_AllClr_DDVRAM();
           Fun.c  2114        Bdisp_AllClr_VRAM();
    000004FA D321                   MOV.L       L1198+46,R3; _Bdisp_AllClr_VRAM
    000004FC 430B                   JSR         @R3
    000004FE 0009                   NOP
           Fun.c  2115        draw_picture(0, 0, 128, 64, 1, 1, MainMenu_graph_);
    00000500 D220                   MOV.L       L1198+50,R2; _MainMenu_graph_
    00000502 E301                   MOV         #1,R3
    00000504 2F26                   MOV.L       R2,@-R15
    00000506 E740                   MOV         #64,R7
    00000508 2F36                   MOV.L       R3,@-R15
    0000050A E500                   MOV         #0,R5
    0000050C 2F36                   MOV.L       R3,@-R15
    0000050E 6673                   MOV         R7,R6
    00000510 7640                   ADD         #64,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000512 BFAE                   BSR         _draw_picture
    00000514 6453                   MOV         R5,R4
    00000516 7F0C                   ADD         #12,R15
           Fun.c  2116        Bdisp_PutDisp_DD();
    00000518 D312                   MOV.L       L1198+18,R3; _Bdisp_PutDisp_DD
    0000051A 432B                   JMP         @R3
    0000051C 4F26                   LDS.L       @R15+,PR
           Fun.c  2117    }
           Fun.c  2118    void Map_Initialization(int *Map_Array, LPPOSITION Current_Screen, LPPOSITION last_position, int numOfCurr
                         +ent)
    0000051E              _Map_Initialization:             ; function: Map_Initialization
                                                           ; frame size=100
    0000051E 2FE6                   MOV.L       R14,@-R15
    00000520 2FD6                   MOV.L       R13,@-R15
           Fun.c  2119    {
           Fun.c  2120        int i, j;
           Fun.c  2121        int screen_x = 0, screen_y = 0;
           Fun.c  2122        for (i = Current_Screen->y; i < Current_Screen->y + 4; i++)
    00000522 EE01                   MOV         #1,R14
    00000524 2FC6                   MOV.L       R12,@-R15
    00000526 2FB6                   MOV.L       R11,@-R15
    00000528 2FA6                   MOV.L       R10,@-R15
    0000052A 6A53                   MOV         R5,R10
    0000052C 2F96                   MOV.L       R9,@-R15
    0000052E 2F86                   MOV.L       R8,@-R15
    00000530 4F22                   STS.L       PR,@-R15
    00000532 E800                   MOV         #0,R8
    00000534 4F12                   STS.L       MACL,@-R15
    00000536 6D83                   MOV         R8,R13
    00000538 7FF0                   ADD         #-16,R15
    0000053A 6C83                   MOV         R8,R12
    0000053C 2F42                   MOV.L       R4,@R15
    0000053E 1F62                   MOV.L       R6,@(8,R15)
    00000540 1F73                   MOV.L       R7,@(12,R15)
    00000542 A0B4                   BRA         L904
    00000544 59A1                   MOV.L       @(4,R10),R9
    00000546              L905:                             
    00000546 E225                   MOV         #37,R2
           Fun.c  2123        {
           Fun.c  2124            for (j = Current_Screen->x; j < Current_Screen->x + 8; j++)
    00000548 6BA2                   MOV.L       @R10,R11
    0000054A 0927                   MUL.L       R2,R9
    0000054C 021A                   STS         MACL,R2
    0000054E A0A5                   BRA         L906
    00000550 1F21                   MOV.L       R2,@(4,R15)
    00000552              L1198:                            
    00000552 0000                   .DATA.W     0
    00000554 <00000000>             .DATA.L     _Bkey_GetKeyWait
    00000558 <00000000>             .DATA.L     __$buff$450
    0000055C <00000000>             .DATA.L     _vsprintf
    00000560 <00000000>             .DATA.L     _PrintXY
    00000564 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000568 <00000000>             .DATA.L     __$buff$457
    0000056C <00000000>             .DATA.L     _locate
    00000570 <00000000>             .DATA.L     _Print
    00000574 <00000000>             .DATA.L     _Bdisp_WriteGraph_VRAM
    00000578 <00000000>             .DATA.L     _Bdisp_AreaClr_VRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000057C <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    00000580 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000584 <00000000>             .DATA.L     _MainMenu_graph_
    00000588              L907:                             
           Fun.c  2125            {
           Fun.c  2126                switch (Map_Array[i * 37 + j])
    00000588 50F1                   MOV.L       @(4,R15),R0
    0000058A 30BC                   ADD         R11,R0
    0000058C 63F2                   MOV.L       @R15,R3
    0000058E 4008                   SHLL2       R0
    00000590 003E                   MOV.L       @(R0,R3),R0
    00000592 8801                   CMP/EQ      #1,R0
    00000594 891B                   BT          L809
    00000596 8802                   CMP/EQ      #2,R0
    00000598 8920                   BT          L810
    0000059A 8803                   CMP/EQ      #3,R0
    0000059C 8925                   BT          L811
    0000059E 8804                   CMP/EQ      #4,R0
    000005A0 892A                   BT          L812
    000005A2 8805                   CMP/EQ      #5,R0
    000005A4 892F                   BT          L813
    000005A6 8806                   CMP/EQ      #6,R0
    000005A8 8934                   BT          L814
    000005AA 8807                   CMP/EQ      #7,R0
    000005AC 8939                   BT          L815
    000005AE 8808                   CMP/EQ      #8,R0
    000005B0 893E                   BT          L816
    000005B2 8831                   CMP/EQ      #49,R0
    000005B4 8943                   BT          L817
    000005B6 8832                   CMP/EQ      #50,R0
    000005B8 8948                   BT          L818
    000005BA 8833                   CMP/EQ      #51,R0
    000005BC 894D                   BT          L819
    000005BE 8834                   CMP/EQ      #52,R0
    000005C0 8952                   BT          L820
    000005C2 8835                   CMP/EQ      #53,R0
    000005C4 8957                   BT          L821
    000005C6 8836                   CMP/EQ      #54,R0
    000005C8 895C                   BT          L822
    000005CA A065                   BRA         L908
    000005CC 0009                   NOP
    000005CE              L809:                            ; case label 
           Fun.c  2127                {
           Fun.c  2128                case 1:
           Fun.c  2129                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tile_Default_graph_);
    000005CE E710                   MOV         #16,R7
    000005D0 D268                   MOV.L       L1199+2,R2 ; _Tile_Default_graph_
    000005D2 2F26                   MOV.L       R2,@-R15
    000005D4 2FE6                   MOV.L       R14,@-R15
    000005D6 2FE6                   MOV.L       R14,@-R15
           Fun.c  2130                    break;
    000005D8 A05A                   BRA         L1123
    000005DA 6673                   MOV         R7,R6
    000005DC              L810:                            ; case label 
           Fun.c  2131                case 2:
           Fun.c  2132                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, spawn_door_graph_);
    000005DC D266                   MOV.L       L1199+6,R2 ; _spawn_door_graph_




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005DE E710                   MOV         #16,R7
    000005E0 2F26                   MOV.L       R2,@-R15
    000005E2 2FE6                   MOV.L       R14,@-R15
    000005E4 2FE6                   MOV.L       R14,@-R15
           Fun.c  2133                    break;
    000005E6 A053                   BRA         L1123
    000005E8 6673                   MOV         R7,R6
    000005EA              L811:                            ; case label 
           Fun.c  2134                case 3:
           Fun.c  2135                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, base_graph_);
    000005EA E710                   MOV         #16,R7
    000005EC D263                   MOV.L       L1199+10,R2; _base_graph_
    000005EE 2F26                   MOV.L       R2,@-R15
    000005F0 2FE6                   MOV.L       R14,@-R15
    000005F2 2FE6                   MOV.L       R14,@-R15
           Fun.c  2136                    break;
    000005F4 A04C                   BRA         L1123
    000005F6 6673                   MOV         R7,R6
    000005F8              L812:                            ; case label 
           Fun.c  2137                case 4:
           Fun.c  2138                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_1_graph_);
    000005F8 D261                   MOV.L       L1199+14,R2; _check_point_1_graph_
    000005FA E710                   MOV         #16,R7
    000005FC 2F26                   MOV.L       R2,@-R15
    000005FE 2FE6                   MOV.L       R14,@-R15
    00000600 2FE6                   MOV.L       R14,@-R15
           Fun.c  2139                    break;
    00000602 A045                   BRA         L1123
    00000604 6673                   MOV         R7,R6
    00000606              L813:                            ; case label 
           Fun.c  2140                case 5:
           Fun.c  2141                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_2_graph_);
    00000606 E710                   MOV         #16,R7
    00000608 D25E                   MOV.L       L1199+18,R2; _check_point_2_graph_
    0000060A 2F26                   MOV.L       R2,@-R15
    0000060C 2FE6                   MOV.L       R14,@-R15
    0000060E 2FE6                   MOV.L       R14,@-R15
           Fun.c  2142                    break;
    00000610 A03E                   BRA         L1123
    00000612 6673                   MOV         R7,R6
    00000614              L814:                            ; case label 
           Fun.c  2143                case 6:
           Fun.c  2144                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_3_graph_);
    00000614 D25C                   MOV.L       L1199+22,R2; _check_point_3_graph_
    00000616 E710                   MOV         #16,R7
    00000618 2F26                   MOV.L       R2,@-R15
    0000061A 2FE6                   MOV.L       R14,@-R15
    0000061C 2FE6                   MOV.L       R14,@-R15
           Fun.c  2145                    break;
    0000061E A037                   BRA         L1123
    00000620 6673                   MOV         R7,R6
    00000622              L815:                            ; case label 
           Fun.c  2146                case 7:
           Fun.c  2147                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_4_graph_);
    00000622 E710                   MOV         #16,R7
    00000624 D259                   MOV.L       L1199+26,R2; _check_point_4_graph_
    00000626 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000628 2FE6                   MOV.L       R14,@-R15
    0000062A 2FE6                   MOV.L       R14,@-R15
           Fun.c  2148                    break;
    0000062C A030                   BRA         L1123
    0000062E 6673                   MOV         R7,R6
    00000630              L816:                            ; case label 
           Fun.c  2149                case 8:
           Fun.c  2150                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_5_graph_);
    00000630 D257                   MOV.L       L1199+30,R2; _check_point_5_graph_
    00000632 E710                   MOV         #16,R7
    00000634 2F26                   MOV.L       R2,@-R15
    00000636 2FE6                   MOV.L       R14,@-R15
    00000638 2FE6                   MOV.L       R14,@-R15
           Fun.c  2151                    break;
    0000063A A029                   BRA         L1123
    0000063C 6673                   MOV         R7,R6
    0000063E              L817:                            ; case label 
           Fun.c  2152                case 49:
           Fun.c  2153                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Wall_graph_);
    0000063E E710                   MOV         #16,R7
    00000640 D254                   MOV.L       L1199+34,R2; _Wall_graph_
    00000642 2F26                   MOV.L       R2,@-R15
    00000644 2FE6                   MOV.L       R14,@-R15
    00000646 2FE6                   MOV.L       R14,@-R15
           Fun.c  2154                    break;
    00000648 A022                   BRA         L1123
    0000064A 6673                   MOV         R7,R6
    0000064C              L818:                            ; case label 
           Fun.c  2155                case 50:
           Fun.c  2156                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_Default_graph_);
    0000064C D252                   MOV.L       L1199+38,R2; _Tower_Default_graph_
    0000064E E710                   MOV         #16,R7
    00000650 2F26                   MOV.L       R2,@-R15
    00000652 2FE6                   MOV.L       R14,@-R15
    00000654 2FE6                   MOV.L       R14,@-R15
           Fun.c  2157                    break;
    00000656 A01B                   BRA         L1123
    00000658 6673                   MOV         R7,R6
    0000065A              L819:                            ; case label 
           Fun.c  2158                case 51:
           Fun.c  2159                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_1_graph_);
    0000065A E710                   MOV         #16,R7
    0000065C D24F                   MOV.L       L1199+42,R2; _Tower_1_graph_
    0000065E 2F26                   MOV.L       R2,@-R15
    00000660 2FE6                   MOV.L       R14,@-R15
    00000662 2FE6                   MOV.L       R14,@-R15
           Fun.c  2160                    break;
    00000664 A014                   BRA         L1123
    00000666 6673                   MOV         R7,R6
    00000668              L820:                            ; case label 
           Fun.c  2161                case 52:
           Fun.c  2162                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_2_graph_);
    00000668 D24D                   MOV.L       L1199+46,R2; _Tower_2_graph_
    0000066A E710                   MOV         #16,R7
    0000066C 2F26                   MOV.L       R2,@-R15
    0000066E 2FE6                   MOV.L       R14,@-R15
    00000670 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2163                    break;
    00000672 A00D                   BRA         L1123
    00000674 6673                   MOV         R7,R6
    00000676              L821:                            ; case label 
           Fun.c  2164                case 53:
           Fun.c  2165                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_3_graph_);
    00000676 E710                   MOV         #16,R7
    00000678 D24A                   MOV.L       L1199+50,R2; _Tower_3_graph_
    0000067A 2F26                   MOV.L       R2,@-R15
    0000067C 2FE6                   MOV.L       R14,@-R15
    0000067E 2FE6                   MOV.L       R14,@-R15
           Fun.c  2166                    break;
    00000680 A006                   BRA         L1123
    00000682 6673                   MOV         R7,R6
    00000684              L822:                            ; case label 
           Fun.c  2167                case 54:
           Fun.c  2168                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_4_graph_);
    00000684 D248                   MOV.L       L1199+54,R2; _Tower_4_graph_
    00000686 E710                   MOV         #16,R7
    00000688 2F26                   MOV.L       R2,@-R15
    0000068A E610                   MOV         #16,R6
    0000068C 2FE6                   MOV.L       R14,@-R15
    0000068E 2FE6                   MOV.L       R14,@-R15
           Fun.c  2169                    break;
    00000690              L1123:                            
    00000690 65C3                   MOV         R12,R5
    00000692 BEEE                   BSR         _draw_picture
    00000694 64D3                   MOV         R13,R4
    00000696 7F0C                   ADD         #12,R15
    00000698              L908:                             
           Fun.c  2170                }
           Fun.c  2171                screen_x += 16;
    00000698 7D10                   ADD         #16,R13
    0000069A 7B01                   ADD         #1,R11
    0000069C              L906:                             
    0000069C 62A2                   MOV.L       @R10,R2
    0000069E 7208                   ADD         #8,R2
    000006A0 3B23                   CMP/GE      R2,R11
    000006A2 8901                   BT          L1200
    000006A4 AF70                   BRA         L907
    000006A6 0009                   NOP
    000006A8              L1200:                            
           Fun.c  2172            }
           Fun.c  2173            screen_x = 0;
    000006A8 6D83                   MOV         R8,R13
           Fun.c  2174            screen_y += 16;
    000006AA 7C10                   ADD         #16,R12
    000006AC 7901                   ADD         #1,R9
    000006AE              L904:                             
    000006AE 52A1                   MOV.L       @(4,R10),R2
    000006B0 7204                   ADD         #4,R2
    000006B2 3923                   CMP/GE      R2,R9
    000006B4 8901                   BT          L1201
    000006B6 AF46                   BRA         L905
    000006B8 0009                   NOP
    000006BA              L1201:                            
           Fun.c  2175        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2176        draw_picture(last_position->x, last_position->y, 8, 8, 2, 1, cursor_graph_);
    000006BA E302                   MOV         #2,R3
    000006BC D23B                   MOV.L       L1199+58,R2; _cursor_graph_
    000006BE E708                   MOV         #8,R7
    000006C0 2F26                   MOV.L       R2,@-R15
    000006C2 6673                   MOV         R7,R6
    000006C4 2FE6                   MOV.L       R14,@-R15
    000006C6 2F36                   MOV.L       R3,@-R15
    000006C8 55F5                   MOV.L       @(20,R15),R5
    000006CA 5551                   MOV.L       @(4,R5),R5
    000006CC 54F5                   MOV.L       @(20,R15),R4
    000006CE BED0                   BSR         _draw_picture
    000006D0 6442                   MOV.L       @R4,R4
    000006D2 7F0C                   ADD         #12,R15
           Fun.c  2177        if (numOfCurrent < 5)
    000006D4 52F3                   MOV.L       @(12,R15),R2
    000006D6 E305                   MOV         #5,R3
    000006D8 3233                   CMP/GE      R3,R2
    000006DA 8902                   BT          L909
           Fun.c  2178        {
           Fun.c  2179            draw_picture(2, 55, 20, 8, 1, 1, Button_1_graph_);
    000006DC D234                   MOV.L       L1199+62,R2; _Button_1_graph_
    000006DE A001                   BRA         L1124
    000006E0 0009                   NOP
    000006E2              L909:                             
           Fun.c  2180        }
           Fun.c  2181        else
           Fun.c  2182        {
           Fun.c  2183            draw_picture(2, 55, 20, 8, 1, 1, Button_4_graph_);
    000006E2 D234                   MOV.L       L1199+66,R2; _Button_4_graph_
    000006E4              L1124:                            
    000006E4 2F26                   MOV.L       R2,@-R15
    000006E6 E708                   MOV         #8,R7
    000006E8 2FE6                   MOV.L       R14,@-R15
    000006EA E614                   MOV         #20,R6
    000006EC 2FE6                   MOV.L       R14,@-R15
    000006EE E537                   MOV         #55,R5
    000006F0 BEBF                   BSR         _draw_picture
    000006F2 E402                   MOV         #2,R4
           Fun.c  2184        }
           Fun.c  2185        draw_picture(22, 55, 20, 8, 1, 1, Button_2_graph_);
    000006F4 D330                   MOV.L       L1199+70,R3; _Button_2_graph_
    000006F6 E708                   MOV         #8,R7
    000006F8 2F36                   MOV.L       R3,@-R15
    000006FA E614                   MOV         #20,R6
    000006FC 2FE6                   MOV.L       R14,@-R15
    000006FE E537                   MOV         #55,R5
    00000700 2FE6                   MOV.L       R14,@-R15
    00000702 BEB6                   BSR         _draw_picture
    00000704 E416                   MOV         #22,R4
           Fun.c  2186        draw_picture(42, 55, 20, 8, 1, 1, Button_3_graph_);
    00000706 E708                   MOV         #8,R7
    00000708 D32C                   MOV.L       L1199+74,R3; _Button_3_graph_
    0000070A E614                   MOV         #20,R6
    0000070C 2F36                   MOV.L       R3,@-R15
    0000070E E537                   MOV         #55,R5
    00000710 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000712 2FE6                   MOV.L       R14,@-R15
    00000714 BEAD                   BSR         _draw_picture
    00000716 E42A                   MOV         #42,R4
           Fun.c  2187        draw_picture(82, 55, 20, 8, 1, 1, Button_5_graph_);
    00000718 D329                   MOV.L       L1199+78,R3; _Button_5_graph_
    0000071A E708                   MOV         #8,R7
    0000071C 2F36                   MOV.L       R3,@-R15
    0000071E E614                   MOV         #20,R6
    00000720 2FE6                   MOV.L       R14,@-R15
    00000722 E537                   MOV         #55,R5
    00000724 2FE6                   MOV.L       R14,@-R15
    00000726 BEA4                   BSR         _draw_picture
    00000728 E452                   MOV         #82,R4
           Fun.c  2188    }
    0000072A 7F40                   ADD         #64,R15
    0000072C 4F16                   LDS.L       @R15+,MACL
    0000072E 4F26                   LDS.L       @R15+,PR
    00000730 68F6                   MOV.L       @R15+,R8
    00000732 69F6                   MOV.L       @R15+,R9
    00000734 6AF6                   MOV.L       @R15+,R10
    00000736 6BF6                   MOV.L       @R15+,R11
    00000738 6CF6                   MOV.L       @R15+,R12
    0000073A 6DF6                   MOV.L       @R15+,R13
    0000073C 000B                   RTS
    0000073E 6EF6                   MOV.L       @R15+,R14
           Fun.c  2189    
           Fun.c  2190    void Battle_Map(int *Map_Array, LPPOSITION Current_Screen, LPPOSITION last_position, LPMONSTERLIVE Monster
                         +_LiveMonster[], int numOfMonster)
    00000740              _Battle_Map:                     ; function: Battle_Map
                                                           ; frame size=112
    00000740 2FE6                   MOV.L       R14,@-R15
           Fun.c  2191    {
           Fun.c  2192        int i, j, MonsterIndex;
           Fun.c  2193        int CurrentPosition_x, CurrentPosition_y;
           Fun.c  2194        int screen_x = 0, screen_y = 0;
           Fun.c  2195        int direction_x = 0, direction_y = 0;
           Fun.c  2196        MonsterIndex = 0;
           Fun.c  2197        for (i = Current_Screen->y; i < Current_Screen->y + 4; i++)
    00000742 EE01                   MOV         #1,R14
    00000744 2FD6                   MOV.L       R13,@-R15
    00000746 2FC6                   MOV.L       R12,@-R15
    00000748 2FB6                   MOV.L       R11,@-R15
    0000074A 2FA6                   MOV.L       R10,@-R15
    0000074C 2F96                   MOV.L       R9,@-R15
    0000074E E900                   MOV         #0,R9
    00000750 2F86                   MOV.L       R8,@-R15
    00000752 6D93                   MOV         R9,R13
    00000754 4F22                   STS.L       PR,@-R15
    00000756 6853                   MOV         R5,R8
    00000758 4F12                   STS.L       MACL,@-R15
    0000075A 6C93                   MOV         R9,R12
    0000075C 7FC0                   ADD         #-64,R15
    0000075E 2F42                   MOV.L       R4,@R15
    00000760 1F7F                   MOV.L       R7,@(60,R15)
    00000762 A0C2                   BRA         L911
    00000764 5A81                   MOV.L       @(4,R8),R10
    00000766              L912:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000766 E225                   MOV         #37,R2
           Fun.c  2198        {
           Fun.c  2199            for (j = Current_Screen->x; j < Current_Screen->x + 8; j++)
    00000768 6B82                   MOV.L       @R8,R11
    0000076A 0A27                   MUL.L       R2,R10
    0000076C 021A                   STS         MACL,R2
    0000076E A0B3                   BRA         L913
    00000770 1F21                   MOV.L       R2,@(4,R15)
    00000772              L1199:                            
    00000772 0000                   .DATA.W     0
    00000774 <00000000>             .DATA.L     _Tile_Default_graph_
    00000778 <00000000>             .DATA.L     _spawn_door_graph_
    0000077C <00000000>             .DATA.L     _base_graph_
    00000780 <00000000>             .DATA.L     _check_point_1_graph_
    00000784 <00000000>             .DATA.L     _check_point_2_graph_
    00000788 <00000000>             .DATA.L     _check_point_3_graph_
    0000078C <00000000>             .DATA.L     _check_point_4_graph_
    00000790 <00000000>             .DATA.L     _check_point_5_graph_
    00000794 <00000000>             .DATA.L     _Wall_graph_
    00000798 <00000000>             .DATA.L     _Tower_Default_graph_
    0000079C <00000000>             .DATA.L     _Tower_1_graph_
    000007A0 <00000000>             .DATA.L     _Tower_2_graph_
    000007A4 <00000000>             .DATA.L     _Tower_3_graph_
    000007A8 <00000000>             .DATA.L     _Tower_4_graph_
    000007AC <00000000>             .DATA.L     _cursor_graph_
    000007B0 <00000000>             .DATA.L     _Button_1_graph_
    000007B4 <00000000>             .DATA.L     _Button_4_graph_
    000007B8 <00000000>             .DATA.L     _Button_2_graph_
    000007BC <00000000>             .DATA.L     _Button_3_graph_
    000007C0 <00000000>             .DATA.L     _Button_5_graph_
    000007C4              L914:                             
           Fun.c  2200            {
           Fun.c  2201                switch (Map_Array[i * 37 + j])
    000007C4 50F1                   MOV.L       @(4,R15),R0
    000007C6 30BC                   ADD         R11,R0
    000007C8 63F2                   MOV.L       @R15,R3
    000007CA 4008                   SHLL2       R0
    000007CC 003E                   MOV.L       @(R0,R3),R0
    000007CE 8801                   CMP/EQ      #1,R0
    000007D0 891B                   BT          L823
    000007D2 8802                   CMP/EQ      #2,R0
    000007D4 8920                   BT          L824
    000007D6 8803                   CMP/EQ      #3,R0
    000007D8 8925                   BT          L825
    000007DA 8804                   CMP/EQ      #4,R0
    000007DC 892A                   BT          L826
    000007DE 8805                   CMP/EQ      #5,R0
    000007E0 892F                   BT          L827
    000007E2 8806                   CMP/EQ      #6,R0
    000007E4 8934                   BT          L828
    000007E6 8807                   CMP/EQ      #7,R0
    000007E8 8939                   BT          L829
    000007EA 8808                   CMP/EQ      #8,R0
    000007EC 893E                   BT          L830
    000007EE 8831                   CMP/EQ      #49,R0
    000007F0 8943                   BT          L831
    000007F2 8832                   CMP/EQ      #50,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007F4 8948                   BT          L832
    000007F6 8833                   CMP/EQ      #51,R0
    000007F8 894D                   BT          L833
    000007FA 8834                   CMP/EQ      #52,R0
    000007FC 8952                   BT          L834
    000007FE 8835                   CMP/EQ      #53,R0
    00000800 8957                   BT          L835
    00000802 8836                   CMP/EQ      #54,R0
    00000804 895C                   BT          L836
    00000806 A065                   BRA         L915
    00000808 0009                   NOP
    0000080A              L823:                            ; case label 
           Fun.c  2202                {
           Fun.c  2203                case 1:
           Fun.c  2204                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tile_Default_graph_);
    0000080A E710                   MOV         #16,R7
    0000080C D26C                   MOV.L       L1202,R2   ; _Tile_Default_graph_
    0000080E 2F26                   MOV.L       R2,@-R15
    00000810 2FE6                   MOV.L       R14,@-R15
    00000812 2FE6                   MOV.L       R14,@-R15
           Fun.c  2205                    break;
    00000814 A05A                   BRA         L1137
    00000816 6673                   MOV         R7,R6
    00000818              L824:                            ; case label 
           Fun.c  2206                case 2:
           Fun.c  2207                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, spawn_door_graph_);
    00000818 D26A                   MOV.L       L1202+4,R2 ; _spawn_door_graph_
    0000081A E710                   MOV         #16,R7
    0000081C 2F26                   MOV.L       R2,@-R15
    0000081E 2FE6                   MOV.L       R14,@-R15
    00000820 2FE6                   MOV.L       R14,@-R15
           Fun.c  2208                    break;
    00000822 A053                   BRA         L1137
    00000824 6673                   MOV         R7,R6
    00000826              L825:                            ; case label 
           Fun.c  2209                case 3:
           Fun.c  2210                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, base_graph_);
    00000826 E710                   MOV         #16,R7
    00000828 D267                   MOV.L       L1202+8,R2 ; _base_graph_
    0000082A 2F26                   MOV.L       R2,@-R15
    0000082C 2FE6                   MOV.L       R14,@-R15
    0000082E 2FE6                   MOV.L       R14,@-R15
           Fun.c  2211                    break;
    00000830 A04C                   BRA         L1137
    00000832 6673                   MOV         R7,R6
    00000834              L826:                            ; case label 
           Fun.c  2212                case 4:
           Fun.c  2213                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_1_graph_);
    00000834 D265                   MOV.L       L1202+12,R2; _check_point_1_graph_
    00000836 E710                   MOV         #16,R7
    00000838 2F26                   MOV.L       R2,@-R15
    0000083A 2FE6                   MOV.L       R14,@-R15
    0000083C 2FE6                   MOV.L       R14,@-R15
           Fun.c  2214                    break;
    0000083E A045                   BRA         L1137
    00000840 6673                   MOV         R7,R6
    00000842              L827:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2215                case 5:
           Fun.c  2216                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_2_graph_);
    00000842 E710                   MOV         #16,R7
    00000844 D262                   MOV.L       L1202+16,R2; _check_point_2_graph_
    00000846 2F26                   MOV.L       R2,@-R15
    00000848 2FE6                   MOV.L       R14,@-R15
    0000084A 2FE6                   MOV.L       R14,@-R15
           Fun.c  2217                    break;
    0000084C A03E                   BRA         L1137
    0000084E 6673                   MOV         R7,R6
    00000850              L828:                            ; case label 
           Fun.c  2218                case 6:
           Fun.c  2219                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_3_graph_);
    00000850 D260                   MOV.L       L1202+20,R2; _check_point_3_graph_
    00000852 E710                   MOV         #16,R7
    00000854 2F26                   MOV.L       R2,@-R15
    00000856 2FE6                   MOV.L       R14,@-R15
    00000858 2FE6                   MOV.L       R14,@-R15
           Fun.c  2220                    break;
    0000085A A037                   BRA         L1137
    0000085C 6673                   MOV         R7,R6
    0000085E              L829:                            ; case label 
           Fun.c  2221                case 7:
           Fun.c  2222                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_4_graph_);
    0000085E E710                   MOV         #16,R7
    00000860 D25D                   MOV.L       L1202+24,R2; _check_point_4_graph_
    00000862 2F26                   MOV.L       R2,@-R15
    00000864 2FE6                   MOV.L       R14,@-R15
    00000866 2FE6                   MOV.L       R14,@-R15
           Fun.c  2223                    break;
    00000868 A030                   BRA         L1137
    0000086A 6673                   MOV         R7,R6
    0000086C              L830:                            ; case label 
           Fun.c  2224                case 8:
           Fun.c  2225                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, check_point_5_graph_);
    0000086C D25B                   MOV.L       L1202+28,R2; _check_point_5_graph_
    0000086E E710                   MOV         #16,R7
    00000870 2F26                   MOV.L       R2,@-R15
    00000872 2FE6                   MOV.L       R14,@-R15
    00000874 2FE6                   MOV.L       R14,@-R15
           Fun.c  2226                    break;
    00000876 A029                   BRA         L1137
    00000878 6673                   MOV         R7,R6
    0000087A              L831:                            ; case label 
           Fun.c  2227                case 49:
           Fun.c  2228                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Wall_graph_);
    0000087A E710                   MOV         #16,R7
    0000087C D258                   MOV.L       L1202+32,R2; _Wall_graph_
    0000087E 2F26                   MOV.L       R2,@-R15
    00000880 2FE6                   MOV.L       R14,@-R15
    00000882 2FE6                   MOV.L       R14,@-R15
           Fun.c  2229                    break;
    00000884 A022                   BRA         L1137
    00000886 6673                   MOV         R7,R6
    00000888              L832:                            ; case label 
           Fun.c  2230                case 50:
           Fun.c  2231                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_Default_graph_);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000888 D256                   MOV.L       L1202+36,R2; _Tower_Default_graph_
    0000088A E710                   MOV         #16,R7
    0000088C 2F26                   MOV.L       R2,@-R15
    0000088E 2FE6                   MOV.L       R14,@-R15
    00000890 2FE6                   MOV.L       R14,@-R15
           Fun.c  2232                    break;
    00000892 A01B                   BRA         L1137
    00000894 6673                   MOV         R7,R6
    00000896              L833:                            ; case label 
           Fun.c  2233                case 51:
           Fun.c  2234                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_1_graph_);
    00000896 E710                   MOV         #16,R7
    00000898 D253                   MOV.L       L1202+40,R2; _Tower_1_graph_
    0000089A 2F26                   MOV.L       R2,@-R15
    0000089C 2FE6                   MOV.L       R14,@-R15
    0000089E 2FE6                   MOV.L       R14,@-R15
           Fun.c  2235                    break;
    000008A0 A014                   BRA         L1137
    000008A2 6673                   MOV         R7,R6
    000008A4              L834:                            ; case label 
           Fun.c  2236                case 52:
           Fun.c  2237                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_2_graph_);
    000008A4 D251                   MOV.L       L1202+44,R2; _Tower_2_graph_
    000008A6 E710                   MOV         #16,R7
    000008A8 2F26                   MOV.L       R2,@-R15
    000008AA 2FE6                   MOV.L       R14,@-R15
    000008AC 2FE6                   MOV.L       R14,@-R15
           Fun.c  2238                    break;
    000008AE A00D                   BRA         L1137
    000008B0 6673                   MOV         R7,R6
    000008B2              L835:                            ; case label 
           Fun.c  2239                case 53:
           Fun.c  2240                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_3_graph_);
    000008B2 E710                   MOV         #16,R7
    000008B4 D24E                   MOV.L       L1202+48,R2; _Tower_3_graph_
    000008B6 2F26                   MOV.L       R2,@-R15
    000008B8 2FE6                   MOV.L       R14,@-R15
    000008BA 2FE6                   MOV.L       R14,@-R15
           Fun.c  2241                    break;
    000008BC A006                   BRA         L1137
    000008BE 6673                   MOV         R7,R6
    000008C0              L836:                            ; case label 
           Fun.c  2242                case 54:
           Fun.c  2243                    draw_picture(screen_x, screen_y, 16, 16, 1, 1, Tower_4_graph_);
    000008C0 D24C                   MOV.L       L1202+52,R2; _Tower_4_graph_
    000008C2 E710                   MOV         #16,R7
    000008C4 2F26                   MOV.L       R2,@-R15
    000008C6 E610                   MOV         #16,R6
    000008C8 2FE6                   MOV.L       R14,@-R15
    000008CA 2FE6                   MOV.L       R14,@-R15
           Fun.c  2244                    break;
    000008CC              L1137:                            
    000008CC 65C3                   MOV         R12,R5
    000008CE BDD0                   BSR         _draw_picture
    000008D0 64D3                   MOV         R13,R4
    000008D2 7F0C                   ADD         #12,R15
    000008D4              L915:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2245                }
           Fun.c  2246                screen_x += 16;
    000008D4 7D10                   ADD         #16,R13
    000008D6 7B01                   ADD         #1,R11
    000008D8              L913:                             
    000008D8 6282                   MOV.L       @R8,R2
    000008DA 7208                   ADD         #8,R2
    000008DC 3B23                   CMP/GE      R2,R11
    000008DE 8901                   BT          L1203
    000008E0 AF70                   BRA         L914
    000008E2 0009                   NOP
    000008E4              L1203:                            
           Fun.c  2247            }
           Fun.c  2248            screen_x = 0;
    000008E4 6D93                   MOV         R9,R13
           Fun.c  2249            screen_y += 16;
    000008E6 7C10                   ADD         #16,R12
    000008E8 7A01                   ADD         #1,R10
    000008EA              L911:                             
    000008EA 5281                   MOV.L       @(4,R8),R2
    000008EC 7204                   ADD         #4,R2
    000008EE 3A23                   CMP/GE      R2,R10
    000008F0 8901                   BT          L1204
    000008F2 AF38                   BRA         L912
    000008F4 0009                   NOP
    000008F6              L1204:                            
           Fun.c  2250        }
           Fun.c  2251        screen_x = 0;
    000008F6 6C93                   MOV         R9,R12
           Fun.c  2252        screen_y = 0;
           Fun.c  2253    
           Fun.c  2254        for (MonsterIndex = 0; MonsterIndex < numOfMonster; MonsterIndex++)
    000008F8 1F95                   MOV.L       R9,@(20,R15)
    000008FA ED02                   MOV         #2,R13
    000008FC 54FF                   MOV.L       @(60,R15),R4
    000008FE 6A93                   MOV         R9,R10
    00000900 1F48                   MOV.L       R4,@(32,R15)
    00000902 1F46                   MOV.L       R4,@(24,R15)
    00000904 A0C7                   BRA         L916
    00000906 1F47                   MOV.L       R4,@(28,R15)
    00000908              L917:                             
           Fun.c  2255        {
           Fun.c  2256            direction_x = Monster_LiveMonster[MonsterIndex]->target_position->x - Monster_LiveMonster[MonsterI
                         +ndex]->position->x;
    00000908 5BF5                   MOV.L       @(20,R15),R11
    0000090A 4B08                   SHLL2       R11
    0000090C 53FF                   MOV.L       @(60,R15),R3
    0000090E 3B3C                   ADD         R3,R11
    00000910 64B2                   MOV.L       @R11,R4
    00000912 5542                   MOV.L       @(8,R4),R5
    00000914 5641                   MOV.L       @(4,R4),R6
    00000916 6362                   MOV.L       @R6,R3
    00000918 6252                   MOV.L       @R5,R2
    0000091A 3238                   SUB         R3,R2
    0000091C 2F22                   MOV.L       R2,@R15
           Fun.c  2257            direction_y = Monster_LiveMonster[MonsterIndex]->target_position->y - Monster_LiveMonster[MonsterI
                         +ndex]->position->y;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000091E 5361                   MOV.L       @(4,R6),R3
    00000920 5151                   MOV.L       @(4,R5),R1
    00000922 3138                   SUB         R3,R1
    00000924 1F11                   MOV.L       R1,@(4,R15)
           Fun.c  2258            for (i = Current_Screen->y; i < Current_Screen->y + 4; i++)
    00000926 5381                   MOV.L       @(4,R8),R3
    00000928 A0A0                   BRA         L918
    0000092A 1F34                   MOV.L       R3,@(16,R15)
    0000092C              L919:                             
           Fun.c  2259            {
           Fun.c  2260                for (j = Current_Screen->x; j < Current_Screen->x + 8; j++)
    0000092C 6182                   MOV.L       @R8,R1
    0000092E A091                   BRA         L920
    00000930 1F13                   MOV.L       R1,@(12,R15)
    00000932              L921:                             
           Fun.c  2261                {
           Fun.c  2262                    if (Monster_LiveMonster[MonsterIndex]->position->x == i && Monster_LiveMonster[MonsterInde
                         +x]->position->y == j)
    00000932 64B2                   MOV.L       @R11,R4
    00000934 1F4E                   MOV.L       R4,@(56,R15)
    00000936 5441                   MOV.L       @(4,R4),R4
    00000938 53F4                   MOV.L       @(16,R15),R3
    0000093A 6242                   MOV.L       @R4,R2
    0000093C 3230                   CMP/EQ      R3,R2
    0000093E 8901                   BT          L1205
    00000940 A084                   BRA         L922
    00000942 0009                   NOP
    00000944              L1205:                            
    00000944 53F3                   MOV.L       @(12,R15),R3
    00000946 5141                   MOV.L       @(4,R4),R1
    00000948 3130                   CMP/EQ      R3,R1
    0000094A 8901                   BT          L1206
    0000094C A07E                   BRA         L922
    0000094E 0009                   NOP
    00000950              L1206:                            
           Fun.c  2263                    {
           Fun.c  2264                        switch (Monster_LiveMonster[MonsterIndex]->Monster_Live->id)
    00000950 60B2                   MOV.L       @R11,R0
    00000952 6002                   MOV.L       @R0,R0
    00000954 6002                   MOV.L       @R0,R0
    00000956 8864                   CMP/EQ      #100,R0
    00000958 8909                   BT          L837
    0000095A 8865                   CMP/EQ      #101,R0
    0000095C 8915                   BT          L838
    0000095E 8866                   CMP/EQ      #102,R0
    00000960 8920                   BT          L839
    00000962 8867                   CMP/EQ      #103,R0
    00000964 894E                   BT          L840
    00000966 8868                   CMP/EQ      #104,R0
    00000968 895A                   BT          L841
    0000096A A06F                   BRA         L922
    0000096C 0009                   NOP
    0000096E              L837:                            ; case label 
           Fun.c  2265                        {
           Fun.c  2266                        case 100:
           Fun.c  2267                            draw_picture(screen_x + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direc
                         +tion_y, screen_y + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direction_x, 16, 16, 2, 1, monster




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +_1_graph_);
    0000096E E710                   MOV         #16,R7
    00000970 D321                   MOV.L       L1202+56,R3; _monster_1_graph_
    00000972 E040                   MOV         #64,R0
    00000974 2F36                   MOV.L       R3,@-R15
    00000976 2FE6                   MOV.L       R14,@-R15
    00000978 2FD6                   MOV.L       R13,@-R15
    0000097A 65B2                   MOV.L       @R11,R5
    0000097C 0F56                   MOV.L       R5,@(R0,R15)
    0000097E 5554                   MOV.L       @(16,R5),R5
    00000980 1F55                   MOV.L       R5,@(20,R15)
    00000982 52F3                   MOV.L       @(12,R15),R2
    00000984 0527                   MUL.L       R2,R5
           Fun.c  2268                            break;
    00000986 A058                   BRA         L1141
    00000988 6673                   MOV         R7,R6
    0000098A              L838:                            ; case label 
           Fun.c  2269                        case 101:
           Fun.c  2270                            draw_picture(screen_x + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direc
                         +tion_y, screen_y + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direction_x, 16, 16, 2, 1, Monster
                         +_2_graph_);
    0000098A E710                   MOV         #16,R7
    0000098C D31B                   MOV.L       L1202+60,R3; _Monster_2_graph_
    0000098E 2F36                   MOV.L       R3,@-R15
    00000990 2FE6                   MOV.L       R14,@-R15
    00000992 2FD6                   MOV.L       R13,@-R15
    00000994 65B2                   MOV.L       @R11,R5
    00000996 1F5F                   MOV.L       R5,@(60,R15)
    00000998 5554                   MOV.L       @(16,R5),R5
    0000099A 1F55                   MOV.L       R5,@(20,R15)
    0000099C 52F3                   MOV.L       @(12,R15),R2
    0000099E 0527                   MUL.L       R2,R5
           Fun.c  2271                            break;
    000009A0 A04B                   BRA         L1141
    000009A2 6673                   MOV         R7,R6
    000009A4              L839:                            ; case label 
           Fun.c  2272                        case 102:
           Fun.c  2273                            draw_picture(screen_x + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direc
                         +tion_y, screen_y + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direction_x, 16, 16, 2, 1, Monster
                         +_3_graph_);
    000009A4 D316                   MOV.L       L1202+64,R3; _Monster_3_graph_
    000009A6 E710                   MOV         #16,R7
    000009A8 2F36                   MOV.L       R3,@-R15
    000009AA 2FE6                   MOV.L       R14,@-R15
    000009AC 2FD6                   MOV.L       R13,@-R15
    000009AE 55FA                   MOV.L       @(40,R15),R5
    000009B0 6552                   MOV.L       @R5,R5
    000009B2 1F5E                   MOV.L       R5,@(56,R15)
    000009B4 5554                   MOV.L       @(16,R5),R5
    000009B6 1F55                   MOV.L       R5,@(20,R15)
    000009B8 52F3                   MOV.L       @(12,R15),R2
    000009BA 0527                   MUL.L       R2,R5
           Fun.c  2274                            break;
    000009BC A03D                   BRA         L1141
    000009BE 6673                   MOV         R7,R6
    000009C0              L1202:                            
    000009C0 <00000000>             .DATA.L     _Tile_Default_graph_




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009C4 <00000000>             .DATA.L     _spawn_door_graph_
    000009C8 <00000000>             .DATA.L     _base_graph_
    000009CC <00000000>             .DATA.L     _check_point_1_graph_
    000009D0 <00000000>             .DATA.L     _check_point_2_graph_
    000009D4 <00000000>             .DATA.L     _check_point_3_graph_
    000009D8 <00000000>             .DATA.L     _check_point_4_graph_
    000009DC <00000000>             .DATA.L     _check_point_5_graph_
    000009E0 <00000000>             .DATA.L     _Wall_graph_
    000009E4 <00000000>             .DATA.L     _Tower_Default_graph_
    000009E8 <00000000>             .DATA.L     _Tower_1_graph_
    000009EC <00000000>             .DATA.L     _Tower_2_graph_
    000009F0 <00000000>             .DATA.L     _Tower_3_graph_
    000009F4 <00000000>             .DATA.L     _Tower_4_graph_
    000009F8 <00000000>             .DATA.L     _monster_1_graph_
    000009FC <00000000>             .DATA.L     _Monster_2_graph_
    00000A00 <00000000>             .DATA.L     _Monster_3_graph_
    00000A04              L840:                            ; case label 
           Fun.c  2275                        case 103:
           Fun.c  2276                            draw_picture(screen_x + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direc
                         +tion_y, screen_y + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direction_x, 16, 16, 2, 1, Monster
                         +_4_graph_);
    00000A04 D346                   MOV.L       L1207+10,R3; _Monster_4_graph_
    00000A06 E710                   MOV         #16,R7
    00000A08 2F36                   MOV.L       R3,@-R15
    00000A0A 2FE6                   MOV.L       R14,@-R15
    00000A0C 2FD6                   MOV.L       R13,@-R15
    00000A0E 55F9                   MOV.L       @(36,R15),R5
    00000A10 6552                   MOV.L       @R5,R5
    00000A12 1F5D                   MOV.L       R5,@(52,R15)
    00000A14 5554                   MOV.L       @(16,R5),R5
    00000A16 1F55                   MOV.L       R5,@(20,R15)
    00000A18 52F3                   MOV.L       @(12,R15),R2
    00000A1A 0527                   MUL.L       R2,R5
           Fun.c  2277                            break;
    00000A1C A00D                   BRA         L1141
    00000A1E 6673                   MOV         R7,R6
    00000A20              L841:                            ; case label 
           Fun.c  2278                        case 104:
           Fun.c  2279                            draw_picture(screen_x + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direc
                         +tion_y, screen_y + (Monster_LiveMonster[MonsterIndex]->Move_Distance) * direction_x, 16, 16, 2, 1, Monster
                         +_5_graph_);
    00000A20 D340                   MOV.L       L1207+14,R3; _Monster_5_graph_
    00000A22 E710                   MOV         #16,R7
    00000A24 2F36                   MOV.L       R3,@-R15
    00000A26 6673                   MOV         R7,R6
    00000A28 2FE6                   MOV.L       R14,@-R15
    00000A2A 2FD6                   MOV.L       R13,@-R15
    00000A2C 55FB                   MOV.L       @(44,R15),R5
    00000A2E 6552                   MOV.L       @R5,R5
    00000A30 1F5C                   MOV.L       R5,@(48,R15)
    00000A32 5554                   MOV.L       @(16,R5),R5
    00000A34 1F55                   MOV.L       R5,@(20,R15)
    00000A36 52F3                   MOV.L       @(12,R15),R2
    00000A38 0527                   MUL.L       R2,R5
           Fun.c  2280                            break;
    00000A3A              L1141:                            
    00000A3A 051A                   STS         MACL,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A3C 51F4                   MOV.L       @(16,R15),R1
    00000A3E 35AC                   ADD         R10,R5
    00000A40 50F5                   MOV.L       @(20,R15),R0
    00000A42 0017                   MUL.L       R1,R0
    00000A44 041A                   STS         MACL,R4
    00000A46 BD14                   BSR         _draw_picture
    00000A48 34CC                   ADD         R12,R4
    00000A4A 7F0C                   ADD         #12,R15
           Fun.c  2281    
           Fun.c  2282                        default:
           Fun.c  2283                            break;
    00000A4C              L922:                             
    00000A4C 52F3                   MOV.L       @(12,R15),R2
           Fun.c  2284                        }
           Fun.c  2285                    }
           Fun.c  2286                    screen_x += 16;
    00000A4E 7C10                   ADD         #16,R12
    00000A50 7201                   ADD         #1,R2
    00000A52 1F23                   MOV.L       R2,@(12,R15)
    00000A54              L920:                             
    00000A54 6382                   MOV.L       @R8,R3
    00000A56 7308                   ADD         #8,R3
    00000A58 52F3                   MOV.L       @(12,R15),R2
    00000A5A 3233                   CMP/GE      R3,R2
    00000A5C 8901                   BT          L1208
    00000A5E AF68                   BRA         L921
    00000A60 0009                   NOP
    00000A62              L1208:                            
           Fun.c  2287                }
           Fun.c  2288                screen_x = 0;
    00000A62 6C93                   MOV         R9,R12
    00000A64 52F4                   MOV.L       @(16,R15),R2
           Fun.c  2289                screen_y += 16;
    00000A66 7A10                   ADD         #16,R10
    00000A68 7201                   ADD         #1,R2
    00000A6A 1F24                   MOV.L       R2,@(16,R15)
    00000A6C              L918:                             
    00000A6C 5381                   MOV.L       @(4,R8),R3
    00000A6E 7304                   ADD         #4,R3
    00000A70 52F4                   MOV.L       @(16,R15),R2
    00000A72 3233                   CMP/GE      R3,R2
    00000A74 8901                   BT          L1209
    00000A76 AF59                   BRA         L919
    00000A78 0009                   NOP
    00000A7A              L1209:                            
           Fun.c  2290            }
           Fun.c  2291            screen_x = 0;
    00000A7A 6C93                   MOV         R9,R12
    00000A7C 52F5                   MOV.L       @(20,R15),R2
           Fun.c  2292            screen_y = 0;
    00000A7E 6A93                   MOV         R9,R10
    00000A80 7201                   ADD         #1,R2
    00000A82 1F25                   MOV.L       R2,@(20,R15)
    00000A84 53F8                   MOV.L       @(32,R15),R3
    00000A86 7304                   ADD         #4,R3
    00000A88 1F38                   MOV.L       R3,@(32,R15)
    00000A8A 51F6                   MOV.L       @(24,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A8C 7104                   ADD         #4,R1
    00000A8E 1F16                   MOV.L       R1,@(24,R15)
    00000A90 53F7                   MOV.L       @(28,R15),R3
    00000A92 7304                   ADD         #4,R3
    00000A94 1F37                   MOV.L       R3,@(28,R15)
    00000A96              L916:                             
    00000A96 E064                   MOV         #100,R0
    00000A98 51F5                   MOV.L       @(20,R15),R1
    00000A9A 02FE                   MOV.L       @(R0,R15),R2
    00000A9C 3123                   CMP/GE      R2,R1
    00000A9E 8901                   BT          L1210
    00000AA0 AF32                   BRA         L917
    00000AA2 0009                   NOP
    00000AA4              L1210:                            
           Fun.c  2293        }
           Fun.c  2294    }
    00000AA4 7F40                   ADD         #64,R15
    00000AA6 4F16                   LDS.L       @R15+,MACL
    00000AA8 4F26                   LDS.L       @R15+,PR
    00000AAA 68F6                   MOV.L       @R15+,R8
    00000AAC 69F6                   MOV.L       @R15+,R9
    00000AAE 6AF6                   MOV.L       @R15+,R10
    00000AB0 6BF6                   MOV.L       @R15+,R11
    00000AB2 6CF6                   MOV.L       @R15+,R12
    00000AB4 6DF6                   MOV.L       @R15+,R13
    00000AB6 000B                   RTS
    00000AB8 6EF6                   MOV.L       @R15+,R14
           Fun.c  2295    
           Fun.c  2296    void Cursor_Move(unsigned int key, LPPOSITION last_position, LPPOSITION Screen_position)
    00000ABA              _Cursor_Move:                    ; function: Cursor_Move
                                                           ; frame size=0
           Fun.c  2297    {
           Fun.c  2298    
           Fun.c  2299        switch (key)
    00000ABA 6043                   MOV         R4,R0
    00000ABC 912B                   MOV.W       L1207,R1   ; H'7542
    00000ABE 3010                   CMP/EQ      R1,R0
    00000AC0 8D0B                   BT/S        L843
    00000AC2 E708                   MOV         #8,R7
    00000AC4 9128                   MOV.W       L1207+2,R1 ; H'7547
    00000AC6 3010                   CMP/EQ      R1,R0
    00000AC8 8915                   BT          L844
    00000ACA 9126                   MOV.W       L1207+4,R1 ; H'7544
    00000ACC 3010                   CMP/EQ      R1,R0
    00000ACE 892B                   BT          L845
    00000AD0 9124                   MOV.W       L1207+6,R1 ; H'7545
    00000AD2 3010                   CMP/EQ      R1,R0
    00000AD4 8936                   BT          L846
    00000AD6 A044                   BRA         L924
    00000AD8 0009                   NOP
    00000ADA              L843:                            ; case label 
           Fun.c  2300        {
           Fun.c  2301        case KEY_CTRL_UP:
           Fun.c  2302            if (last_position->y >= 8)
    00000ADA 5351                   MOV.L       @(4,R5),R3
    00000ADC 3373                   CMP/GE      R7,R3
    00000ADE 8B03                   BF          L925




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2303            {
           Fun.c  2304                last_position->y -= 8;
    00000AE0 5151                   MOV.L       @(4,R5),R1
    00000AE2 71F8                   ADD         #-8,R1
    00000AE4 A03D                   BRA         L924
    00000AE6 1511                   MOV.L       R1,@(4,R5)
    00000AE8              L925:                             
           Fun.c  2305            }
           Fun.c  2306            else
           Fun.c  2307            {
           Fun.c  2308                if (Screen_position->y > 0)
    00000AE8 5261                   MOV.L       @(4,R6),R2
    00000AEA 4215                   CMP/PL      R2
    00000AEC 8B39                   BF          L924
           Fun.c  2309                {
           Fun.c  2310                    Screen_position->y -= 1;
    00000AEE 5161                   MOV.L       @(4,R6),R1
    00000AF0 71FF                   ADD         #-1,R1
           Fun.c  2311                }
           Fun.c  2312            }
           Fun.c  2313            break;
    00000AF2 A036                   BRA         L924
    00000AF4 1611                   MOV.L       R1,@(4,R6)
    00000AF6              L844:                            ; case label 
           Fun.c  2314        case KEY_CTRL_DOWN:
           Fun.c  2315            if (last_position->y <= 55)
    00000AF6 E237                   MOV         #55,R2
    00000AF8 5351                   MOV.L       @(4,R5),R3
    00000AFA 3327                   CMP/GT      R2,R3
    00000AFC 8903                   BT          L928
           Fun.c  2316            {
           Fun.c  2317    
           Fun.c  2318                last_position->y += 8;
    00000AFE 5051                   MOV.L       @(4,R5),R0
    00000B00 7008                   ADD         #8,R0
    00000B02 A02E                   BRA         L924
    00000B04 1501                   MOV.L       R0,@(4,R5)
    00000B06              L928:                             
           Fun.c  2319            }
           Fun.c  2320            else
           Fun.c  2321            {
           Fun.c  2322                if (Screen_position->y < 33)
    00000B06 E121                   MOV         #33,R1
    00000B08 5361                   MOV.L       @(4,R6),R3
    00000B0A 3313                   CMP/GE      R1,R3
    00000B0C 8929                   BT          L924
           Fun.c  2323                {
           Fun.c  2324                    Screen_position->y += 1;
    00000B0E 5361                   MOV.L       @(4,R6),R3
    00000B10 7301                   ADD         #1,R3
           Fun.c  2325                }
           Fun.c  2326            }
           Fun.c  2327            break;
    00000B12 A026                   BRA         L924
    00000B14 1631                   MOV.L       R3,@(4,R6)
    00000B16              L1207:                            
    00000B16 7542                   .DATA.W     H'7542




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B18 7547                   .DATA.W     H'7547
    00000B1A 7544                   .DATA.W     H'7544
    00000B1C 7545                   .DATA.W     H'7545
    00000B1E 0000                   .DATA.W     0
    00000B20 <00000000>             .DATA.L     _Monster_4_graph_
    00000B24 <00000000>             .DATA.L     _Monster_5_graph_
    00000B28              L845:                            ; case label 
           Fun.c  2328        case KEY_CTRL_LEFT:
           Fun.c  2329            if (last_position->x >= 8)
    00000B28 6152                   MOV.L       @R5,R1
    00000B2A 3173                   CMP/GE      R7,R1
    00000B2C 8B03                   BF          L931
           Fun.c  2330            {
           Fun.c  2331                last_position->x -= 8;
    00000B2E 6252                   MOV.L       @R5,R2
    00000B30 72F8                   ADD         #-8,R2
    00000B32 A016                   BRA         L924
    00000B34 2522                   MOV.L       R2,@R5
    00000B36              L931:                             
           Fun.c  2332            }
           Fun.c  2333            else
           Fun.c  2334            {
           Fun.c  2335                if (Screen_position->x > 0)
    00000B36 6162                   MOV.L       @R6,R1
    00000B38 4115                   CMP/PL      R1
    00000B3A 8B12                   BF          L924
           Fun.c  2336                {
           Fun.c  2337                    Screen_position->x -= 1;
    00000B3C 6262                   MOV.L       @R6,R2
    00000B3E 72FF                   ADD         #-1,R2
           Fun.c  2338                }
           Fun.c  2339            }
           Fun.c  2340            break;
    00000B40 A00F                   BRA         L924
    00000B42 2622                   MOV.L       R2,@R6
    00000B44              L846:                            ; case label 
           Fun.c  2341        case KEY_CTRL_RIGHT:
           Fun.c  2342            if (last_position->x <= 119)
    00000B44 6352                   MOV.L       @R5,R3
    00000B46 E177                   MOV         #119,R1
    00000B48 3317                   CMP/GT      R1,R3
    00000B4A 8903                   BT          L934
           Fun.c  2343            {
           Fun.c  2344                last_position->x += 8;
    00000B4C 6052                   MOV.L       @R5,R0
    00000B4E 7008                   ADD         #8,R0
    00000B50 A007                   BRA         L924
    00000B52 2502                   MOV.L       R0,@R5
    00000B54              L934:                             
           Fun.c  2345            }
           Fun.c  2346            else
           Fun.c  2347            {
           Fun.c  2348                if (Screen_position->x < 29)
    00000B54 6362                   MOV.L       @R6,R3
    00000B56 E21D                   MOV         #29,R2
    00000B58 3323                   CMP/GE      R2,R3
    00000B5A 8902                   BT          L924




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2349                {
           Fun.c  2350                    Screen_position->x += 1;
    00000B5C 6362                   MOV.L       @R6,R3
    00000B5E 7301                   ADD         #1,R3
    00000B60 2632                   MOV.L       R3,@R6
           Fun.c  2351                }
           Fun.c  2352            }
           Fun.c  2353            break;
    00000B62              L924:                             
           Fun.c  2354        }
           Fun.c  2355    }
    00000B62 000B                   RTS
    00000B64 0009                   NOP
           Fun.c  2356    
           Fun.c  2357    void Screen_Move(LPPOSITION Screen_position)
    00000B66              _Screen_Move:                    ; function: Screen_Move
                                                           ; frame size=8
    00000B66 2FE6                   MOV.L       R14,@-R15
    00000B68 4F22                   STS.L       PR,@-R15
    00000B6A 6E43                   MOV         R4,R14
           Fun.c  2358    {
           Fun.c  2359        if (Bkey_n_IsKeyDown(KEY_CTRL_UP))
    00000B6C 9432                   MOV.W       L1211,R4   ; H'7542
    00000B6E BA47                   BSR         _Bkey_n_IsKeyDown
    00000B70 0009                   NOP
    00000B72 2008                   TST         R0,R0
    00000B74 8906                   BT          L937
           Fun.c  2360        {
           Fun.c  2361            if (Screen_position->y > 0)
    00000B76 53E1                   MOV.L       @(4,R14),R3
    00000B78 4315                   CMP/PL      R3
    00000B7A 8B28                   BF          L939
           Fun.c  2362            {
           Fun.c  2363                Screen_position->y -= 1;
    00000B7C 51E1                   MOV.L       @(4,R14),R1
    00000B7E 71FF                   ADD         #-1,R1
    00000B80 A025                   BRA         L939
    00000B82 1E11                   MOV.L       R1,@(4,R14)
    00000B84              L937:                             
           Fun.c  2364            }
           Fun.c  2365        }
           Fun.c  2366        else if (Bkey_n_IsKeyDown(KEY_CTRL_DOWN))
    00000B84 9427                   MOV.W       L1211+2,R4 ; H'7547
    00000B86 BA3B                   BSR         _Bkey_n_IsKeyDown
    00000B88 0009                   NOP
    00000B8A 2008                   TST         R0,R0
    00000B8C 8907                   BT          L940
           Fun.c  2367        {
           Fun.c  2368            if (Screen_position->y < 33)
    00000B8E E221                   MOV         #33,R2
    00000B90 53E1                   MOV.L       @(4,R14),R3
    00000B92 3323                   CMP/GE      R2,R3
    00000B94 891B                   BT          L939
           Fun.c  2369            {
           Fun.c  2370                Screen_position->y += 1;
    00000B96 50E1                   MOV.L       @(4,R14),R0
    00000B98 7001                   ADD         #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B9A A018                   BRA         L939
    00000B9C 1E01                   MOV.L       R0,@(4,R14)
    00000B9E              L940:                             
           Fun.c  2371            }
           Fun.c  2372        }
           Fun.c  2373        else if (Bkey_n_IsKeyDown(KEY_CTRL_LEFT))
    00000B9E 941B                   MOV.W       L1211+4,R4 ; H'7544
    00000BA0 BA2E                   BSR         _Bkey_n_IsKeyDown
    00000BA2 0009                   NOP
    00000BA4 2008                   TST         R0,R0
    00000BA6 8906                   BT          L943
           Fun.c  2374        {
           Fun.c  2375            if (Screen_position->x > 0)
    00000BA8 62E2                   MOV.L       @R14,R2
    00000BAA 4215                   CMP/PL      R2
    00000BAC 8B0F                   BF          L939
           Fun.c  2376            {
           Fun.c  2377                Screen_position->x -= 1;
    00000BAE 61E2                   MOV.L       @R14,R1
    00000BB0 71FF                   ADD         #-1,R1
    00000BB2 A00C                   BRA         L939
    00000BB4 2E12                   MOV.L       R1,@R14
    00000BB6              L943:                             
           Fun.c  2378            }
           Fun.c  2379        }
           Fun.c  2380        else if (Bkey_n_IsKeyDown(KEY_CTRL_RIGHT))
    00000BB6 9410                   MOV.W       L1211+6,R4 ; H'7545
    00000BB8 BA22                   BSR         _Bkey_n_IsKeyDown
    00000BBA 0009                   NOP
    00000BBC 2008                   TST         R0,R0
    00000BBE 8906                   BT          L939
           Fun.c  2381        {
           Fun.c  2382    
           Fun.c  2383            if (Screen_position->x < 29)
    00000BC0 63E2                   MOV.L       @R14,R3
    00000BC2 E21D                   MOV         #29,R2
    00000BC4 3323                   CMP/GE      R2,R3
    00000BC6 8902                   BT          L939
           Fun.c  2384            {
           Fun.c  2385                Screen_position->x += 1;
    00000BC8 60E2                   MOV.L       @R14,R0
    00000BCA 7001                   ADD         #1,R0
    00000BCC 2E02                   MOV.L       R0,@R14
    00000BCE              L939:                             
           Fun.c  2386            }
           Fun.c  2387        }
           Fun.c  2388    }
    00000BCE 4F26                   LDS.L       @R15+,PR
    00000BD0 000B                   RTS
    00000BD2 6EF6                   MOV.L       @R15+,R14
    00000BD4              L1211:                            
    00000BD4 7542                   .DATA.W     H'7542
    00000BD6 7547                   .DATA.W     H'7547
    00000BD8 7544                   .DATA.W     H'7544
    00000BDA 7545                   .DATA.W     H'7545
           Fun.c  2389    
           Fun.c  2390    void Tower_Place(unsigned int key, LPPOSITION Cursor_Position, LPPOSITION Screen_Position, int *Map, LPTOW




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +ER Tower_DataBase[], int Tower_DbSize, LPTOWERPLACE Tower_PlaceTower[], LPTOWERPLACE Tower_Buffer[5], int 
                         +*numOfPlace, int *numOfCurrent, int *Direction, int *numOfDirection, int *IsPlaceOver)
    00000BDC              _Tower_Place:                    ; function: Tower_Place
                                                           ; frame size=76
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    00000BDC 2FE6                   MOV.L       R14,@-R15
    00000BDE E04C                   MOV         #76,R0
           Fun.c  2391    {
           Fun.c  2392        int i, j, id, temp_MapId;
           Fun.c  2393        int x, y;
           Fun.c  2394        temp_MapId = -1;
           Fun.c  2395        srand((unsigned int)RTC_GetTicks());
    00000BE0 D254                   MOV.L       L1212+4,R2 ; _iSysCallFuncPtr
    00000BE2 E13B                   MOV         #59,R1
    00000BE4 2FD6                   MOV.L       R13,@-R15
    00000BE6 2FC6                   MOV.L       R12,@-R15
    00000BE8 2FB6                   MOV.L       R11,@-R15
    00000BEA 2FA6                   MOV.L       R10,@-R15
    00000BEC 2F96                   MOV.L       R9,@-R15
    00000BEE 2F86                   MOV.L       R8,@-R15
    00000BF0 4F22                   STS.L       PR,@-R15
    00000BF2 4F12                   STS.L       MACL,@-R15
    00000BF4 7FE4                   ADD         #-28,R15
    00000BF6 1F46                   MOV.L       R4,@(24,R15)
    00000BF8 1F53                   MOV.L       R5,@(12,R15)
    00000BFA 2F62                   MOV.L       R6,@R15
    00000BFC 1F71                   MOV.L       R7,@(4,R15)
    00000BFE E700                   MOV         #0,R7
    00000C00 0DFE                   MOV.L       @(R0,R15),R13
    00000C02 6673                   MOV         R7,R6
    00000C04 6322                   MOV.L       @R2,R3
    00000C06 6573                   MOV         R7,R5
    00000C08 E050                   MOV         #80,R0
    00000C0A 0BFE                   MOV.L       @(R0,R15),R11
    00000C0C E054                   MOV         #84,R0
    00000C0E 0EFE                   MOV.L       @(R0,R15),R14
    00000C10 2F16                   MOV.L       R1,@-R15
    00000C12 430B                   JSR         @R3
    00000C14 6473                   MOV         R7,R4
    00000C16 7F04                   ADD         #4,R15
    00000C18 D347                   MOV.L       L1212+8,R3 ; _srand
    00000C1A 430B                   JSR         @R3
    00000C1C 6403                   MOV         R0,R4
           Fun.c  2396        x = Screen_Position->y + (Cursor_Position->y / 16);
    00000C1E E410                   MOV         #16,R4
    00000C20 62F2                   MOV.L       @R15,R2
    00000C22 51F3                   MOV.L       @(12,R15),R1
    00000C24 D345                   MOV.L       L1212+12,R3; __divls
    00000C26 5111                   MOV.L       @(4,R1),R1
    00000C28 430B                   JSR         @R3
    00000C2A 6043                   MOV         R4,R0
    00000C2C 5221                   MOV.L       @(4,R2),R2
    00000C2E 302C                   ADD         R2,R0
    00000C30 1F02                   MOV.L       R0,@(8,R15)
           Fun.c  2397        y = Screen_Position->x + (Cursor_Position->x / 16);
    00000C32 63F2                   MOV.L       @R15,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C34 51F3                   MOV.L       @(12,R15),R1
    00000C36 6112                   MOV.L       @R1,R1
    00000C38 D240                   MOV.L       L1212+12,R2; __divls
    00000C3A 420B                   JSR         @R2
    00000C3C 6043                   MOV         R4,R0
    00000C3E 6332                   MOV.L       @R3,R3
    00000C40 303C                   ADD         R3,R0
    00000C42 2F02                   MOV.L       R0,@R15
           Fun.c  2398        if (key == KEY_CTRL_F1)
    00000C44 9374                   MOV.W       L1212,R3   ; H'7539
    00000C46 52F6                   MOV.L       @(24,R15),R2
    00000C48 3230                   CMP/EQ      R3,R2
    00000C4A 8901                   BT          L1213
    00000C4C A149                   BRA         L948
    00000C4E 0009                   NOP
    00000C50              L1213:                            
    00000C50 DA3B                   MOV.L       L1212+16,R10; _malloc
    00000C52 E225                   MOV         #37,R2
    00000C54 51F2                   MOV.L       @(8,R15),R1
    00000C56 E905                   MOV         #5,R9
    00000C58 9C6B                   MOV.W       L1212+2,R12; H'7534
    00000C5A 0127                   MUL.L       R2,R1
    00000C5C 63F2                   MOV.L       @R15,R3
    00000C5E 081A                   STS         MACL,R8
    00000C60 52F1                   MOV.L       @(4,R15),R2
    00000C62 383C                   ADD         R3,R8
    00000C64 63E2                   MOV.L       @R14,R3
    00000C66 4808                   SHLL2       R8
    00000C68 3393                   CMP/GE      R9,R3
    00000C6A 8F02                   BF/S        L1214
    00000C6C 382C                   ADD         R2,R8
    00000C6E A0B1                   BRA         L949
    00000C70 0009                   NOP
    00000C72              L1214:                            
           Fun.c  2399        {
           Fun.c  2400            if (*numOfCurrent < 5)
           Fun.c  2401            {
           Fun.c  2402    
           Fun.c  2403                if (Map[x * 37 + y] < 49)
    00000C72 E331                   MOV         #49,R3
    00000C74 6082                   MOV.L       @R8,R0
    00000C76 3033                   CMP/GE      R3,R0
    00000C78 8B01                   BF          L1215
    00000C7A A08F                   BRA         L950
    00000C7C 0009                   NOP
    00000C7E              L1215:                            
           Fun.c  2404                {
           Fun.c  2405                    id = rand() % 5 + 50;
    00000C7E D231                   MOV.L       L1212+20,R2; _rand
    00000C80 420B                   JSR         @R2
    00000C82 0009                   NOP
    00000C84 D330                   MOV.L       L1212+24,R3; __modls
    00000C86 6103                   MOV         R0,R1
    00000C88 430B                   JSR         @R3
    00000C8A 6093                   MOV         R9,R0
           Fun.c  2406                    temp_MapId = Map[x * 37 + y];
    00000C8C 6282                   MOV.L       @R8,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C8E 6B03                   MOV         R0,R11
    00000C90 1F23                   MOV.L       R2,@(12,R15)
    00000C92 7B32                   ADD         #50,R11
           Fun.c  2407                    Map[x * 37 + y] = id;
    00000C94 28B2                   MOV.L       R11,@R8
           Fun.c  2408                    if (Check_Path(Map, Direction, numOfDirection))
    00000C96 E05C                   MOV         #92,R0
    00000C98 06FE                   MOV.L       @(R0,R15),R6
    00000C9A E058                   MOV         #88,R0
    00000C9C 05FE                   MOV.L       @(R0,R15),R5
    00000C9E B467                   BSR         _Check_Path
    00000CA0 54F1                   MOV.L       @(4,R15),R4
    00000CA2 2008                   TST         R0,R0
    00000CA4 895D                   BT          L951
           Fun.c  2409                    {
           Fun.c  2410    
           Fun.c  2411                        Tower_Buffer[*numOfCurrent] = (LPTOWERPLACE)malloc(sizeof(TOWERPLACE));
    00000CA6 63E2                   MOV.L       @R14,R3
    00000CA8 4308                   SHLL2       R3
    00000CAA 33DC                   ADD         R13,R3
    00000CAC 2F36                   MOV.L       R3,@-R15
    00000CAE 4A0B                   JSR         @R10
    00000CB0 E408                   MOV         #8,R4
    00000CB2 62F6                   MOV.L       @R15+,R2
    00000CB4 2202                   MOV.L       R0,@R2
           Fun.c  2412                        Tower_Buffer[*numOfCurrent]->Place_Tower = (LPTOWER)malloc(sizeof(Tower));
    00000CB6 60E2                   MOV.L       @R14,R0
    00000CB8 4008                   SHLL2       R0
    00000CBA 03DE                   MOV.L       @(R0,R13),R3
    00000CBC 2F36                   MOV.L       R3,@-R15
    00000CBE 4A0B                   JSR         @R10
    00000CC0 E41C                   MOV         #28,R4
    00000CC2 62F6                   MOV.L       @R15+,R2
    00000CC4 2202                   MOV.L       R0,@R2
           Fun.c  2413                        Tower_Buffer[*numOfCurrent]->position = (LPPOSITION)malloc(sizeof(POSITION));
    00000CC6 E204                   MOV         #4,R2
    00000CC8 60E2                   MOV.L       @R14,R0
    00000CCA 4008                   SHLL2       R0
    00000CCC 03DE                   MOV.L       @(R0,R13),R3
    00000CCE 323C                   ADD         R3,R2
    00000CD0 2F26                   MOV.L       R2,@-R15
    00000CD2 4A0B                   JSR         @R10
    00000CD4 E408                   MOV         #8,R4
           Fun.c  2414                        Tower_Buffer[*numOfCurrent]->Place_Tower->id = id;
           Fun.c  2415                        Tower_Buffer[*numOfCurrent]->position->x = x;
           Fun.c  2416                        Tower_Buffer[*numOfCurrent]->position->y = y;
           Fun.c  2417    
           Fun.c  2418                        for (i = 0; i < Tower_DbSize; i++)
    00000CD6 E500                   MOV         #0,R5
    00000CD8 61F6                   MOV.L       @R15+,R1
    00000CDA 2102                   MOV.L       R0,@R1
    00000CDC 60E2                   MOV.L       @R14,R0
    00000CDE 4008                   SHLL2       R0
    00000CE0 03DE                   MOV.L       @(R0,R13),R3
    00000CE2 6232                   MOV.L       @R3,R2
    00000CE4 22B2                   MOV.L       R11,@R2
    00000CE6 60E2                   MOV.L       @R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CE8 51F2                   MOV.L       @(8,R15),R1
    00000CEA 4008                   SHLL2       R0
    00000CEC 03DE                   MOV.L       @(R0,R13),R3
    00000CEE 5231                   MOV.L       @(4,R3),R2
    00000CF0 2212                   MOV.L       R1,@R2
    00000CF2 60E2                   MOV.L       @R14,R0
    00000CF4 61F2                   MOV.L       @R15,R1
    00000CF6 4008                   SHLL2       R0
    00000CF8 03DE                   MOV.L       @(R0,R13),R3
    00000CFA E040                   MOV         #64,R0
    00000CFC 5231                   MOV.L       @(4,R3),R2
    00000CFE 1211                   MOV.L       R1,@(4,R2)
    00000D00 04FE                   MOV.L       @(R0,R15),R4
    00000D02 E044                   MOV         #68,R0
    00000D04 03FE                   MOV.L       @(R0,R15),R3
    00000D06 4315                   CMP/PL      R3
    00000D08 8F27                   BF/S        L952
    00000D0A 6C43                   MOV         R4,R12
    00000D0C              L953:                             
           Fun.c  2419                        {
           Fun.c  2420                            if (Tower_DataBase[i]->id == Tower_Buffer[*numOfCurrent]->Place_Tower->id)
    00000D0C 6142                   MOV.L       @R4,R1
    00000D0E 60E2                   MOV.L       @R14,R0
    00000D10 6112                   MOV.L       @R1,R1
    00000D12 4008                   SHLL2       R0
    00000D14 03DE                   MOV.L       @(R0,R13),R3
    00000D16 6232                   MOV.L       @R3,R2
    00000D18 6022                   MOV.L       @R2,R0
    00000D1A 3100                   CMP/EQ      R0,R1
    00000D1C 8B16                   BF          L954
           Fun.c  2421                            {
           Fun.c  2422                                Data_Match(Tower_Buffer[*numOfCurrent], Tower_DataBase[i], Tower_Buffer[*numOf
                         +Current]->position);
    00000D1E 60E2                   MOV.L       @R14,R0
    00000D20 65C2                   MOV.L       @R12,R5
    00000D22 4008                   SHLL2       R0
    00000D24 0BDE                   MOV.L       @(R0,R13),R11
    00000D26 56B1                   MOV.L       @(4,R11),R6
    00000D28 BB23                   BSR         _Data_Match
    00000D2A 64B3                   MOV         R11,R4
           Fun.c  2423                                break;
    00000D2C A015                   BRA         L952
    00000D2E 0009                   NOP
    00000D30              L1212:                            
    00000D30 7539                   .DATA.W     H'7539
    00000D32 7534                   .DATA.W     H'7534
    00000D34 <00000000>             .DATA.L     _iSysCallFuncPtr
    00000D38 <00000000>             .DATA.L     _srand
    00000D3C <00000000>             .DATA.L     __divls
    00000D40 <00000000>             .DATA.L     _malloc
    00000D44 <00000000>             .DATA.L     _rand
    00000D48 <00000000>             .DATA.L     __modls
    00000D4C              L954:                             
    00000D4C 7501                   ADD         #1,R5
    00000D4E 7C04                   ADD         #4,R12
    00000D50 E044                   MOV         #68,R0
    00000D52 03FE                   MOV.L       @(R0,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D54 3533                   CMP/GE      R3,R5
    00000D56 8FD9                   BF/S        L953
    00000D58 7404                   ADD         #4,R4
    00000D5A              L952:                             
           Fun.c  2424                            }
           Fun.c  2425                        }
           Fun.c  2426                        *numOfCurrent = *numOfCurrent + 1;
    00000D5A 61E2                   MOV.L       @R14,R1
    00000D5C 7101                   ADD         #1,R1
    00000D5E A0C0                   BRA         L948
    00000D60 2E12                   MOV.L       R1,@R14
    00000D62              L951:                             
           Fun.c  2427                    }
           Fun.c  2428                    else
           Fun.c  2429                    {
           Fun.c  2430                        PopUpWin(4);
    00000D62 D265                   MOV.L       L1216,R2   ; _PopUpWin
    00000D64 420B                   JSR         @R2
    00000D66 E404                   MOV         #4,R4
           Fun.c  2431                        printf_pop_xy(5, 2, "Cannot block");
    00000D68 D364                   MOV.L       L1216+4,R3 ; L573
    00000D6A E502                   MOV         #2,R5
    00000D6C 2F36                   MOV.L       R3,@-R15
    00000D6E BB48                   BSR         _printf_pop_xy
    00000D70 E405                   MOV         #5,R4
           Fun.c  2432                        printf_pop_xy(5, 3, "every line");
    00000D72 E503                   MOV         #3,R5
    00000D74 D362                   MOV.L       L1216+8,R3 ; L574
    00000D76 2F36                   MOV.L       R3,@-R15
    00000D78 BB43                   BSR         _printf_pop_xy
    00000D7A E405                   MOV         #5,R4
           Fun.c  2433                        printf_pop_xy(5, 4, "Press [EXE] key");
    00000D7C D361                   MOV.L       L1216+12,R3; L575
    00000D7E E504                   MOV         #4,R5
    00000D80 2F36                   MOV.L       R3,@-R15
    00000D82 BB3E                   BSR         _printf_pop_xy
    00000D84 E405                   MOV         #5,R4
    00000D86 7F0C                   ADD         #12,R15
           Fun.c  2434                        do
    00000D88              L957:                             
           Fun.c  2435                        {
           Fun.c  2436                            GetKey(&key);
    00000D88 D35F                   MOV.L       L1216+16,R3; _GetKey
    00000D8A 64F3                   MOV         R15,R4
    00000D8C 430B                   JSR         @R3
    00000D8E 7418                   ADD         #24,R4
           Fun.c  2437                        } while (key != KEY_CTRL_EXE);
    00000D90 52F6                   MOV.L       @(24,R15),R2
    00000D92 32C0                   CMP/EQ      R12,R2
    00000D94 8BF8                   BF          L957
           Fun.c  2438                        Map[x * 37 + y] = temp_MapId;
    00000D96 51F3                   MOV.L       @(12,R15),R1
    00000D98 A0A0                   BRA         L739
    00000D9A 2812                   MOV.L       R1,@R8
    00000D9C              L950:                             
           Fun.c  2439                        // Bdisp_AllClr_DDVRAM();
           Fun.c  2440                        Bdisp_AllClr_VRAM();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2441                    }
           Fun.c  2442                }
           Fun.c  2443                else
           Fun.c  2444                {
           Fun.c  2445                    PopUpWin(4);
    00000D9C D256                   MOV.L       L1216,R2   ; _PopUpWin
    00000D9E 420B                   JSR         @R2
    00000DA0 E404                   MOV         #4,R4
           Fun.c  2446                    printf_pop_xy(5, 2, "wrong position");
    00000DA2 E502                   MOV         #2,R5
    00000DA4 D359                   MOV.L       L1216+20,R3; L578
    00000DA6 2F36                   MOV.L       R3,@-R15
    00000DA8 BB2B                   BSR         _printf_pop_xy
    00000DAA E405                   MOV         #5,R4
           Fun.c  2447                    printf_pop_xy(3, 3, "plz select empty");
    00000DAC D358                   MOV.L       L1216+24,R3; L579
    00000DAE E503                   MOV         #3,R5
    00000DB0 2F36                   MOV.L       R3,@-R15
    00000DB2 BB26                   BSR         _printf_pop_xy
    00000DB4 6453                   MOV         R5,R4
           Fun.c  2448                    printf_pop_xy(5, 4, "Press [EXE] key");
    00000DB6 E504                   MOV         #4,R5
    00000DB8 D352                   MOV.L       L1216+12,R3; L575
    00000DBA 2F36                   MOV.L       R3,@-R15
    00000DBC BB21                   BSR         _printf_pop_xy
    00000DBE E405                   MOV         #5,R4
    00000DC0 7F0C                   ADD         #12,R15
           Fun.c  2449                    do
    00000DC2              L959:                             
           Fun.c  2450                    {
           Fun.c  2451                        GetKey(&key);
    00000DC2 64F3                   MOV         R15,R4
    00000DC4 D350                   MOV.L       L1216+16,R3; _GetKey
    00000DC6 430B                   JSR         @R3
    00000DC8 7418                   ADD         #24,R4
           Fun.c  2452                    } while (key != KEY_CTRL_EXE);
    00000DCA 52F6                   MOV.L       @(24,R15),R2
    00000DCC 32C0                   CMP/EQ      R12,R2
    00000DCE 8BF8                   BF          L959
    00000DD0 A084                   BRA         L739
    00000DD2 0009                   NOP
    00000DD4              L949:                             
           Fun.c  2453                    // Bdisp_AllClr_DDVRAM();
           Fun.c  2454                    Bdisp_AllClr_VRAM();
           Fun.c  2455                }
           Fun.c  2456            }
           Fun.c  2457            else
           Fun.c  2458            {
           Fun.c  2459                for (i = 0; i < 5; i++)
    00000DD4 E800                   MOV         #0,R8
    00000DD6              L962:                             
           Fun.c  2460                {
           Fun.c  2461                    if (Tower_Buffer[i]->position->x == x && Tower_Buffer[i]->position->y == y)
    00000DD6 6083                   MOV         R8,R0
    00000DD8 4008                   SHLL2       R0
    00000DDA 04DE                   MOV.L       @(R0,R13),R4
    00000DDC 1F45                   MOV.L       R4,@(20,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DDE 5441                   MOV.L       @(4,R4),R4
    00000DE0 53F2                   MOV.L       @(8,R15),R3
    00000DE2 6242                   MOV.L       @R4,R2
    00000DE4 3230                   CMP/EQ      R3,R2
    00000DE6 8B32                   BF          L963
    00000DE8 63F2                   MOV.L       @R15,R3
    00000DEA 5141                   MOV.L       @(4,R4),R1
    00000DEC 3130                   CMP/EQ      R3,R1
    00000DEE 8B2E                   BF          L963
           Fun.c  2462                    {
           Fun.c  2463                        Tower_PlaceTower[*numOfPlace] = (LPTOWERPLACE)malloc(sizeof(TOWERPLACE));
    00000DF0 63B2                   MOV.L       @R11,R3
    00000DF2 E048                   MOV         #72,R0
    00000DF4 00FE                   MOV.L       @(R0,R15),R0
    00000DF6 4308                   SHLL2       R3
    00000DF8 303C                   ADD         R3,R0
    00000DFA 2F06                   MOV.L       R0,@-R15
    00000DFC 4A0B                   JSR         @R10
    00000DFE E408                   MOV         #8,R4
    00000E00 62F6                   MOV.L       @R15+,R2
    00000E02 2202                   MOV.L       R0,@R2
           Fun.c  2464                        Tower_PlaceTower[*numOfPlace]->Place_Tower = (LPTOWER)malloc(sizeof(Tower));
    00000E04 63B2                   MOV.L       @R11,R3
    00000E06 E048                   MOV         #72,R0
    00000E08 00FE                   MOV.L       @(R0,R15),R0
    00000E0A 4308                   SHLL2       R3
    00000E0C 033E                   MOV.L       @(R0,R3),R3
    00000E0E 2F36                   MOV.L       R3,@-R15
    00000E10 4A0B                   JSR         @R10
    00000E12 E41C                   MOV         #28,R4
    00000E14 62F6                   MOV.L       @R15+,R2
    00000E16 2202                   MOV.L       R0,@R2
           Fun.c  2465                        Tower_PlaceTower[*numOfPlace]->position = (LPPOSITION)malloc(sizeof(POSITION));
    00000E18 63B2                   MOV.L       @R11,R3
    00000E1A E048                   MOV         #72,R0
    00000E1C 00FE                   MOV.L       @(R0,R15),R0
    00000E1E E204                   MOV         #4,R2
    00000E20 4308                   SHLL2       R3
    00000E22 033E                   MOV.L       @(R0,R3),R3
    00000E24 323C                   ADD         R3,R2
    00000E26 2F26                   MOV.L       R2,@-R15
    00000E28 4A0B                   JSR         @R10
    00000E2A E408                   MOV         #8,R4
    00000E2C 61F6                   MOV.L       @R15+,R1
    00000E2E 2102                   MOV.L       R0,@R1
           Fun.c  2466                        Data_Match(Tower_PlaceTower[*numOfPlace], Tower_Buffer[i]->Place_Tower, Tower_Buffer[i
                         +]->position);
    00000E30 64B2                   MOV.L       @R11,R4
    00000E32 6083                   MOV         R8,R0
    00000E34 4008                   SHLL2       R0
    00000E36 4408                   SHLL2       R4
    00000E38 0ADE                   MOV.L       @(R0,R13),R10
    00000E3A E048                   MOV         #72,R0
    00000E3C 56A1                   MOV.L       @(4,R10),R6
    00000E3E 65A2                   MOV.L       @R10,R5
    00000E40 00FE                   MOV.L       @(R0,R15),R0
    00000E42 BA96                   BSR         _Data_Match




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E44 044E                   MOV.L       @(R0,R4),R4
           Fun.c  2467                        *numOfPlace = *numOfPlace + 1;
    00000E46 62B2                   MOV.L       @R11,R2
    00000E48 7201                   ADD         #1,R2
           Fun.c  2468                        break;
    00000E4A A003                   BRA         L961
    00000E4C 2B22                   MOV.L       R2,@R11
    00000E4E              L963:                             
    00000E4E 7801                   ADD         #1,R8
    00000E50 3893                   CMP/GE      R9,R8
    00000E52 8BC0                   BF          L962
    00000E54              L961:                             
           Fun.c  2469                    }
           Fun.c  2470                }
           Fun.c  2471                if (i < 5)
    00000E54 3893                   CMP/GE      R9,R8
    00000E56 8927                   BT          L965
           Fun.c  2472                {
           Fun.c  2473    
           Fun.c  2474                    for (j = 0; j < 5; j++)
    00000E58 A012                   BRA         L966
    00000E5A E400                   MOV         #0,R4
    00000E5C              L967:                             
           Fun.c  2475                    {
           Fun.c  2476                        if (j == i)
    00000E5C 3480                   CMP/EQ      R8,R4
    00000E5E 890E                   BT          L969
           Fun.c  2477                        {
           Fun.c  2478                            continue;
           Fun.c  2479                        }
           Fun.c  2480                        else
           Fun.c  2481                        {
           Fun.c  2482                            x = Tower_Buffer[j]->position->x;
    00000E60 6043                   MOV         R4,R0
    00000E62 4008                   SHLL2       R0
    00000E64 06DE                   MOV.L       @(R0,R13),R6
           Fun.c  2483                            y = Tower_Buffer[j]->position->y;
           Fun.c  2484                            Map[x * 37 + y] = 49;
    00000E66 E325                   MOV         #37,R3
    00000E68 1F64                   MOV.L       R6,@(16,R15)
    00000E6A E231                   MOV         #49,R2
    00000E6C 5661                   MOV.L       @(4,R6),R6
    00000E6E 6562                   MOV.L       @R6,R5
    00000E70 5661                   MOV.L       @(4,R6),R6
    00000E72 0537                   MUL.L       R3,R5
    00000E74 50F1                   MOV.L       @(4,R15),R0
    00000E76 051A                   STS         MACL,R5
    00000E78 356C                   ADD         R6,R5
    00000E7A 4508                   SHLL2       R5
    00000E7C 0526                   MOV.L       R2,@(R0,R5)
    00000E7E              L969:                             
    00000E7E 7401                   ADD         #1,R4
    00000E80              L966:                             
    00000E80 3493                   CMP/GE      R9,R4
    00000E82 8BEB                   BF          L967
           Fun.c  2485                        }
           Fun.c  2486                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2487    
           Fun.c  2488                    for (i = 0; i < *numOfCurrent; i++)
    00000E84 A005                   BRA         L971
    00000E86 EC00                   MOV         #0,R12
    00000E88              L972:                             
           Fun.c  2489                    {
           Fun.c  2490                        free_Tower(Tower_Buffer, numOfCurrent, i);
    00000E88 66C3                   MOV         R12,R6
    00000E8A 65E3                   MOV         R14,R5
    00000E8C B574                   BSR         _free_Tower
    00000E8E 64D3                   MOV         R13,R4
    00000E90 7C01                   ADD         #1,R12
    00000E92              L971:                             
    00000E92 62E2                   MOV.L       @R14,R2
    00000E94 3C23                   CMP/GE      R2,R12
    00000E96 8BF7                   BF          L972
           Fun.c  2491                    }
           Fun.c  2492                    *numOfCurrent = 0;
    00000E98 E100                   MOV         #0,R1
           Fun.c  2493                    *IsPlaceOver = 1;
    00000E9A E060                   MOV         #96,R0
    00000E9C 2E12                   MOV.L       R1,@R14
    00000E9E E201                   MOV         #1,R2
    00000EA0 03FE                   MOV.L       @(R0,R15),R3
    00000EA2 2322                   MOV.L       R2,@R3
    00000EA4 A01D                   BRA         L948
    00000EA6 0009                   NOP
    00000EA8              L965:                             
           Fun.c  2494                }
           Fun.c  2495                else
           Fun.c  2496                {
           Fun.c  2497                    PopUpWin(4);
    00000EA8 D213                   MOV.L       L1216,R2   ; _PopUpWin
    00000EAA 420B                   JSR         @R2
    00000EAC E404                   MOV         #4,R4
           Fun.c  2498                    printf_pop_xy(4, 2, "wrong position");
    00000EAE E502                   MOV         #2,R5
    00000EB0 D316                   MOV.L       L1216+20,R3; L578
    00000EB2 2F36                   MOV.L       R3,@-R15
    00000EB4 BAA5                   BSR         _printf_pop_xy
    00000EB6 E404                   MOV         #4,R4
           Fun.c  2499                    printf_pop_xy(3, 3, "choose right tower");
    00000EB8 D316                   MOV.L       L1216+28,R3; L590
    00000EBA E503                   MOV         #3,R5
    00000EBC 2F36                   MOV.L       R3,@-R15
    00000EBE BAA0                   BSR         _printf_pop_xy
    00000EC0 6453                   MOV         R5,R4
           Fun.c  2500                    printf_pop_xy(5, 4, "Press [EXE] key");
    00000EC2 E504                   MOV         #4,R5
    00000EC4 D30F                   MOV.L       L1216+12,R3; L575
    00000EC6 2F36                   MOV.L       R3,@-R15
    00000EC8 BA9B                   BSR         _printf_pop_xy
    00000ECA E405                   MOV         #5,R4
    00000ECC 7F0C                   ADD         #12,R15
           Fun.c  2501                    do
    00000ECE              L974:                             
           Fun.c  2502                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2503                        GetKey(&key);
    00000ECE 64F3                   MOV         R15,R4
    00000ED0 D30D                   MOV.L       L1216+16,R3; _GetKey
    00000ED2 430B                   JSR         @R3
    00000ED4 7418                   ADD         #24,R4
           Fun.c  2504                    } while (key != KEY_CTRL_EXE);
    00000ED6 52F6                   MOV.L       @(24,R15),R2
    00000ED8 32C0                   CMP/EQ      R12,R2
    00000EDA 8BF8                   BF          L974
    00000EDC              L739:
           Fun.c  2505                    // Bdisp_AllClr_DDVRAM();
           Fun.c  2506                    Bdisp_AllClr_VRAM();
    00000EDC D10E                   MOV.L       L1216+32,R1; _Bdisp_AllClr_VRAM
    00000EDE 410B                   JSR         @R1
    00000EE0 0009                   NOP
    00000EE2              L948:                             
           Fun.c  2507                }
           Fun.c  2508            }
           Fun.c  2509        }
           Fun.c  2510    }
    00000EE2 7F1C                   ADD         #28,R15
    00000EE4 4F16                   LDS.L       @R15+,MACL
    00000EE6 4F26                   LDS.L       @R15+,PR
    00000EE8 68F6                   MOV.L       @R15+,R8
    00000EEA 69F6                   MOV.L       @R15+,R9
    00000EEC 6AF6                   MOV.L       @R15+,R10
    00000EEE 6BF6                   MOV.L       @R15+,R11
    00000EF0 6CF6                   MOV.L       @R15+,R12
    00000EF2 6DF6                   MOV.L       @R15+,R13
    00000EF4 000B                   RTS
    00000EF6 6EF6                   MOV.L       @R15+,R14
    00000EF8              L1216:                            
    00000EF8 <00000000>             .DATA.L     _PopUpWin
    00000EFC <00000000>             .DATA.L     L573
    00000F00 <00000000>             .DATA.L     L574
    00000F04 <00000000>             .DATA.L     L575
    00000F08 <00000000>             .DATA.L     _GetKey
    00000F0C <00000000>             .DATA.L     L578
    00000F10 <00000000>             .DATA.L     L579
    00000F14 <00000000>             .DATA.L     L590
    00000F18 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
           Fun.c  2511    
           Fun.c  2512    void Open_Map(unsigned int key, int *Map)
    00000F1C              _Open_Map:                       ; function: Open_Map
                                                           ; frame size=56
    00000F1C 2FE6                   MOV.L       R14,@-R15
    00000F1E 2FD6                   MOV.L       R13,@-R15
    00000F20 2FC6                   MOV.L       R12,@-R15
    00000F22 2FB6                   MOV.L       R11,@-R15
    00000F24 2FA6                   MOV.L       R10,@-R15
    00000F26 2F96                   MOV.L       R9,@-R15
    00000F28 2F86                   MOV.L       R8,@-R15
    00000F2A 4F22                   STS.L       PR,@-R15
    00000F2C 4F12                   STS.L       MACL,@-R15
    00000F2E 7FF8                   ADD         #-8,R15
           Fun.c  2513    {
           Fun.c  2514        unsigned int i, j;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2515        if (key == KEY_CTRL_F2)
    00000F30 934D                   MOV.W       L1217,R3   ; H'753A
    00000F32 1F41                   MOV.L       R4,@(4,R15)
    00000F34 2F52                   MOV.L       R5,@R15
    00000F36 52F1                   MOV.L       @(4,R15),R2
    00000F38 3230                   CMP/EQ      R3,R2
    00000F3A 8B3D                   BF          L975
           Fun.c  2516        {
           Fun.c  2517            // Bdisp_AllClr_DDVRAM();
           Fun.c  2518            Bdisp_AllClr_VRAM();
    00000F3C D225                   MOV.L       L1217+6,R2 ; _Bdisp_AllClr_VRAM
    00000F3E 420B                   JSR         @R2
    00000F40 0009                   NOP
           Fun.c  2519            area_clear(43, 11, 84, 52, 1); // draw square frame
    00000F42 EE01                   MOV         #1,R14
    00000F44 2FE6                   MOV.L       R14,@-R15
    00000F46 E734                   MOV         #52,R7
    00000F48 E654                   MOV         #84,R6
    00000F4A E50B                   MOV         #11,R5
    00000F4C BAA6                   BSR         _area_clear
    00000F4E E42B                   MOV         #43,R4
    00000F50 7F04                   ADD         #4,R15
           Fun.c  2520            for (i = 0; i < 37; i++)
    00000F52 ED25                   MOV         #37,R13
    00000F54 EA00                   MOV         #0,R10
    00000F56              L976:                             
           Fun.c  2521            {
           Fun.c  2522                for (j = 0; j < 37; j++)
    00000F56 E900                   MOV         #0,R9
    00000F58 0AD7                   MUL.L       R13,R10
    00000F5A 68A3                   MOV         R10,R8
    00000F5C 63F2                   MOV.L       @R15,R3
    00000F5E EC2D                   MOV         #45,R12
    00000F60 0B1A                   STS         MACL,R11
    00000F62 4B08                   SHLL2       R11
    00000F64 3B3C                   ADD         R3,R11
    00000F66 780D                   ADD         #13,R8
    00000F68              L977:                             
           Fun.c  2523                {
           Fun.c  2524                    if (Map[i * 37 + j] >= 49)
    00000F68 62B2                   MOV.L       @R11,R2
    00000F6A E331                   MOV         #49,R3
    00000F6C 3233                   CMP/GE      R3,R2
    00000F6E 8B09                   BF          L978
           Fun.c  2525                    {
           Fun.c  2526                        draw_picture(j + 45, i + 13, 1, 1, 1, 1, POINT);
    00000F70 D019                   MOV.L       L1217+10,R0; _POINT
    00000F72 E701                   MOV         #1,R7
    00000F74 2F06                   MOV.L       R0,@-R15
    00000F76 6583                   MOV         R8,R5
    00000F78 2FE6                   MOV.L       R14,@-R15
    00000F7A 6673                   MOV         R7,R6
    00000F7C 2FE6                   MOV.L       R14,@-R15
    00000F7E BA78                   BSR         _draw_picture
    00000F80 64C3                   MOV         R12,R4
    00000F82 7F0C                   ADD         #12,R15
    00000F84              L978:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F84 7901                   ADD         #1,R9
    00000F86 7C01                   ADD         #1,R12
    00000F88 39D2                   CMP/HS      R13,R9
    00000F8A 8FED                   BF/S        L977
    00000F8C 7B04                   ADD         #4,R11
    00000F8E 7A01                   ADD         #1,R10
    00000F90 3AD2                   CMP/HS      R13,R10
    00000F92 8BE0                   BF          L976
           Fun.c  2527                    }
           Fun.c  2528                }
           Fun.c  2529            }
           Fun.c  2530    
           Fun.c  2531            draw_picture(22, 55, 20, 8, 1, 1, Button_2_graph_);
    00000F94 D311                   MOV.L       L1217+14,R3; _Button_2_graph_
    00000F96 E708                   MOV         #8,R7
    00000F98 2F36                   MOV.L       R3,@-R15
    00000F9A E614                   MOV         #20,R6
    00000F9C 2FE6                   MOV.L       R14,@-R15
    00000F9E E537                   MOV         #55,R5
    00000FA0 2FE6                   MOV.L       R14,@-R15
    00000FA2 BA66                   BSR         _draw_picture
    00000FA4 E416                   MOV         #22,R4
    00000FA6 7F0C                   ADD         #12,R15
    00000FA8 DD0D                   MOV.L       L1217+18,R13; _GetKey
    00000FAA 9E11                   MOV.W       L1217+2,R14; H'7532
           Fun.c  2532            do
    00000FAC              L979:                             
           Fun.c  2533            {
           Fun.c  2534                GetKey(&key);
    00000FAC 64F3                   MOV         R15,R4
    00000FAE 4D0B                   JSR         @R13
    00000FB0 7404                   ADD         #4,R4
           Fun.c  2535            } while (key != KEY_CTRL_EXIT);
    00000FB2 53F1                   MOV.L       @(4,R15),R3
    00000FB4 33E0                   CMP/EQ      R14,R3
    00000FB6 8BF9                   BF          L979
    00000FB8              L975:                             
           Fun.c  2536        }
           Fun.c  2537    }
    00000FB8 7F08                   ADD         #8,R15
    00000FBA 4F16                   LDS.L       @R15+,MACL
    00000FBC 4F26                   LDS.L       @R15+,PR
    00000FBE 68F6                   MOV.L       @R15+,R8
    00000FC0 69F6                   MOV.L       @R15+,R9
    00000FC2 6AF6                   MOV.L       @R15+,R10
    00000FC4 6BF6                   MOV.L       @R15+,R11
    00000FC6 6CF6                   MOV.L       @R15+,R12
    00000FC8 6DF6                   MOV.L       @R15+,R13
    00000FCA 000B                   RTS
    00000FCC 6EF6                   MOV.L       @R15+,R14
    00000FCE              L1217:                            
    00000FCE 753A                   .DATA.W     H'753A
    00000FD0 7532                   .DATA.W     H'7532
    00000FD2 0000                   .DATA.W     0
    00000FD4 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000FD8 <00000000>             .DATA.L     _POINT
    00000FDC <00000000>             .DATA.L     _Button_2_graph_




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FE0 <00000000>             .DATA.L     _GetKey
           Fun.c  2538    
           Fun.c  2539    void Jump_View(unsigned int key, LPPOSITION Screen_Position)
    00000FE4              _Jump_View:                      ; function: Jump_View
                                                           ; frame size=88
    00000FE4 2FE6                   MOV.L       R14,@-R15
           Fun.c  2540    {
           Fun.c  2541        char row[10], col[10];
           Fun.c  2542        char *Row, *Col;
           Fun.c  2543        int rowNum, colNum;
           Fun.c  2544        int x, y, i;
           Fun.c  2545    
           Fun.c  2546        Row = row;
           Fun.c  2547        Col = col;
           Fun.c  2548        rowNum = 0;
           Fun.c  2549        colNum = 0;
           Fun.c  2550        // initialize array
           Fun.c  2551        memset(Row, 0, sizeof(char) * 10);
    00000FE6 E60A                   MOV         #10,R6
    00000FE8 2FD6                   MOV.L       R13,@-R15
    00000FEA 2FC6                   MOV.L       R12,@-R15
    00000FEC 2FB6                   MOV.L       R11,@-R15
    00000FEE EB00                   MOV         #0,R11
    00000FF0 2FA6                   MOV.L       R10,@-R15
    00000FF2 6AB3                   MOV         R11,R10
    00000FF4 2F96                   MOV.L       R9,@-R15
    00000FF6 2F86                   MOV.L       R8,@-R15
    00000FF8 4F22                   STS.L       PR,@-R15
    00000FFA 7FD4                   ADD         #-44,R15
    00000FFC D829                   MOV.L       L1218+2,R8 ; _memset
    00000FFE 63F3                   MOV         R15,R3
    00001000 1F4A                   MOV.L       R4,@(40,R15)
    00001002 62F3                   MOV         R15,R2
    00001004 1F53                   MOV.L       R5,@(12,R15)
    00001006 731C                   ADD         #28,R3
    00001008 2F32                   MOV.L       R3,@R15
    0000100A 7210                   ADD         #16,R2
    0000100C 1F21                   MOV.L       R2,@(4,R15)
    0000100E 65B3                   MOV         R11,R5
    00001010 480B                   JSR         @R8
    00001012 64F2                   MOV.L       @R15,R4
           Fun.c  2552        memset(Col, 0, sizeof(char) * 10);
    00001014 E60A                   MOV         #10,R6
    00001016 65A3                   MOV         R10,R5
    00001018 480B                   JSR         @R8
    0000101A 54F1                   MOV.L       @(4,R15),R4
           Fun.c  2553        // Bdisp_AllClr_DDVRAM();
           Fun.c  2554        Bdisp_AllClr_VRAM();
    0000101C D322                   MOV.L       L1218+6,R3 ; _Bdisp_AllClr_VRAM
    0000101E 430B                   JSR         @R3
    00001020 0009                   NOP
           Fun.c  2555        draw_picture(42, 55, 20, 8, 1, 1, Button_3_graph_);
    00001022 EC01                   MOV         #1,R12
    00001024 D221                   MOV.L       L1218+10,R2; _Button_3_graph_
    00001026 E708                   MOV         #8,R7
    00001028 2F26                   MOV.L       R2,@-R15
    0000102A E614                   MOV         #20,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000102C 2FC6                   MOV.L       R12,@-R15
    0000102E E537                   MOV         #55,R5
    00001030 2FC6                   MOV.L       R12,@-R15
    00001032 BA1E                   BSR         _draw_picture
    00001034 E42A                   MOV         #42,R4
    00001036 7F0C                   ADD         #12,R15
           Fun.c  2556    
           Fun.c  2557        if (key == KEY_CTRL_F3)
    00001038 9233                   MOV.W       L1218,R2   ; H'753B
    0000103A 53FA                   MOV.L       @(40,R15),R3
    0000103C 3320                   CMP/EQ      R2,R3
    0000103E 8901                   BT          L1219
    00001040 A111                   BRA         L980
    00001042 0009                   NOP
    00001044              L1219:                            
    00001044 D91A                   MOV.L       L1218+14,R9; _GetKey
    00001046 DD1B                   MOV.L       L1218+18,R13; _locate
    00001048 DE1B                   MOV.L       L1218+22,R14; _Print
           Fun.c  2558        {
           Fun.c  2559    
           Fun.c  2560            while (1)
    0000104A              L982:                             
           Fun.c  2561            {
           Fun.c  2562                locate(1, 1);
    0000104A E501                   MOV         #1,R5
    0000104C 4D0B                   JSR         @R13
    0000104E 6453                   MOV         R5,R4
           Fun.c  2563                Print((unsigned char *)"Please enter the numb");
    00001050 D41A                   MOV.L       L1218+26,R4; L616
    00001052 4E0B                   JSR         @R14
    00001054 0009                   NOP
           Fun.c  2564                locate(1, 2);
    00001056 E502                   MOV         #2,R5
    00001058 4D0B                   JSR         @R13
    0000105A E401                   MOV         #1,R4
           Fun.c  2565                Print((unsigned char *)"er of rows:(0~33)");
    0000105C D418                   MOV.L       L1218+30,R4; L617
    0000105E 4E0B                   JSR         @R14
    00001060 0009                   NOP
           Fun.c  2566    
           Fun.c  2567                do
    00001062              L983:                             
           Fun.c  2568                {
           Fun.c  2569                    GetKey(&key);
    00001062 64F3                   MOV         R15,R4
    00001064 490B                   JSR         @R9
    00001066 7428                   ADD         #40,R4
           Fun.c  2570                    if (rowNum < 10)
    00001068 E20A                   MOV         #10,R2
    0000106A 3B23                   CMP/GE      R2,R11
    0000106C 893A                   BT          L984
           Fun.c  2571                    {
           Fun.c  2572                        if (key >= KEY_CHAR_0 && key <= KEY_CHAR_9)
    0000106E E130                   MOV         #48,R1
    00001070 53FA                   MOV.L       @(40,R15),R3
    00001072 3312                   CMP/HS      R1,R3
    00001074 8B26                   BF          L985




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001076 E339                   MOV         #57,R3
    00001078 50FA                   MOV.L       @(40,R15),R0
    0000107A 3036                   CMP/HI      R3,R0
    0000107C 8922                   BT          L985
           Fun.c  2573                        {
           Fun.c  2574                            row[rowNum] = GetNumber(key);
    0000107E 63F3                   MOV         R15,R3
    00001080 731C                   ADD         #28,R3
    00001082 33BC                   ADD         R11,R3
    00001084 2F36                   MOV.L       R3,@-R15
    00001086 54FB                   MOV.L       @(44,R15),R4
    00001088 B4D0                   BSR         _GetNumber
    0000108A 0009                   NOP
    0000108C 63F6                   MOV.L       @R15+,R3
           Fun.c  2575                            rowNum++;
    0000108E 7B01                   ADD         #1,R11
    00001090 2300                   MOV.B       R0,@R3
           Fun.c  2576                            locate(21 - rowNum + 1, 3);
    00001092 E503                   MOV         #3,R5
    00001094 E416                   MOV         #22,R4
    00001096 4D0B                   JSR         @R13
    00001098 34B8                   SUB         R11,R4
           Fun.c  2577                            Print(Row);
    0000109A 4E0B                   JSR         @R14
    0000109C 64F2                   MOV.L       @R15,R4
    0000109E A021                   BRA         L984
    000010A0 0009                   NOP
    000010A2              L1218:                            
    000010A2 753B                   .DATA.W     H'753B
    000010A4 <00000000>             .DATA.L     _memset
    000010A8 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000010AC <00000000>             .DATA.L     _Button_3_graph_
    000010B0 <00000000>             .DATA.L     _GetKey
    000010B4 <00000000>             .DATA.L     _locate
    000010B8 <00000000>             .DATA.L     _Print
    000010BC <00000000>             .DATA.L     L616
    000010C0 <00000000>             .DATA.L     L617
    000010C4              L985:                             
           Fun.c  2578                        }
           Fun.c  2579                        else if (key == KEY_CTRL_AC)
    000010C4 9276                   MOV.W       L1220,R2   ; H'753F
    000010C6 53FA                   MOV.L       @(40,R15),R3
    000010C8 3320                   CMP/EQ      R2,R3
    000010CA 8B0B                   BF          L984
           Fun.c  2580                        {
           Fun.c  2581                            memset(Row, 0, sizeof(char) * 10);
    000010CC E60A                   MOV         #10,R6
    000010CE E500                   MOV         #0,R5
    000010D0 480B                   JSR         @R8
    000010D2 64F2                   MOV.L       @R15,R4
           Fun.c  2582                            rowNum = 0;
    000010D4 EB00                   MOV         #0,R11
           Fun.c  2583                            area_clear(0, 16, 127, 24, 0);
    000010D6 64B3                   MOV         R11,R4
    000010D8 2FB6                   MOV.L       R11,@-R15
    000010DA E718                   MOV         #24,R7
    000010DC E67F                   MOV         #127,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010DE B9DD                   BSR         _area_clear
    000010E0 E510                   MOV         #16,R5
    000010E2 7F04                   ADD         #4,R15
    000010E4              L984:                             
           Fun.c  2584                        }
           Fun.c  2585                    }
           Fun.c  2586                } while (key != KEY_CTRL_EXE);
    000010E4 9167                   MOV.W       L1220+2,R1 ; H'7534
    000010E6 52FA                   MOV.L       @(40,R15),R2
    000010E8 3210                   CMP/EQ      R1,R2
    000010EA 8BBA                   BF          L983
           Fun.c  2587    
           Fun.c  2588                x = my_atoi(Row);
    000010EC B9B1                   BSR         _my_atoi
    000010EE 64F2                   MOV.L       @R15,R4
           Fun.c  2589    
           Fun.c  2590                if (x >= 0 && x <= 33)
    000010F0 4011                   CMP/PZ      R0
    000010F2 8F03                   BF/S        L988
    000010F4 1F02                   MOV.L       R0,@(8,R15)
    000010F6 E221                   MOV         #33,R2
    000010F8 3027                   CMP/GT      R2,R0
    000010FA 8B28                   BF          L989
    000010FC              L988:                             
           Fun.c  2591                {
           Fun.c  2592                    break;
           Fun.c  2593                }
           Fun.c  2594                else
           Fun.c  2595                {
           Fun.c  2596                    PopUpWin(3);
    000010FC D22E                   MOV.L       L1220+4,R2 ; _PopUpWin
    000010FE 420B                   JSR         @R2
    00001100 E403                   MOV         #3,R4
           Fun.c  2597                    locate(7, 3);
    00001102 E503                   MOV         #3,R5
    00001104 4D0B                   JSR         @R13
    00001106 E407                   MOV         #7,R4
           Fun.c  2598                    Print((unsigned char *)"Wrong number");
    00001108 D42C                   MOV.L       L1220+8,R4 ; L624
    0000110A 4E0B                   JSR         @R14
    0000110C 0009                   NOP
           Fun.c  2599                    locate(5, 5);
    0000110E E505                   MOV         #5,R5
    00001110 4D0B                   JSR         @R13
    00001112 6453                   MOV         R5,R4
           Fun.c  2600                    Print((unsigned char *)"Press [0] key");
    00001114 D42A                   MOV.L       L1220+12,R4; L625
    00001116 4E0B                   JSR         @R14
    00001118 0009                   NOP
           Fun.c  2601                    do
    0000111A              L991:                             
           Fun.c  2602                    {
           Fun.c  2603                        GetKey(&key);
    0000111A 64F3                   MOV         R15,R4
    0000111C 490B                   JSR         @R9
    0000111E 7428                   ADD         #40,R4
           Fun.c  2604                    } while (key != KEY_CHAR_0);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001120 50FA                   MOV.L       @(40,R15),R0
    00001122 8830                   CMP/EQ      #48,R0
    00001124 8BF9                   BF          L991
           Fun.c  2605                    memset(Row, 0, sizeof(char) * 10);
    00001126 E60A                   MOV         #10,R6
    00001128 E500                   MOV         #0,R5
    0000112A 480B                   JSR         @R8
    0000112C 64F2                   MOV.L       @R15,R4
           Fun.c  2606                    rowNum = 0;
    0000112E EB00                   MOV         #0,R11
           Fun.c  2607                }
           Fun.c  2608                x = -1;
           Fun.c  2609                // Bdisp_AllClr_DDVRAM();
           Fun.c  2610                Bdisp_AllClr_VRAM();
    00001130 D224                   MOV.L       L1220+16,R2; _Bdisp_AllClr_VRAM
    00001132 E3FF                   MOV         #-1,R3
    00001134 420B                   JSR         @R2
    00001136 1F32                   MOV.L       R3,@(8,R15)
           Fun.c  2611                draw_picture(42, 55, 20, 8, 1, 1, Button_3_graph_);
    00001138 D123                   MOV.L       L1220+20,R1; _Button_3_graph_
    0000113A E708                   MOV         #8,R7
    0000113C 2F16                   MOV.L       R1,@-R15
    0000113E E614                   MOV         #20,R6
    00001140 2FC6                   MOV.L       R12,@-R15
    00001142 E537                   MOV         #55,R5
    00001144 2FC6                   MOV.L       R12,@-R15
    00001146 B994                   BSR         _draw_picture
    00001148 E42A                   MOV         #42,R4
    0000114A AF7E                   BRA         L982
    0000114C 7F0C                   ADD         #12,R15
    0000114E              L989:                             
           Fun.c  2612            }
           Fun.c  2613            // Bdisp_AllClr_DDVRAM();
           Fun.c  2614            Bdisp_AllClr_VRAM();
    0000114E D31D                   MOV.L       L1220+16,R3; _Bdisp_AllClr_VRAM
    00001150 430B                   JSR         @R3
    00001152 0009                   NOP
           Fun.c  2615            draw_picture(42, 55, 20, 8, 1, 1, Button_3_graph_);
    00001154 D21C                   MOV.L       L1220+20,R2; _Button_3_graph_
    00001156 2F26                   MOV.L       R2,@-R15
           Fun.c  2616            while (1)
    00001158 A077                   BRA         L1142
    0000115A 0009                   NOP
    0000115C              L993:                             
           Fun.c  2617            {
           Fun.c  2618                locate(1, 1);
    0000115C E501                   MOV         #1,R5
    0000115E 4D0B                   JSR         @R13
    00001160 6453                   MOV         R5,R4
           Fun.c  2619                Print((unsigned char *)"Please enter the numb");
    00001162 D41A                   MOV.L       L1220+24,R4; L616
    00001164 4E0B                   JSR         @R14
    00001166 0009                   NOP
           Fun.c  2620                locate(1, 2);
    00001168 E502                   MOV         #2,R5
    0000116A 4D0B                   JSR         @R13
    0000116C E401                   MOV         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2621                Print((unsigned char *)"er of cols:(0~29)");
    0000116E D418                   MOV.L       L1220+28,R4; L628
    00001170 4E0B                   JSR         @R14
    00001172 0009                   NOP
           Fun.c  2622                do
    00001174              L994:                             
           Fun.c  2623                {
           Fun.c  2624                    GetKey(&key);
    00001174 64F3                   MOV         R15,R4
    00001176 490B                   JSR         @R9
    00001178 7428                   ADD         #40,R4
           Fun.c  2625                    if (colNum < 10)
    0000117A E30A                   MOV         #10,R3
    0000117C 3A33                   CMP/GE      R3,R10
    0000117E 8939                   BT          L995
           Fun.c  2626                    {
           Fun.c  2627                        if (key >= KEY_CHAR_0 && key <= KEY_CHAR_9)
    00001180 52FA                   MOV.L       @(40,R15),R2
    00001182 E130                   MOV         #48,R1
    00001184 3212                   CMP/HS      R1,R2
    00001186 8B25                   BF          L996
    00001188 50FA                   MOV.L       @(40,R15),R0
    0000118A E239                   MOV         #57,R2
    0000118C 3026                   CMP/HI      R2,R0
    0000118E 8921                   BT          L996
           Fun.c  2628                        {
           Fun.c  2629                            col[colNum] = GetNumber(key);
    00001190 63F3                   MOV         R15,R3
    00001192 7310                   ADD         #16,R3
    00001194 33AC                   ADD         R10,R3
    00001196 2F36                   MOV.L       R3,@-R15
    00001198 54FB                   MOV.L       @(44,R15),R4
    0000119A B447                   BSR         _GetNumber
    0000119C 0009                   NOP
           Fun.c  2630                            colNum++;
    0000119E 7A01                   ADD         #1,R10
    000011A0 63F6                   MOV.L       @R15+,R3
           Fun.c  2631                            locate(21 - colNum + 1, 3);
    000011A2 E503                   MOV         #3,R5
    000011A4 2300                   MOV.B       R0,@R3
    000011A6 E416                   MOV         #22,R4
    000011A8 4D0B                   JSR         @R13
    000011AA 34A8                   SUB         R10,R4
           Fun.c  2632                            Print(Col);
    000011AC 4E0B                   JSR         @R14
    000011AE 54F1                   MOV.L       @(4,R15),R4
    000011B0 A020                   BRA         L995
    000011B2 0009                   NOP
    000011B4              L1220:                            
    000011B4 753F                   .DATA.W     H'753F
    000011B6 7534                   .DATA.W     H'7534
    000011B8 <00000000>             .DATA.L     _PopUpWin
    000011BC <00000000>             .DATA.L     L624
    000011C0 <00000000>             .DATA.L     L625
    000011C4 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000011C8 <00000000>             .DATA.L     _Button_3_graph_
    000011CC <00000000>             .DATA.L     L616




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011D0 <00000000>             .DATA.L     L628
    000011D4              L996:                             
           Fun.c  2633                        }
           Fun.c  2634                        else if (key == KEY_CTRL_AC)
    000011D4 926D                   MOV.W       L1221,R2   ; H'753F
    000011D6 53FA                   MOV.L       @(40,R15),R3
    000011D8 3320                   CMP/EQ      R2,R3
    000011DA 8B0B                   BF          L995
           Fun.c  2635                        {
           Fun.c  2636                            memset(Col, 0, sizeof(char) * 10);
    000011DC E60A                   MOV         #10,R6
    000011DE E500                   MOV         #0,R5
    000011E0 480B                   JSR         @R8
    000011E2 54F1                   MOV.L       @(4,R15),R4
           Fun.c  2637                            colNum = 0;
    000011E4 EA00                   MOV         #0,R10
           Fun.c  2638                            area_clear(0, 16, 127, 24, 0);
    000011E6 64A3                   MOV         R10,R4
    000011E8 2FA6                   MOV.L       R10,@-R15
    000011EA E718                   MOV         #24,R7
    000011EC E67F                   MOV         #127,R6
    000011EE B955                   BSR         _area_clear
    000011F0 E510                   MOV         #16,R5
    000011F2 7F04                   ADD         #4,R15
    000011F4              L995:                             
           Fun.c  2639                        }
           Fun.c  2640                    }
           Fun.c  2641                } while (key != KEY_CTRL_EXE);
    000011F4 915E                   MOV.W       L1221+2,R1 ; H'7534
    000011F6 52FA                   MOV.L       @(40,R15),R2
    000011F8 3210                   CMP/EQ      R1,R2
    000011FA 8BBB                   BF          L994
           Fun.c  2642    
           Fun.c  2643                y = my_atoi(Col);
    000011FC B929                   BSR         _my_atoi
    000011FE 54F1                   MOV.L       @(4,R15),R4
    00001200 6B03                   MOV         R0,R11
           Fun.c  2644    
           Fun.c  2645                if (y >= 0 && y <= 29)
    00001202 4B11                   CMP/PZ      R11
    00001204 8B02                   BF          L999
    00001206 E31D                   MOV         #29,R3
    00001208 3B37                   CMP/GT      R3,R11
    0000120A 8B27                   BF          L1000
    0000120C              L999:                             
           Fun.c  2646                {
           Fun.c  2647                    break;
           Fun.c  2648                }
           Fun.c  2649                else
           Fun.c  2650                {
           Fun.c  2651                    PopUpWin(3);
    0000120C D32A                   MOV.L       L1221+6,R3 ; _PopUpWin
    0000120E 430B                   JSR         @R3
    00001210 E403                   MOV         #3,R4
           Fun.c  2652                    locate(7, 3);
    00001212 E503                   MOV         #3,R5
    00001214 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001216 E407                   MOV         #7,R4
           Fun.c  2653                    Print((unsigned char *)"Wrong number");
    00001218 D428                   MOV.L       L1221+10,R4; L624
    0000121A 4E0B                   JSR         @R14
    0000121C 0009                   NOP
           Fun.c  2654                    locate(5, 5);
    0000121E E505                   MOV         #5,R5
    00001220 4D0B                   JSR         @R13
    00001222 6453                   MOV         R5,R4
           Fun.c  2655                    Print((unsigned char *)"Press [0] key");
    00001224 D426                   MOV.L       L1221+14,R4; L625
    00001226 4E0B                   JSR         @R14
    00001228 0009                   NOP
           Fun.c  2656                    do
    0000122A              L1002:                            
           Fun.c  2657                    {
           Fun.c  2658                        GetKey(&key);
    0000122A 64F3                   MOV         R15,R4
    0000122C 490B                   JSR         @R9
    0000122E 7428                   ADD         #40,R4
           Fun.c  2659                    } while (key != KEY_CHAR_0);
    00001230 50FA                   MOV.L       @(40,R15),R0
    00001232 8830                   CMP/EQ      #48,R0
    00001234 8BF9                   BF          L1002
           Fun.c  2660                    memset(Col, 0, sizeof(char) * 10);
    00001236 E60A                   MOV         #10,R6
    00001238 E500                   MOV         #0,R5
    0000123A 480B                   JSR         @R8
    0000123C 54F1                   MOV.L       @(4,R15),R4
           Fun.c  2661                    colNum = 0;
    0000123E EA00                   MOV         #0,R10
           Fun.c  2662                }
           Fun.c  2663                y = -1;
           Fun.c  2664                // Bdisp_AllClr_DDVRAM();
           Fun.c  2665                Bdisp_AllClr_VRAM();
    00001240 D320                   MOV.L       L1221+18,R3; _Bdisp_AllClr_VRAM
    00001242 430B                   JSR         @R3
    00001244 EBFF                   MOV         #-1,R11
           Fun.c  2666                draw_picture(42, 55, 20, 8, 1, 1, Button_3_graph_);
    00001246 D220                   MOV.L       L1221+22,R2; _Button_3_graph_
    00001248 2F26                   MOV.L       R2,@-R15
    0000124A              L1142:                            
    0000124A E708                   MOV         #8,R7
    0000124C 2FC6                   MOV.L       R12,@-R15
    0000124E E614                   MOV         #20,R6
    00001250 2FC6                   MOV.L       R12,@-R15
    00001252 E537                   MOV         #55,R5
    00001254 B90D                   BSR         _draw_picture
    00001256 E42A                   MOV         #42,R4
    00001258 AF80                   BRA         L993
    0000125A 7F0C                   ADD         #12,R15
    0000125C              L1000:                            
           Fun.c  2667            }
           Fun.c  2668            Screen_Position->x = y;
    0000125C 53F3                   MOV.L       @(12,R15),R3
    0000125E 23B2                   MOV.L       R11,@R3
           Fun.c  2669            Screen_Position->y = x;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001260 53F3                   MOV.L       @(12,R15),R3
    00001262 52F2                   MOV.L       @(8,R15),R2
    00001264 1321                   MOV.L       R2,@(4,R3)
    00001266              L980:                             
           Fun.c  2670        }
           Fun.c  2671    }
    00001266 7F2C                   ADD         #44,R15
    00001268 4F26                   LDS.L       @R15+,PR
    0000126A 68F6                   MOV.L       @R15+,R8
    0000126C 69F6                   MOV.L       @R15+,R9
    0000126E 6AF6                   MOV.L       @R15+,R10
    00001270 6BF6                   MOV.L       @R15+,R11
    00001272 6CF6                   MOV.L       @R15+,R12
    00001274 6DF6                   MOV.L       @R15+,R13
    00001276 000B                   RTS
    00001278 6EF6                   MOV.L       @R15+,R14
           Fun.c  2672    
           Fun.c  2673    int Tower_LevelUp(LPTOWERPLACE Tower_PlaceTower[], int *numOfPlace, LPTOWERPLACE target_tower, int *Map)
    0000127A              _Tower_LevelUp:                  ; function: Tower_LevelUp
                                                           ; frame size=80
    0000127A 2FE6                   MOV.L       R14,@-R15
    0000127C 2FD6                   MOV.L       R13,@-R15
    0000127E 6E63                   MOV         R6,R14
    00001280 2FC6                   MOV.L       R12,@-R15
    00001282 6D53                   MOV         R5,R13
    00001284 2FB6                   MOV.L       R11,@-R15
    00001286 6C43                   MOV         R4,R12
    00001288 2FA6                   MOV.L       R10,@-R15
           Fun.c  2674    {
           Fun.c  2675        int i, counters;
           Fun.c  2676        int temp_index[2];
           Fun.c  2677        LPTOWERPLACE LevelUp_Buffer[2];
           Fun.c  2678        counters = 0;
    0000128A E500                   MOV         #0,R5
    0000128C 2F96                   MOV.L       R9,@-R15
           Fun.c  2679        temp_index[0] = -1;
    0000128E E4FF                   MOV         #-1,R4
    00001290 2F86                   MOV.L       R8,@-R15
    00001292 6653                   MOV         R5,R6
    00001294 4F22                   STS.L       PR,@-R15
    00001296 4F12                   STS.L       MACL,@-R15
    00001298 7FD4                   ADD         #-44,R15
    0000129A 6AF3                   MOV         R15,R10
    0000129C 7A24                   ADD         #36,R10
    0000129E 63A3                   MOV         R10,R3
    000012A0 1F35                   MOV.L       R3,@(20,R15)
    000012A2 6BF3                   MOV         R15,R11
    000012A4 2342                   MOV.L       R4,@R3
           Fun.c  2680        temp_index[1] = -1;
    000012A6 7304                   ADD         #4,R3
    000012A8 1F36                   MOV.L       R3,@(24,R15)
    000012AA 2342                   MOV.L       R4,@R3
           Fun.c  2681        for (i = 0; i < *numOfPlace; i++)
    000012AC 6463                   MOV         R6,R4
    000012AE A033                   BRA         L1003
    000012B0 7B1C                   ADD         #28,R11
    000012B2              L1221:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012B2 753F                   .DATA.W     H'753F
    000012B4 7534                   .DATA.W     H'7534
    000012B6 0000                   .DATA.W     0
    000012B8 <00000000>             .DATA.L     _PopUpWin
    000012BC <00000000>             .DATA.L     L624
    000012C0 <00000000>             .DATA.L     L625
    000012C4 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000012C8 <00000000>             .DATA.L     _Button_3_graph_
    000012CC              L1004:                            
    000012CC 6543                   MOV         R4,R5
    000012CE 4508                   SHLL2       R5
    000012D0 35CC                   ADD         R12,R5
    000012D2 6952                   MOV.L       @R5,R9
    000012D4 1F92                   MOV.L       R9,@(8,R15)
    000012D6 6992                   MOV.L       @R9,R9
    000012D8 68E2                   MOV.L       @R14,R8
    000012DA 6382                   MOV.L       @R8,R3
    000012DC 6292                   MOV.L       @R9,R2
    000012DE 3230                   CMP/EQ      R3,R2
    000012E0 8B16                   BF          L1005
    000012E2 5081                   MOV.L       @(4,R8),R0
    000012E4 5191                   MOV.L       @(4,R9),R1
    000012E6 3100                   CMP/EQ      R0,R1
    000012E8 8B12                   BF          L1005
           Fun.c  2682        {
           Fun.c  2683            if (Tower_PlaceTower[i]->Place_Tower->id == target_tower->Place_Tower->id && Tower_PlaceTower[i]->
                         +Place_Tower->Tower_Level == target_tower->Place_Tower->Tower_Level)
           Fun.c  2684            {
           Fun.c  2685                if (Tower_PlaceTower[i]->position->x != target_tower->position->x && Tower_PlaceTower[i]->posi
                         +tion->y != target_tower->position->x)
    000012EA 6852                   MOV.L       @R5,R8
    000012EC 1F81                   MOV.L       R8,@(4,R15)
    000012EE 5881                   MOV.L       @(4,R8),R8
    000012F0 59E1                   MOV.L       @(4,R14),R9
    000012F2 2F92                   MOV.L       R9,@R15
    000012F4 6992                   MOV.L       @R9,R9
    000012F6 6382                   MOV.L       @R8,R3
    000012F8 3390                   CMP/EQ      R9,R3
    000012FA 8909                   BT          L1005
    000012FC 5181                   MOV.L       @(4,R8),R1
    000012FE 3190                   CMP/EQ      R9,R1
    00001300 8906                   BT          L1005
           Fun.c  2686                {
           Fun.c  2687                    temp_index[counters] = i;
    00001302 6963                   MOV         R6,R9
    00001304 4908                   SHLL2       R9
    00001306 6093                   MOV         R9,R0
    00001308 0A46                   MOV.L       R4,@(R0,R10)
           Fun.c  2688                    LevelUp_Buffer[counters] = Tower_PlaceTower[i];
           Fun.c  2689                    counters++;
    0000130A 7601                   ADD         #1,R6
    0000130C 6352                   MOV.L       @R5,R3
    0000130E 0B36                   MOV.L       R3,@(R0,R11)
    00001310              L1005:                            
           Fun.c  2690                }
           Fun.c  2691            }
           Fun.c  2692            if (counters == 2)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001310 6063                   MOV         R6,R0
    00001312 8802                   CMP/EQ      #2,R0
    00001314 8903                   BT          L1008
    00001316 7401                   ADD         #1,R4
    00001318              L1003:                            
    00001318 62D2                   MOV.L       @R13,R2
    0000131A 3423                   CMP/GE      R2,R4
    0000131C 8BD6                   BF          L1004
    0000131E              L1008:                            
           Fun.c  2693            {
           Fun.c  2694                break;
           Fun.c  2695            }
           Fun.c  2696        }
           Fun.c  2697        if (counters == 2)
    0000131E 6063                   MOV         R6,R0
    00001320 8802                   CMP/EQ      #2,R0
    00001322 8B25                   BF          L1009
           Fun.c  2698        {
           Fun.c  2699            Map[37 * LevelUp_Buffer[0]->position->x + LevelUp_Buffer[0]->position->y] = 49;
    00001324 64B2                   MOV.L       @R11,R4
    00001326 E625                   MOV         #37,R6
    00001328 1F44                   MOV.L       R4,@(16,R15)
    0000132A E531                   MOV         #49,R5
    0000132C 5441                   MOV.L       @(4,R4),R4
    0000132E 6042                   MOV.L       @R4,R0
    00001330 5341                   MOV.L       @(4,R4),R3
    00001332 0067                   MUL.L       R6,R0
    00001334 001A                   STS         MACL,R0
    00001336 303C                   ADD         R3,R0
    00001338 4008                   SHLL2       R0
    0000133A 0756                   MOV.L       R5,@(R0,R7)
           Fun.c  2700            Map[37 * LevelUp_Buffer[1]->position->x + LevelUp_Buffer[1]->position->y] = 49;
    0000133C 54B1                   MOV.L       @(4,R11),R4
    0000133E 1F43                   MOV.L       R4,@(12,R15)
    00001340 5441                   MOV.L       @(4,R4),R4
    00001342 6042                   MOV.L       @R4,R0
    00001344 5341                   MOV.L       @(4,R4),R3
    00001346 0067                   MUL.L       R6,R0
    00001348 001A                   STS         MACL,R0
    0000134A 303C                   ADD         R3,R0
    0000134C 4008                   SHLL2       R0
    0000134E 0756                   MOV.L       R5,@(R0,R7)
           Fun.c  2701            free_Tower(Tower_PlaceTower, numOfPlace, temp_index[0]);
    00001350 56F5                   MOV.L       @(20,R15),R6
    00001352 65D3                   MOV         R13,R5
    00001354 6662                   MOV.L       @R6,R6
    00001356 B30F                   BSR         _free_Tower
    00001358 64C3                   MOV         R12,R4
           Fun.c  2702            free_Tower(Tower_PlaceTower, numOfPlace, temp_index[1]);
    0000135A 65D3                   MOV         R13,R5
    0000135C 56F6                   MOV.L       @(24,R15),R6
    0000135E 6662                   MOV.L       @R6,R6
    00001360 B30A                   BSR         _free_Tower
    00001362 64C3                   MOV         R12,R4
           Fun.c  2703            target_tower->Place_Tower->Tower_Level += 1;
    00001364 62E2                   MOV.L       @R14,R2
    00001366 5321                   MOV.L       @(4,R2),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001368 7301                   ADD         #1,R3
    0000136A 1231                   MOV.L       R3,@(4,R2)
           Fun.c  2704            return 1;
    0000136C A001                   BRA         L1010
    0000136E E001                   MOV         #1,R0
    00001370              L1009:                            
           Fun.c  2705        }
           Fun.c  2706        else
           Fun.c  2707        {
           Fun.c  2708            return 0;
    00001370 E000                   MOV         #0,R0
           Fun.c  2709        }
           Fun.c  2710    }
    00001372              L1010:                            
    00001372 7F2C                   ADD         #44,R15
    00001374 4F16                   LDS.L       @R15+,MACL
    00001376 4F26                   LDS.L       @R15+,PR
    00001378 68F6                   MOV.L       @R15+,R8
    0000137A 69F6                   MOV.L       @R15+,R9
    0000137C 6AF6                   MOV.L       @R15+,R10
    0000137E 6BF6                   MOV.L       @R15+,R11
    00001380 6CF6                   MOV.L       @R15+,R12
    00001382 6DF6                   MOV.L       @R15+,R13
    00001384 000B                   RTS
    00001386 6EF6                   MOV.L       @R15+,R14
           Fun.c  2711    
           Fun.c  2712    void Check_Status(unsigned int key, LPPOSITION Cursor_Position, LPPOSITION Screen_Position, int *Map, LPTO
                         +WERPLACE Tower_PlaceTower[], LPTOWER Tower_Database[], int numOfTower, int Tower_DbSize)
    00001388              _Check_Status:                   ; function: Check_Status
                                                           ; frame size=96
                                                           ; used runtime library name:
                                                           ; __divls
    00001388 2FE6                   MOV.L       R14,@-R15
    0000138A 2FD6                   MOV.L       R13,@-R15
    0000138C 2FC6                   MOV.L       R12,@-R15
    0000138E 2FB6                   MOV.L       R11,@-R15
    00001390 2FA6                   MOV.L       R10,@-R15
    00001392 2F96                   MOV.L       R9,@-R15
    00001394 2F86                   MOV.L       R8,@-R15
    00001396 4F22                   STS.L       PR,@-R15
    00001398 4F12                   STS.L       MACL,@-R15
    0000139A 7FEC                   ADD         #-20,R15
           Fun.c  2713    {
           Fun.c  2714        int x, y;
           Fun.c  2715        int Tower_id;
           Fun.c  2716        int i;
           Fun.c  2717        if (key == KEY_CTRL_F5)
    0000139C 932F                   MOV.W       L1222,R3   ; H'753D
    0000139E 1F44                   MOV.L       R4,@(16,R15)
    000013A0 1F53                   MOV.L       R5,@(12,R15)
    000013A2 2F62                   MOV.L       R6,@R15
    000013A4 1F71                   MOV.L       R7,@(4,R15)
    000013A6 58FE                   MOV.L       @(56,R15),R8
    000013A8 52F4                   MOV.L       @(16,R15),R2
    000013AA 3230                   CMP/EQ      R3,R2
    000013AC 8901                   BT          L1223
    000013AE A0CA                   BRA         L1012




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013B0 0009                   NOP
    000013B2              L1223:                            
           Fun.c  2718        {
           Fun.c  2719            // Bdisp_AllClr_DDVRAM();
           Fun.c  2720            Bdisp_AllClr_VRAM();
    000013B2 D213                   MOV.L       L1222+2,R2 ; _Bdisp_AllClr_VRAM
    000013B4 420B                   JSR         @R2
    000013B6 0009                   NOP
           Fun.c  2721            x = Screen_Position->y + (Cursor_Position->y / 16);
    000013B8 64F2                   MOV.L       @R15,R4
    000013BA E510                   MOV         #16,R5
    000013BC 51F3                   MOV.L       @(12,R15),R1
    000013BE 5111                   MOV.L       @(4,R1),R1
    000013C0 D310                   MOV.L       L1222+6,R3 ; __divls
    000013C2 430B                   JSR         @R3
    000013C4 6053                   MOV         R5,R0
    000013C6 5441                   MOV.L       @(4,R4),R4
           Fun.c  2722            y = Screen_Position->x + (Cursor_Position->x / 16);
    000013C8 62F2                   MOV.L       @R15,R2
    000013CA 340C                   ADD         R0,R4
    000013CC 51F3                   MOV.L       @(12,R15),R1
    000013CE 6112                   MOV.L       @R1,R1
    000013D0 D30C                   MOV.L       L1222+6,R3 ; __divls
    000013D2 430B                   JSR         @R3
    000013D4 6053                   MOV         R5,R0
    000013D6 6522                   MOV.L       @R2,R5
           Fun.c  2723            Tower_id = Map[x * 37 + y];
           Fun.c  2724            if (numOfTower)
    000013D8 D90B                   MOV.L       L1222+10,R9; L671
    000013DA 350C                   ADD         R0,R5
    000013DC DA0B                   MOV.L       L1222+14,R10; L670
    000013DE E225                   MOV         #37,R2
    000013E0 DB0B                   MOV.L       L1222+18,R11; L669
    000013E2 0427                   MUL.L       R2,R4
    000013E4 50F1                   MOV.L       @(4,R15),R0
    000013E6 021A                   STS         MACL,R2
    000013E8 DC0A                   MOV.L       L1222+22,R12; L672
    000013EA 325C                   ADD         R5,R2
    000013EC 4208                   SHLL2       R2
    000013EE 032E                   MOV.L       @(R0,R2),R3
    000013F0 2F32                   MOV.L       R3,@R15
    000013F2 E040                   MOV         #64,R0
    000013F4 02FE                   MOV.L       @(R0,R15),R2
    000013F6 2228                   TST         R2,R2
    000013F8 8950                   BT          L1013
           Fun.c  2725            {
           Fun.c  2726                for (i = 0; i < numOfTower; i++)
    000013FA A04B                   BRA         L1014
    000013FC ED00                   MOV         #0,R13
    000013FE              L1222:                            
    000013FE 753D                   .DATA.W     H'753D
    00001400 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00001404 <00000000>             .DATA.L     __divls
    00001408 <00000000>             .DATA.L     L671
    0000140C <00000000>             .DATA.L     L670
    00001410 <00000000>             .DATA.L     L669
    00001414 <00000000>             .DATA.L     L672




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001418              L1015:                            
    00001418 6ED3                   MOV         R13,R14
    0000141A 4E08                   SHLL2       R14
    0000141C 3E8C                   ADD         R8,R14
    0000141E 66E2                   MOV.L       @R14,R6
    00001420 1F62                   MOV.L       R6,@(8,R15)
    00001422 5661                   MOV.L       @(4,R6),R6
    00001424 6362                   MOV.L       @R6,R3
    00001426 3340                   CMP/EQ      R4,R3
    00001428 8B33                   BF          L1016
    0000142A 5161                   MOV.L       @(4,R6),R1
    0000142C 3150                   CMP/EQ      R5,R1
    0000142E 8B30                   BF          L1016
           Fun.c  2727                {
           Fun.c  2728                    if (Tower_PlaceTower[i]->position->x == x && Tower_PlaceTower[i]->position->y == y)
           Fun.c  2729                    {
           Fun.c  2730                        printf_pop_xy(1, 1, "Tower Level:%d", Tower_PlaceTower[i]->Place_Tower->Tower_Level);
    00001430 62E2                   MOV.L       @R14,R2
    00001432 E501                   MOV         #1,R5
    00001434 6322                   MOV.L       @R2,R3
    00001436 5131                   MOV.L       @(4,R3),R1
    00001438 D349                   MOV.L       L1224+4,R3 ; _printf_pop_xy
    0000143A 2F16                   MOV.L       R1,@-R15
    0000143C 2FB6                   MOV.L       R11,@-R15
    0000143E 430B                   JSR         @R3
    00001440 6453                   MOV         R5,R4
           Fun.c  2731                        printf_pop_xy(1, 2, "ATTACK:%f", Tower_PlaceTower[i]->Place_Tower->Attack);
    00001442 E502                   MOV         #2,R5
    00001444 62E2                   MOV.L       @R14,R2
    00001446 6322                   MOV.L       @R2,R3
    00001448 5133                   MOV.L       @(12,R3),R1
    0000144A 2F16                   MOV.L       R1,@-R15
    0000144C 5132                   MOV.L       @(8,R3),R1
    0000144E 2F16                   MOV.L       R1,@-R15
    00001450 2FA6                   MOV.L       R10,@-R15
    00001452 D343                   MOV.L       L1224+4,R3 ; _printf_pop_xy
    00001454 430B                   JSR         @R3
    00001456 E401                   MOV         #1,R4
           Fun.c  2732                        printf_pop_xy(1, 3, "Attack Frequency:%f", Tower_PlaceTower[i]->Place_Tower->Attack_Fr
                         +equency);
    00001458 62E2                   MOV.L       @R14,R2
    0000145A E503                   MOV         #3,R5
    0000145C 6322                   MOV.L       @R2,R3
    0000145E 5135                   MOV.L       @(20,R3),R1
    00001460 2F16                   MOV.L       R1,@-R15
    00001462 5134                   MOV.L       @(16,R3),R1
    00001464 D33E                   MOV.L       L1224+4,R3 ; _printf_pop_xy
    00001466 2F16                   MOV.L       R1,@-R15
    00001468 2F96                   MOV.L       R9,@-R15
    0000146A 430B                   JSR         @R3
    0000146C E401                   MOV         #1,R4
           Fun.c  2733                        printf_pop_xy(1, 4, "Attack Range:%d", Tower_PlaceTower[i]->Place_Tower->Attack_Range)
                         +;
    0000146E E504                   MOV         #4,R5
    00001470 62E2                   MOV.L       @R14,R2
    00001472 6322                   MOV.L       @R2,R3
    00001474 5136                   MOV.L       @(24,R3),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001476 2F16                   MOV.L       R1,@-R15
    00001478 2FC6                   MOV.L       R12,@-R15
    0000147A D339                   MOV.L       L1224+4,R3 ; _printf_pop_xy
    0000147C 430B                   JSR         @R3
    0000147E E401                   MOV         #1,R4
    00001480 7F28                   ADD         #40,R15
           Fun.c  2734                        Tower_LevelUp(Tower_PlaceTower, &numOfTower, Tower_PlaceTower[i], Map);
    00001482 65F3                   MOV         R15,R5
    00001484 57F1                   MOV.L       @(4,R15),R7
    00001486 7540                   ADD         #64,R5
    00001488 66E2                   MOV.L       @R14,R6
    0000148A BEF6                   BSR         _Tower_LevelUp
    0000148C 6483                   MOV         R8,R4
           Fun.c  2735                        break;
    0000148E A005                   BRA         L1013
    00001490 0009                   NOP
    00001492              L1016:                            
    00001492 7D01                   ADD         #1,R13
    00001494              L1014:                            
    00001494 E040                   MOV         #64,R0
    00001496 03FE                   MOV.L       @(R0,R15),R3
    00001498 3D33                   CMP/GE      R3,R13
    0000149A 8BBD                   BF          L1015
    0000149C              L1013:                            
           Fun.c  2736                    }
           Fun.c  2737                }
           Fun.c  2738            }
           Fun.c  2739            if (i == numOfTower || !numOfTower)
    0000149C E040                   MOV         #64,R0
    0000149E 01FE                   MOV.L       @(R0,R15),R1
    000014A0 3D10                   CMP/EQ      R1,R13
    000014A2 8903                   BT          L1019
    000014A4 E040                   MOV         #64,R0
    000014A6 02FE                   MOV.L       @(R0,R15),R2
    000014A8 2228                   TST         R2,R2
    000014AA 8B38                   BF          L1018
    000014AC              L1019:                            
    000014AC 54FF                   MOV.L       @(60,R15),R4
           Fun.c  2740            {
           Fun.c  2741                for (i = 0; i < Tower_DbSize; i++)
    000014AE E044                   MOV         #68,R0
    000014B0 03FE                   MOV.L       @(R0,R15),R3
    000014B2 E500                   MOV         #0,R5
    000014B4 4315                   CMP/PL      R3
    000014B6 8F32                   BF/S        L1018
    000014B8 6E43                   MOV         R4,R14
    000014BA              L1021:                            
           Fun.c  2742                {
           Fun.c  2743                    if (Tower_Database[i]->id == Tower_id)
    000014BA 6142                   MOV.L       @R4,R1
    000014BC 63F2                   MOV.L       @R15,R3
    000014BE 6212                   MOV.L       @R1,R2
    000014C0 3230                   CMP/EQ      R3,R2
    000014C2 8B25                   BF          L1022
           Fun.c  2744                    {
           Fun.c  2745                        printf_pop_xy(1, 1, "Tower Level:%d", Tower_Database[i]->Tower_Level);
    000014C4 62E2                   MOV.L       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014C6 E501                   MOV         #1,R5
    000014C8 D325                   MOV.L       L1224+4,R3 ; _printf_pop_xy
    000014CA 5121                   MOV.L       @(4,R2),R1
    000014CC 2F16                   MOV.L       R1,@-R15
    000014CE 2FB6                   MOV.L       R11,@-R15
    000014D0 430B                   JSR         @R3
    000014D2 6453                   MOV         R5,R4
           Fun.c  2746                        printf_pop_xy(1, 2, "ATTACK:%f", Tower_Database[i]->Attack);
    000014D4 62E2                   MOV.L       @R14,R2
    000014D6 E502                   MOV         #2,R5
    000014D8 5323                   MOV.L       @(12,R2),R3
    000014DA 2F36                   MOV.L       R3,@-R15
    000014DC 5322                   MOV.L       @(8,R2),R3
    000014DE 2F36                   MOV.L       R3,@-R15
    000014E0 2FA6                   MOV.L       R10,@-R15
    000014E2 D21F                   MOV.L       L1224+4,R2 ; _printf_pop_xy
    000014E4 420B                   JSR         @R2
    000014E6 E401                   MOV         #1,R4
           Fun.c  2747                        printf_pop_xy(1, 3, "Attack Frequency:%f", Tower_Database[i]->Attack_Frequency);
    000014E8 63E2                   MOV.L       @R14,R3
    000014EA E503                   MOV         #3,R5
    000014EC 5235                   MOV.L       @(20,R3),R2
    000014EE 2F26                   MOV.L       R2,@-R15
    000014F0 5234                   MOV.L       @(16,R3),R2
    000014F2 2F26                   MOV.L       R2,@-R15
    000014F4 2F96                   MOV.L       R9,@-R15
    000014F6 D31A                   MOV.L       L1224+4,R3 ; _printf_pop_xy
    000014F8 430B                   JSR         @R3
    000014FA E401                   MOV         #1,R4
           Fun.c  2748                        printf_pop_xy(1, 4, "Attack Range:%d", Tower_Database[i]->Attack_Range);
    000014FC 62E2                   MOV.L       @R14,R2
    000014FE E504                   MOV         #4,R5
    00001500 5326                   MOV.L       @(24,R2),R3
    00001502 2F36                   MOV.L       R3,@-R15
    00001504 2FC6                   MOV.L       R12,@-R15
    00001506 D216                   MOV.L       L1224+4,R2 ; _printf_pop_xy
    00001508 420B                   JSR         @R2
    0000150A E401                   MOV         #1,R4
           Fun.c  2749                        break;
    0000150C A007                   BRA         L1018
    0000150E 7F28                   ADD         #40,R15
    00001510              L1022:                            
    00001510 7501                   ADD         #1,R5
    00001512 7E04                   ADD         #4,R14
    00001514 E044                   MOV         #68,R0
    00001516 02FE                   MOV.L       @(R0,R15),R2
    00001518 3523                   CMP/GE      R2,R5
    0000151A 8FCE                   BF/S        L1021
    0000151C 7404                   ADD         #4,R4
    0000151E              L1018:                            
           Fun.c  2750                    }
           Fun.c  2751                }
           Fun.c  2752            }
           Fun.c  2753    
           Fun.c  2754            draw_picture(82, 55, 20, 8, 1, 1, Button_5_graph_);
    0000151E E301                   MOV         #1,R3
    00001520 D211                   MOV.L       L1224+12,R2; _draw_picture




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001522 E708                   MOV         #8,R7
    00001524 D10F                   MOV.L       L1224+8,R1 ; _Button_5_graph_
    00001526 E614                   MOV         #20,R6
    00001528 2F16                   MOV.L       R1,@-R15
    0000152A E537                   MOV         #55,R5
    0000152C 2F36                   MOV.L       R3,@-R15
    0000152E 2F36                   MOV.L       R3,@-R15
    00001530 420B                   JSR         @R2
    00001532 E452                   MOV         #82,R4
    00001534 DD0D                   MOV.L       L1224+16,R13; _GetKey
    00001536 7F0C                   ADD         #12,R15
    00001538 9E10                   MOV.W       L1224,R14  ; H'7532
           Fun.c  2755            do
    0000153A              L1024:                            
           Fun.c  2756            {
           Fun.c  2757                GetKey(&key);
    0000153A 64F3                   MOV         R15,R4
    0000153C 4D0B                   JSR         @R13
    0000153E 7410                   ADD         #16,R4
           Fun.c  2758            } while (key != KEY_CTRL_EXIT);
    00001540 53F4                   MOV.L       @(16,R15),R3
    00001542 33E0                   CMP/EQ      R14,R3
    00001544 8BF9                   BF          L1024
    00001546              L1012:                            
           Fun.c  2759        }
           Fun.c  2760    }
    00001546 7F14                   ADD         #20,R15
    00001548 4F16                   LDS.L       @R15+,MACL
    0000154A 4F26                   LDS.L       @R15+,PR
    0000154C 68F6                   MOV.L       @R15+,R8
    0000154E 69F6                   MOV.L       @R15+,R9
    00001550 6AF6                   MOV.L       @R15+,R10
    00001552 6BF6                   MOV.L       @R15+,R11
    00001554 6CF6                   MOV.L       @R15+,R12
    00001556 6DF6                   MOV.L       @R15+,R13
    00001558 000B                   RTS
    0000155A 6EF6                   MOV.L       @R15+,R14
    0000155C              L1224:                            
    0000155C 7532                   .DATA.W     H'7532
    0000155E 0000                   .DATA.W     0
    00001560 <00000000>             .DATA.L     _printf_pop_xy
    00001564 <00000000>             .DATA.L     _Button_5_graph_
    00001568 <00000000>             .DATA.L     _draw_picture
    0000156C <00000000>             .DATA.L     _GetKey
           Fun.c  2761    
           Fun.c  2762    int Check_Path(int *Map, int *Direction, int *numOfDirection)
    00001570              _Check_Path:                     ; function: Check_Path
                                                           ; frame size=16452
    00001570 2FE6                   MOV.L       R14,@-R15
    00001572 6E63                   MOV         R6,R14
           Fun.c  2763    {
           Fun.c  2764        LPSTACK OpenList;
           Fun.c  2765        LPSTACK CloseList;
           Fun.c  2766        int tempDirection[4096];
           Fun.c  2767        int tempNumOfDirection;
           Fun.c  2768        int i, j;
           Fun.c  2769    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2770        tempNumOfDirection = 0;
           Fun.c  2771        *numOfDirection = 0;
           Fun.c  2772    
           Fun.c  2773        OpenList = (LPSTACK)malloc(sizeof(Stack));
    00001574 D34A                   MOV.L       L1225+4,R3 ; _malloc
    00001576 2FD6                   MOV.L       R13,@-R15
    00001578 2FC6                   MOV.L       R12,@-R15
    0000157A 2FB6                   MOV.L       R11,@-R15
    0000157C 2FA6                   MOV.L       R10,@-R15
    0000157E 6A53                   MOV         R5,R10
    00001580 2F96                   MOV.L       R9,@-R15
    00001582 2F86                   MOV.L       R8,@-R15
    00001584 4F22                   STS.L       PR,@-R15
    00001586 E800                   MOV         #0,R8
    00001588 9088                   MOV.W       L1225,R0   ; H'BFF4
    0000158A 3F0C                   ADD         R0,R15
    0000158C 1F42                   MOV.L       R4,@(8,R15)
    0000158E 2F82                   MOV.L       R8,@R15
    00001590 2E82                   MOV.L       R8,@R14
    00001592 430B                   JSR         @R3
    00001594 E408                   MOV         #8,R4
    00001596 6C03                   MOV         R0,R12
           Fun.c  2774        OpenList->next = NULL;
           Fun.c  2775        CloseList = (LPSTACK)malloc(sizeof(Stack));
    00001598 D241                   MOV.L       L1225+4,R2 ; _malloc
    0000159A 1C81                   MOV.L       R8,@(4,R12)
    0000159C 420B                   JSR         @R2
    0000159E E408                   MOV         #8,R4
    000015A0 6B03                   MOV         R0,R11
           Fun.c  2776        CloseList->next = NULL;
           Fun.c  2777    
           Fun.c  2778        if (Astar(2, 4, 18, 4, 37, Map, OpenList, CloseList, tempDirection, &tempNumOfDirection))
    000015A2 6DF3                   MOV         R15,R13
    000015A4 1B81                   MOV.L       R8,@(4,R11)
    000015A6 63F3                   MOV         R15,R3
    000015A8 2F36                   MOV.L       R3,@-R15
    000015AA E704                   MOV         #4,R7
    000015AC 7D0C                   ADD         #12,R13
    000015AE E325                   MOV         #37,R3
    000015B0 2FD6                   MOV.L       R13,@-R15
    000015B2 E612                   MOV         #18,R6
    000015B4 2FB6                   MOV.L       R11,@-R15
    000015B6 6573                   MOV         R7,R5
    000015B8 2FC6                   MOV.L       R12,@-R15
    000015BA 52F6                   MOV.L       @(24,R15),R2
    000015BC 2F26                   MOV.L       R2,@-R15
    000015BE 2F36                   MOV.L       R3,@-R15
    000015C0 D238                   MOV.L       L1225+8,R2 ; _Astar
    000015C2 420B                   JSR         @R2
    000015C4 E402                   MOV         #2,R4
    000015C6 2008                   TST         R0,R0
    000015C8 8F02                   BF/S        L1226
    000015CA 7F18                   ADD         #24,R15
    000015CC A107                   BRA         L1144
    000015CE 0009                   NOP
    000015D0              L1226:                            
           Fun.c  2779        {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2780            i = 0;
           Fun.c  2781            j = 0;
    000015D0 1F81                   MOV.L       R8,@(4,R15)
           Fun.c  2782            ListClear(OpenList);
    000015D2 D935                   MOV.L       L1225+12,R9; _ListClear
    000015D4 490B                   JSR         @R9
    000015D6 64C3                   MOV         R12,R4
           Fun.c  2783            ListClear(CloseList);
    000015D8 490B                   JSR         @R9
    000015DA 64B3                   MOV         R11,R4
           Fun.c  2784            for (i = *numOfDirection; i < tempNumOfDirection + *numOfDirection; i++)
    000015DC A00B                   BRA         L1026
    000015DE 64E2                   MOV.L       @R14,R4
    000015E0              L1027:                            
           Fun.c  2785            {
           Fun.c  2786                Direction[i] = tempDirection[j];
    000015E0 53F1                   MOV.L       @(4,R15),R3
    000015E2 6043                   MOV         R4,R0
    000015E4 4008                   SHLL2       R0
    000015E6 4308                   SHLL2       R3
    000015E8 33DC                   ADD         R13,R3
    000015EA 7401                   ADD         #1,R4
    000015EC 6232                   MOV.L       @R3,R2
    000015EE 0A26                   MOV.L       R2,@(R0,R10)
           Fun.c  2787                j++;
    000015F0 53F1                   MOV.L       @(4,R15),R3
    000015F2 7301                   ADD         #1,R3
    000015F4 1F31                   MOV.L       R3,@(4,R15)
    000015F6              L1026:                            
    000015F6 63F2                   MOV.L       @R15,R3
    000015F8 62E2                   MOV.L       @R14,R2
    000015FA 323C                   ADD         R3,R2
    000015FC 3423                   CMP/GE      R2,R4
    000015FE 8BEF                   BF          L1027
           Fun.c  2788            }
           Fun.c  2789            *numOfDirection = tempNumOfDirection + *numOfDirection;
    00001600 63F2                   MOV.L       @R15,R3
           Fun.c  2790        }
           Fun.c  2791        else
           Fun.c  2792        {
           Fun.c  2793            return 0;
           Fun.c  2794        }
           Fun.c  2795        if (Astar(18, 4, 18, 32, 37, Map, OpenList, CloseList, tempDirection, &tempNumOfDirection))
    00001602 E720                   MOV         #32,R7
    00001604 62E2                   MOV.L       @R14,R2
    00001606 E612                   MOV         #18,R6
    00001608 323C                   ADD         R3,R2
    0000160A 63F3                   MOV         R15,R3
    0000160C 2E22                   MOV.L       R2,@R14
    0000160E E504                   MOV         #4,R5
    00001610 2F36                   MOV.L       R3,@-R15
    00001612 E325                   MOV         #37,R3
    00001614 2FD6                   MOV.L       R13,@-R15
    00001616 2FB6                   MOV.L       R11,@-R15
    00001618 2FC6                   MOV.L       R12,@-R15
    0000161A 52F6                   MOV.L       @(24,R15),R2
    0000161C 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000161E 2F36                   MOV.L       R3,@-R15
    00001620 D220                   MOV.L       L1225+8,R2 ; _Astar
    00001622 420B                   JSR         @R2
    00001624 6463                   MOV         R6,R4
    00001626 2008                   TST         R0,R0
    00001628 8F02                   BF/S        L1227
    0000162A 7F18                   ADD         #24,R15
    0000162C A0D7                   BRA         L1144
    0000162E 0009                   NOP
    00001630              L1227:                            
           Fun.c  2796        {
           Fun.c  2797            i = 0;
           Fun.c  2798            j = 0;
    00001630 1F81                   MOV.L       R8,@(4,R15)
           Fun.c  2799            ListClear(OpenList);
    00001632 490B                   JSR         @R9
    00001634 64C3                   MOV         R12,R4
           Fun.c  2800            ListClear(CloseList);
    00001636 490B                   JSR         @R9
    00001638 64B3                   MOV         R11,R4
           Fun.c  2801            for (i = *numOfDirection; i < tempNumOfDirection + *numOfDirection; i++)
    0000163A A00B                   BRA         L1031
    0000163C 64E2                   MOV.L       @R14,R4
    0000163E              L1032:                            
           Fun.c  2802            {
           Fun.c  2803                Direction[i] = tempDirection[j];
    0000163E 6043                   MOV         R4,R0
    00001640 53F1                   MOV.L       @(4,R15),R3
    00001642 4008                   SHLL2       R0
    00001644 4308                   SHLL2       R3
    00001646 33DC                   ADD         R13,R3
    00001648 6232                   MOV.L       @R3,R2
    0000164A 7401                   ADD         #1,R4
    0000164C 0A26                   MOV.L       R2,@(R0,R10)
           Fun.c  2804                j++;
    0000164E 53F1                   MOV.L       @(4,R15),R3
    00001650 7301                   ADD         #1,R3
    00001652 1F31                   MOV.L       R3,@(4,R15)
    00001654              L1031:                            
    00001654 63F2                   MOV.L       @R15,R3
    00001656 62E2                   MOV.L       @R14,R2
    00001658 323C                   ADD         R3,R2
    0000165A 3423                   CMP/GE      R2,R4
    0000165C 8BEF                   BF          L1032
           Fun.c  2805            }
           Fun.c  2806            *numOfDirection = tempNumOfDirection + *numOfDirection;
           Fun.c  2807        }
           Fun.c  2808        else
           Fun.c  2809        {
           Fun.c  2810            return 0;
           Fun.c  2811        }
           Fun.c  2812        if (Astar(18, 32, 4, 32, 37, Map, OpenList, CloseList, tempDirection, &tempNumOfDirection))
    0000165E E720                   MOV         #32,R7
    00001660 63F2                   MOV.L       @R15,R3
    00001662 E604                   MOV         #4,R6
    00001664 62E2                   MOV.L       @R14,R2
    00001666 6573                   MOV         R7,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001668 323C                   ADD         R3,R2
    0000166A 2E22                   MOV.L       R2,@R14
    0000166C 62F3                   MOV         R15,R2
    0000166E 2F26                   MOV.L       R2,@-R15
    00001670 2FD6                   MOV.L       R13,@-R15
    00001672 E225                   MOV         #37,R2
    00001674 2FB6                   MOV.L       R11,@-R15
    00001676 2FC6                   MOV.L       R12,@-R15
    00001678 53F6                   MOV.L       @(24,R15),R3
    0000167A 2F36                   MOV.L       R3,@-R15
    0000167C 2F26                   MOV.L       R2,@-R15
    0000167E D309                   MOV.L       L1225+8,R3 ; _Astar
    00001680 430B                   JSR         @R3
    00001682 E412                   MOV         #18,R4
    00001684 2008                   TST         R0,R0
    00001686 8F02                   BF/S        L1228
    00001688 7F18                   ADD         #24,R15
    0000168A A0A8                   BRA         L1144
    0000168C 0009                   NOP
    0000168E              L1228:                            
           Fun.c  2813        {
           Fun.c  2814            i = 0;
           Fun.c  2815            j = 0;
    0000168E 1F81                   MOV.L       R8,@(4,R15)
           Fun.c  2816            ListClear(OpenList);
    00001690 490B                   JSR         @R9
    00001692 64C3                   MOV         R12,R4
           Fun.c  2817            ListClear(CloseList);
    00001694 490B                   JSR         @R9
    00001696 64B3                   MOV         R11,R4
           Fun.c  2818            for (i = *numOfDirection; i < tempNumOfDirection + *numOfDirection; i++)
    00001698 A013                   BRA         L1035
    0000169A 64E2                   MOV.L       @R14,R4
    0000169C              L1225:                            
    0000169C BFF4                   .DATA.W     H'BFF4
    0000169E 0000                   .DATA.W     0
    000016A0 <00000000>             .DATA.L     _malloc
    000016A4 <00000000>             .DATA.L     _Astar
    000016A8 <00000000>             .DATA.L     _ListClear
    000016AC              L1036:                            
           Fun.c  2819            {
           Fun.c  2820                Direction[i] = tempDirection[j];
    000016AC 53F1                   MOV.L       @(4,R15),R3
    000016AE 6043                   MOV         R4,R0
    000016B0 4008                   SHLL2       R0
    000016B2 4308                   SHLL2       R3
    000016B4 33DC                   ADD         R13,R3
    000016B6 7401                   ADD         #1,R4
    000016B8 6232                   MOV.L       @R3,R2
    000016BA 0A26                   MOV.L       R2,@(R0,R10)
           Fun.c  2821                j++;
    000016BC 53F1                   MOV.L       @(4,R15),R3
    000016BE 7301                   ADD         #1,R3
    000016C0 1F31                   MOV.L       R3,@(4,R15)
    000016C2              L1035:                            
    000016C2 63F2                   MOV.L       @R15,R3
    000016C4 62E2                   MOV.L       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016C6 323C                   ADD         R3,R2
    000016C8 3423                   CMP/GE      R2,R4
    000016CA 8BEF                   BF          L1036
           Fun.c  2822            }
           Fun.c  2823            *numOfDirection = tempNumOfDirection + *numOfDirection;
    000016CC 63F2                   MOV.L       @R15,R3
           Fun.c  2824        }
           Fun.c  2825        else
           Fun.c  2826        {
           Fun.c  2827            return 0;
           Fun.c  2828        }
           Fun.c  2829        if (Astar(4, 32, 4, 18, 37, Map, OpenList, CloseList, tempDirection, &tempNumOfDirection))
    000016CE E712                   MOV         #18,R7
    000016D0 62E2                   MOV.L       @R14,R2
    000016D2 E604                   MOV         #4,R6
    000016D4 323C                   ADD         R3,R2
    000016D6 63F3                   MOV         R15,R3
    000016D8 2E22                   MOV.L       R2,@R14
    000016DA E520                   MOV         #32,R5
    000016DC 2F36                   MOV.L       R3,@-R15
    000016DE E325                   MOV         #37,R3
    000016E0 2FD6                   MOV.L       R13,@-R15
    000016E2 2FB6                   MOV.L       R11,@-R15
    000016E4 2FC6                   MOV.L       R12,@-R15
    000016E6 52F6                   MOV.L       @(24,R15),R2
    000016E8 2F26                   MOV.L       R2,@-R15
    000016EA 2F36                   MOV.L       R3,@-R15
    000016EC D243                   MOV.L       L1229+2,R2 ; _Astar
    000016EE 420B                   JSR         @R2
    000016F0 6463                   MOV         R6,R4
    000016F2 2008                   TST         R0,R0
    000016F4 8D73                   BT/S        L1144
    000016F6 7F18                   ADD         #24,R15
           Fun.c  2830        {
           Fun.c  2831            i = 0;
           Fun.c  2832            j = 0;
    000016F8 1F81                   MOV.L       R8,@(4,R15)
           Fun.c  2833            ListClear(OpenList);
    000016FA 490B                   JSR         @R9
    000016FC 64C3                   MOV         R12,R4
           Fun.c  2834            ListClear(CloseList);
    000016FE 490B                   JSR         @R9
    00001700 64B3                   MOV         R11,R4
           Fun.c  2835            for (i = *numOfDirection; i < tempNumOfDirection + *numOfDirection; i++)
    00001702 A00B                   BRA         L1039
    00001704 64E2                   MOV.L       @R14,R4
    00001706              L1040:                            
           Fun.c  2836            {
           Fun.c  2837                Direction[i] = tempDirection[j];
    00001706 6043                   MOV         R4,R0
    00001708 53F1                   MOV.L       @(4,R15),R3
    0000170A 4008                   SHLL2       R0
    0000170C 4308                   SHLL2       R3
    0000170E 33DC                   ADD         R13,R3
    00001710 6232                   MOV.L       @R3,R2
    00001712 7401                   ADD         #1,R4
    00001714 0A26                   MOV.L       R2,@(R0,R10)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2838                j++;
    00001716 53F1                   MOV.L       @(4,R15),R3
    00001718 7301                   ADD         #1,R3
    0000171A 1F31                   MOV.L       R3,@(4,R15)
    0000171C              L1039:                            
    0000171C 63F2                   MOV.L       @R15,R3
    0000171E 62E2                   MOV.L       @R14,R2
    00001720 323C                   ADD         R3,R2
    00001722 3423                   CMP/GE      R2,R4
    00001724 8BEF                   BF          L1040
           Fun.c  2839            }
           Fun.c  2840            *numOfDirection = tempNumOfDirection + *numOfDirection;
           Fun.c  2841        }
           Fun.c  2842        else
           Fun.c  2843        {
           Fun.c  2844            return 0;
           Fun.c  2845        }
           Fun.c  2846        if (Astar(4, 18, 32, 18, 37, Map, OpenList, CloseList, tempDirection, &tempNumOfDirection))
    00001726 E712                   MOV         #18,R7
    00001728 63F2                   MOV.L       @R15,R3
    0000172A E620                   MOV         #32,R6
    0000172C 62E2                   MOV.L       @R14,R2
    0000172E 6573                   MOV         R7,R5
    00001730 323C                   ADD         R3,R2
    00001732 2E22                   MOV.L       R2,@R14
    00001734 62F3                   MOV         R15,R2
    00001736 2F26                   MOV.L       R2,@-R15
    00001738 2FD6                   MOV.L       R13,@-R15
    0000173A E225                   MOV         #37,R2
    0000173C 2FB6                   MOV.L       R11,@-R15
    0000173E 2FC6                   MOV.L       R12,@-R15
    00001740 53F6                   MOV.L       @(24,R15),R3
    00001742 2F36                   MOV.L       R3,@-R15
    00001744 2F26                   MOV.L       R2,@-R15
    00001746 D32D                   MOV.L       L1229+2,R3 ; _Astar
    00001748 430B                   JSR         @R3
    0000174A E404                   MOV         #4,R4
    0000174C 2008                   TST         R0,R0
    0000174E 8D46                   BT/S        L1144
    00001750 7F18                   ADD         #24,R15
           Fun.c  2847        {
           Fun.c  2848            i = 0;
           Fun.c  2849            j = 0;
    00001752 1F81                   MOV.L       R8,@(4,R15)
           Fun.c  2850            ListClear(OpenList);
    00001754 490B                   JSR         @R9
    00001756 64C3                   MOV         R12,R4
           Fun.c  2851            ListClear(CloseList);
    00001758 490B                   JSR         @R9
    0000175A 64B3                   MOV         R11,R4
           Fun.c  2852            for (i = *numOfDirection; i < tempNumOfDirection + *numOfDirection; i++)
    0000175C A00B                   BRA         L1043
    0000175E 64E2                   MOV.L       @R14,R4
    00001760              L1044:                            
           Fun.c  2853            {
           Fun.c  2854                Direction[i] = tempDirection[j];
    00001760 53F1                   MOV.L       @(4,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001762 6043                   MOV         R4,R0
    00001764 4008                   SHLL2       R0
    00001766 4308                   SHLL2       R3
    00001768 33DC                   ADD         R13,R3
    0000176A 7401                   ADD         #1,R4
    0000176C 6232                   MOV.L       @R3,R2
    0000176E 0A26                   MOV.L       R2,@(R0,R10)
           Fun.c  2855                j++;
    00001770 53F1                   MOV.L       @(4,R15),R3
    00001772 7301                   ADD         #1,R3
    00001774 1F31                   MOV.L       R3,@(4,R15)
    00001776              L1043:                            
    00001776 63F2                   MOV.L       @R15,R3
    00001778 62E2                   MOV.L       @R14,R2
    0000177A 323C                   ADD         R3,R2
    0000177C 3423                   CMP/GE      R2,R4
    0000177E 8BEF                   BF          L1044
           Fun.c  2856            }
           Fun.c  2857            *numOfDirection = tempNumOfDirection + *numOfDirection;
    00001780 63F2                   MOV.L       @R15,R3
           Fun.c  2858        }
           Fun.c  2859        else
           Fun.c  2860        {
           Fun.c  2861            return 0;
           Fun.c  2862        }
           Fun.c  2863        if (Astar(32, 18, 32, 34, 37, Map, OpenList, CloseList, tempDirection, &tempNumOfDirection))
    00001782 E722                   MOV         #34,R7
    00001784 62E2                   MOV.L       @R14,R2
    00001786 E620                   MOV         #32,R6
    00001788 323C                   ADD         R3,R2
    0000178A 63F3                   MOV         R15,R3
    0000178C 2E22                   MOV.L       R2,@R14
    0000178E E512                   MOV         #18,R5
    00001790 2F36                   MOV.L       R3,@-R15
    00001792 E325                   MOV         #37,R3
    00001794 2FD6                   MOV.L       R13,@-R15
    00001796 2FB6                   MOV.L       R11,@-R15
    00001798 2FC6                   MOV.L       R12,@-R15
    0000179A 52F6                   MOV.L       @(24,R15),R2
    0000179C 2F26                   MOV.L       R2,@-R15
    0000179E 2F36                   MOV.L       R3,@-R15
    000017A0 D216                   MOV.L       L1229+2,R2 ; _Astar
    000017A2 420B                   JSR         @R2
    000017A4 6463                   MOV         R6,R4
    000017A6 2008                   TST         R0,R0
    000017A8 8D19                   BT/S        L1144
    000017AA 7F18                   ADD         #24,R15
           Fun.c  2864        {
           Fun.c  2865            i = 0;
           Fun.c  2866            j = 0;
           Fun.c  2867            ListClear(OpenList);
    000017AC 490B                   JSR         @R9
    000017AE 64C3                   MOV         R12,R4
           Fun.c  2868            ListClear(CloseList);
    000017B0 490B                   JSR         @R9
    000017B2 64B3                   MOV         R11,R4
           Fun.c  2869            for (i = *numOfDirection; i < tempNumOfDirection + *numOfDirection; i++)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017B4 A009                   BRA         L1047
    000017B6 64E2                   MOV.L       @R14,R4
    000017B8              L1048:                            
           Fun.c  2870            {
           Fun.c  2871                Direction[i] = tempDirection[j];
    000017B8 6043                   MOV         R4,R0
    000017BA 4008                   SHLL2       R0
    000017BC 6383                   MOV         R8,R3
    000017BE 4308                   SHLL2       R3
    000017C0 33DC                   ADD         R13,R3
           Fun.c  2872                j++;
    000017C2 7801                   ADD         #1,R8
    000017C4 6232                   MOV.L       @R3,R2
    000017C6 7401                   ADD         #1,R4
    000017C8 0A26                   MOV.L       R2,@(R0,R10)
    000017CA              L1047:                            
    000017CA 63F2                   MOV.L       @R15,R3
    000017CC 62E2                   MOV.L       @R14,R2
    000017CE 323C                   ADD         R3,R2
    000017D0 3423                   CMP/GE      R2,R4
    000017D2 8BF1                   BF          L1048
           Fun.c  2873            }
           Fun.c  2874            *numOfDirection = tempNumOfDirection + *numOfDirection;
    000017D4 63F2                   MOV.L       @R15,R3
    000017D6 62E2                   MOV.L       @R14,R2
    000017D8 323C                   ADD         R3,R2
    000017DA A002                   BRA         L1049
    000017DC 2E22                   MOV.L       R2,@R14
    000017DE              L1144:                            
           Fun.c  2875        }
           Fun.c  2876        else
           Fun.c  2877        {
           Fun.c  2878            return 0;
    000017DE A001                   BRA         L1029
    000017E0 E000                   MOV         #0,R0
    000017E2              L1049:                            
           Fun.c  2879        }
           Fun.c  2880        return 1;
    000017E2 E001                   MOV         #1,R0
           Fun.c  2881    }
    000017E4              L1029:                            
    000017E4 9109                   MOV.W       L1229,R1   ; H'400C
    000017E6 3F1C                   ADD         R1,R15
    000017E8 4F26                   LDS.L       @R15+,PR
    000017EA 68F6                   MOV.L       @R15+,R8
    000017EC 69F6                   MOV.L       @R15+,R9
    000017EE 6AF6                   MOV.L       @R15+,R10
    000017F0 6BF6                   MOV.L       @R15+,R11
    000017F2 6CF6                   MOV.L       @R15+,R12
    000017F4 6DF6                   MOV.L       @R15+,R13
    000017F6 000B                   RTS
    000017F8 6EF6                   MOV.L       @R15+,R14
    000017FA              L1229:                            
    000017FA 400C                   .DATA.W     H'400C
    000017FC <00000000>             .DATA.L     _Astar
           Fun.c  2882    
           Fun.c  2883    void Tower_Attack(LPTOWERPLACE Tower_PlaceTower[], int numOfTower, LPMONSTERLIVE Monster_LiveMonster[], in




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  110


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +t numOfMonster)
    00001800              _Tower_Attack:                   ; function: Tower_Attack
                                                           ; frame size=100
                                                           ; used runtime library name:
                                                           ; __addd, __muld, __itod
    00001800 2FE6                   MOV.L       R14,@-R15
    00001802 2FD6                   MOV.L       R13,@-R15
    00001804 2FC6                   MOV.L       R12,@-R15
    00001806 2FB6                   MOV.L       R11,@-R15
    00001808 2FA6                   MOV.L       R10,@-R15
    0000180A 2F96                   MOV.L       R9,@-R15
    0000180C 2F86                   MOV.L       R8,@-R15
    0000180E 4F22                   STS.L       PR,@-R15
           Fun.c  2884    {
           Fun.c  2885        int i, j;
           Fun.c  2886        for (i = 0; i < numOfTower; i++)
    00001810 DD9C                   MOV.L       L1230,R13  ; _abs
    00001812 7FE0                   ADD         #-32,R15
    00001814 1F47                   MOV.L       R4,@(28,R15)
    00001816 1F56                   MOV.L       R5,@(24,R15)
    00001818 1F61                   MOV.L       R6,@(4,R15)
    0000181A 1F72                   MOV.L       R7,@(8,R15)
    0000181C A09D                   BRA         L1050
    0000181E E800                   MOV         #0,R8
    00001820              L1051:                            
    00001820 54F1                   MOV.L       @(4,R15),R4
    00001822 6E83                   MOV         R8,R14
    00001824 53F7                   MOV.L       @(28,R15),R3
           Fun.c  2887        {
           Fun.c  2888            for (j = 0; j < numOfMonster; j++)
    00001826 E900                   MOV         #0,R9
    00001828 52F2                   MOV.L       @(8,R15),R2
    0000182A 6B43                   MOV         R4,R11
    0000182C 6C43                   MOV         R4,R12
    0000182E 6A43                   MOV         R4,R10
    00001830 4E08                   SHLL2       R14
    00001832 4215                   CMP/PL      R2
    00001834 8D02                   BT/S        L1231
    00001836 3E3C                   ADD         R3,R14
    00001838 A08E                   BRA         L1052
    0000183A 0009                   NOP
    0000183C              L1231:                            
    0000183C              L1053:                            
           Fun.c  2889            {
           Fun.c  2890                if (abs(Tower_PlaceTower[i]->position->x - Monster_LiveMonster[j]->target_position->x) <= (Tow
                         +er_PlaceTower[i]->Place_Tower->Attack_Range / 2) && abs(Tower_PlaceTower[i]->position->y - Monster_LiveMon
                         +ster[j]->target_position->y) <= (Tower_PlaceTower[i]->Place_Tower->Attack_Range / 2))
    0000183C 64E2                   MOV.L       @R14,R4
    0000183E 6393                   MOV         R9,R3
    00001840 52F1                   MOV.L       @(4,R15),R2
    00001842 4308                   SHLL2       R3
    00001844 5441                   MOV.L       @(4,R4),R4
    00001846 332C                   ADD         R2,R3
    00001848 2F32                   MOV.L       R3,@R15
    0000184A 6132                   MOV.L       @R3,R1
    0000184C 6442                   MOV.L       @R4,R4
    0000184E 5212                   MOV.L       @(8,R1),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  111


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001850 6322                   MOV.L       @R2,R3
    00001852 4D0B                   JSR         @R13
    00001854 3438                   SUB         R3,R4
    00001856 62E2                   MOV.L       @R14,R2
    00001858 1F25                   MOV.L       R2,@(20,R15)
    0000185A 6322                   MOV.L       @R2,R3
    0000185C 5336                   MOV.L       @(24,R3),R3
    0000185E E200                   MOV         #0,R2
    00001860 3237                   CMP/GT      R3,R2
    00001862 332E                   ADDC        R2,R3
    00001864 4321                   SHAR        R3
    00001866 3037                   CMP/GT      R3,R0
    00001868 8929                   BT          L1054
    0000186A 54F5                   MOV.L       @(20,R15),R4
    0000186C 63F2                   MOV.L       @R15,R3
    0000186E 5441                   MOV.L       @(4,R4),R4
    00001870 6232                   MOV.L       @R3,R2
    00001872 5122                   MOV.L       @(8,R2),R1
    00001874 5441                   MOV.L       @(4,R4),R4
    00001876 5311                   MOV.L       @(4,R1),R3
    00001878 4D0B                   JSR         @R13
    0000187A 3438                   SUB         R3,R4
    0000187C 62E2                   MOV.L       @R14,R2
    0000187E 6322                   MOV.L       @R2,R3
    00001880 5336                   MOV.L       @(24,R3),R3
    00001882 E200                   MOV         #0,R2
    00001884 3237                   CMP/GT      R3,R2
    00001886 332E                   ADDC        R2,R3
    00001888 4321                   SHAR        R3
    0000188A 3037                   CMP/GT      R3,R0
    0000188C 8917                   BT          L1054
           Fun.c  2891                {
           Fun.c  2892                    Monster_LiveMonster[j]->Monster_Live->damage += Tower_PlaceTower[i]->Place_Tower->Attack *
                         + Tower_PlaceTower[i]->Place_Tower->Tower_Level;
    0000188E 62A2                   MOV.L       @R10,R2
    00001890 6322                   MOV.L       @R2,R3
    00001892 5135                   MOV.L       @(20,R3),R1
    00001894 2F16                   MOV.L       R1,@-R15
    00001896 5134                   MOV.L       @(16,R3),R1
    00001898 2F16                   MOV.L       R1,@-R15
    0000189A 7FF8                   ADD         #-8,R15
    0000189C D17A                   MOV.L       L1230+4,R1 ; __itod
    0000189E 64E2                   MOV.L       @R14,R4
    000018A0 1F48                   MOV.L       R4,@(32,R15)
    000018A2 6442                   MOV.L       @R4,R4
    000018A4 5243                   MOV.L       @(12,R4),R2
    000018A6 2F26                   MOV.L       R2,@-R15
    000018A8 5242                   MOV.L       @(8,R4),R2
    000018AA 2F26                   MOV.L       R2,@-R15
    000018AC 5041                   MOV.L       @(4,R4),R0
    000018AE 7FF8                   ADD         #-8,R15
    000018B0 410B                   JSR         @R1
    000018B2 2FF6                   MOV.L       R15,@-R15
    000018B4 62F3                   MOV         R15,R2
    000018B6 7210                   ADD         #16,R2
    000018B8 2F26                   MOV.L       R2,@-R15
           Fun.c  2893                    break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  112


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018BA A039                   BRA         L1145
    000018BC 0009                   NOP
    000018BE              L1054:                            
           Fun.c  2894                }
           Fun.c  2895                if (abs(Tower_PlaceTower[i]->position->x - Monster_LiveMonster[j]->position->x) <= (Tower_Plac
                         +eTower[i]->Place_Tower->Attack_Range / 2) && abs(Tower_PlaceTower[i]->position->y - Monster_LiveMonster[j]
                         +->position->y) <= (Tower_PlaceTower[i]->Place_Tower->Attack_Range / 2))
    000018BE 64E2                   MOV.L       @R14,R4
    000018C0 63C2                   MOV.L       @R12,R3
    000018C2 5441                   MOV.L       @(4,R4),R4
    000018C4 5231                   MOV.L       @(4,R3),R2
    000018C6 6322                   MOV.L       @R2,R3
    000018C8 6442                   MOV.L       @R4,R4
    000018CA 4D0B                   JSR         @R13
    000018CC 3438                   SUB         R3,R4
    000018CE 62E2                   MOV.L       @R14,R2
    000018D0 2F22                   MOV.L       R2,@R15
    000018D2 6322                   MOV.L       @R2,R3
    000018D4 5336                   MOV.L       @(24,R3),R3
    000018D6 E200                   MOV         #0,R2
    000018D8 3237                   CMP/GT      R3,R2
    000018DA 332E                   ADDC        R2,R3
    000018DC 4321                   SHAR        R3
    000018DE 3037                   CMP/GT      R3,R0
    000018E0 8931                   BT          L1056
    000018E2 64F2                   MOV.L       @R15,R4
    000018E4 63C2                   MOV.L       @R12,R3
    000018E6 5441                   MOV.L       @(4,R4),R4
    000018E8 5231                   MOV.L       @(4,R3),R2
    000018EA 5321                   MOV.L       @(4,R2),R3
    000018EC 5441                   MOV.L       @(4,R4),R4
    000018EE 4D0B                   JSR         @R13
    000018F0 3438                   SUB         R3,R4
    000018F2 62E2                   MOV.L       @R14,R2
    000018F4 6322                   MOV.L       @R2,R3
    000018F6 E200                   MOV         #0,R2
    000018F8 5336                   MOV.L       @(24,R3),R3
    000018FA 3237                   CMP/GT      R3,R2
    000018FC 332E                   ADDC        R2,R3
    000018FE 4321                   SHAR        R3
    00001900 3037                   CMP/GT      R3,R0
    00001902 8920                   BT          L1056
           Fun.c  2896                {
           Fun.c  2897                    Monster_LiveMonster[j]->Monster_Live->damage += Tower_PlaceTower[i]->Place_Tower->Attack *
                         + Tower_PlaceTower[i]->Place_Tower->Tower_Level;
    00001904 62B2                   MOV.L       @R11,R2
    00001906 6322                   MOV.L       @R2,R3
    00001908 5135                   MOV.L       @(20,R3),R1
    0000190A 2F16                   MOV.L       R1,@-R15
    0000190C 5134                   MOV.L       @(16,R3),R1
    0000190E 2F16                   MOV.L       R1,@-R15
    00001910 D15D                   MOV.L       L1230+4,R1 ; __itod
    00001912 7FF8                   ADD         #-8,R15
    00001914 64E2                   MOV.L       @R14,R4
    00001916 1F47                   MOV.L       R4,@(28,R15)
    00001918 6442                   MOV.L       @R4,R4
    0000191A 5243                   MOV.L       @(12,R4),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  113


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000191C 2F26                   MOV.L       R2,@-R15
    0000191E 5242                   MOV.L       @(8,R4),R2
    00001920 2F26                   MOV.L       R2,@-R15
    00001922 5041                   MOV.L       @(4,R4),R0
    00001924 7FF8                   ADD         #-8,R15
    00001926 410B                   JSR         @R1
    00001928 2FF6                   MOV.L       R15,@-R15
    0000192A 62F3                   MOV         R15,R2
    0000192C 7210                   ADD         #16,R2
    0000192E 2F26                   MOV.L       R2,@-R15
           Fun.c  2898                    break;
    00001930              L1145:                            
    00001930 D056                   MOV.L       L1230+8,R0 ; __muld
    00001932 400B                   JSR         @R0
    00001934 0009                   NOP
    00001936 6133                   MOV         R3,R1
    00001938 7110                   ADD         #16,R1
    0000193A 2F16                   MOV.L       R1,@-R15
    0000193C D154                   MOV.L       L1230+12,R1; __addd
    0000193E 410B                   JSR         @R1
    00001940 0009                   NOP
    00001942 A009                   BRA         L1052
    00001944 0009                   NOP
    00001946              L1056:                            
    00001946 7901                   ADD         #1,R9
    00001948 53F2                   MOV.L       @(8,R15),R3
    0000194A 7B04                   ADD         #4,R11
    0000194C 7C04                   ADD         #4,R12
    0000194E 3933                   CMP/GE      R3,R9
    00001950 8D02                   BT/S        L1232
    00001952 7A04                   ADD         #4,R10
    00001954 AF72                   BRA         L1053
    00001956 0009                   NOP
    00001958              L1232:                            
    00001958              L1052:                            
    00001958 7801                   ADD         #1,R8
    0000195A              L1050:                            
    0000195A 53F6                   MOV.L       @(24,R15),R3
    0000195C 3833                   CMP/GE      R3,R8
    0000195E 8901                   BT          L1233
    00001960 AF5E                   BRA         L1051
    00001962 0009                   NOP
    00001964              L1233:                            
           Fun.c  2899                }
           Fun.c  2900            }
           Fun.c  2901        }
           Fun.c  2902    }
    00001964 7F20                   ADD         #32,R15
    00001966 4F26                   LDS.L       @R15+,PR
    00001968 68F6                   MOV.L       @R15+,R8
    0000196A 69F6                   MOV.L       @R15+,R9
    0000196C 6AF6                   MOV.L       @R15+,R10
    0000196E 6BF6                   MOV.L       @R15+,R11
    00001970 6CF6                   MOV.L       @R15+,R12
    00001972 6DF6                   MOV.L       @R15+,R13
    00001974 000B                   RTS
    00001976 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  114


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Fun.c  2903    
           Fun.c  2904    int free_Tower(LPTOWERPLACE Tower_PlaceTower[], int *numOfTower, int needFree_index)
    00001978              _free_Tower:                     ; function: free_Tower
                                                           ; frame size=16
    00001978 2FE6                   MOV.L       R14,@-R15
    0000197A 6E53                   MOV         R5,R14
    0000197C 2FD6                   MOV.L       R13,@-R15
    0000197E 2FC6                   MOV.L       R12,@-R15
    00001980 4F22                   STS.L       PR,@-R15
           Fun.c  2905    {
           Fun.c  2906        int i;
           Fun.c  2907        LPTOWERPLACE Tower_temp;
           Fun.c  2908    
           Fun.c  2909        if (needFree_index >= *numOfTower)
    00001982 63E2                   MOV.L       @R14,R3
    00001984 3633                   CMP/GE      R3,R6
    00001986 8B01                   BF          L1057
           Fun.c  2910        {
           Fun.c  2911            return 0;
    00001988 A01D                   BRA         L1058
    0000198A E000                   MOV         #0,R0
    0000198C              L1057:                            
           Fun.c  2912        }
           Fun.c  2913        Tower_temp = Tower_PlaceTower[needFree_index];
           Fun.c  2914        if (needFree_index != *numOfTower - 1)
    0000198C 63E2                   MOV.L       @R14,R3
    0000198E 6063                   MOV         R6,R0
    00001990 4008                   SHLL2       R0
    00001992 73FF                   ADD         #-1,R3
    00001994 3630                   CMP/EQ      R3,R6
    00001996 8D0B                   BT/S        L1059
    00001998 0D4E                   MOV.L       @(R0,R4),R13
           Fun.c  2915        {
           Fun.c  2916            for (i = needFree_index; i  < *numOfTower; i++)
    0000199A A006                   BRA         L1060
    0000199C 6563                   MOV         R6,R5
    0000199E              L1061:                            
           Fun.c  2917            {
           Fun.c  2918                Tower_PlaceTower[i] = Tower_PlaceTower[i + 1];
    0000199E 6653                   MOV         R5,R6
    000019A0 4608                   SHLL2       R6
    000019A2 364C                   ADD         R4,R6
    000019A4 5361                   MOV.L       @(4,R6),R3
    000019A6 7501                   ADD         #1,R5
    000019A8 2632                   MOV.L       R3,@R6
    000019AA              L1060:                            
    000019AA 62E2                   MOV.L       @R14,R2
    000019AC 3523                   CMP/GE      R2,R5
    000019AE 8BF6                   BF          L1061
    000019B0              L1059:                            
           Fun.c  2919            }
           Fun.c  2920        }
           Fun.c  2921        free(Tower_temp->Place_Tower);
    000019B0 DC38                   MOV.L       L1230+16,R12; _free
    000019B2 4C0B                   JSR         @R12
    000019B4 64D2                   MOV.L       @R13,R4
           Fun.c  2922        free(Tower_temp->position);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  115


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019B6 4C0B                   JSR         @R12
    000019B8 54D1                   MOV.L       @(4,R13),R4
           Fun.c  2923        free(Tower_temp);
    000019BA 4C0B                   JSR         @R12
    000019BC 64D3                   MOV         R13,R4
           Fun.c  2924        *numOfTower -= 1;
           Fun.c  2925        return 1;
    000019BE E001                   MOV         #1,R0
    000019C0 62E2                   MOV.L       @R14,R2
    000019C2 72FF                   ADD         #-1,R2
    000019C4 2E22                   MOV.L       R2,@R14
           Fun.c  2926    }
    000019C6              L1058:                            
    000019C6 4F26                   LDS.L       @R15+,PR
    000019C8 6CF6                   MOV.L       @R15+,R12
    000019CA 6DF6                   MOV.L       @R15+,R13
    000019CC 000B                   RTS
    000019CE 6EF6                   MOV.L       @R15+,R14
           Fun.c  2927    int free_Monster(LPMONSTERLIVE Monster_LiveMonster[], int *numOfMonster, int needFree_index)
    000019D0              _free_Monster:                   ; function: free_Monster
                                                           ; frame size=16
    000019D0 2FE6                   MOV.L       R14,@-R15
    000019D2 6E53                   MOV         R5,R14
    000019D4 2FD6                   MOV.L       R13,@-R15
    000019D6 2FC6                   MOV.L       R12,@-R15
    000019D8 4F22                   STS.L       PR,@-R15
           Fun.c  2928    {
           Fun.c  2929        int i;
           Fun.c  2930        LPMONSTERLIVE Monster_temp;
           Fun.c  2931    
           Fun.c  2932        if (needFree_index >= *numOfMonster)
    000019DA 63E2                   MOV.L       @R14,R3
    000019DC 3633                   CMP/GE      R3,R6
    000019DE 8B01                   BF          L1062
           Fun.c  2933        {
           Fun.c  2934            return 0;
    000019E0 A01F                   BRA         L1063
    000019E2 E000                   MOV         #0,R0
    000019E4              L1062:                            
           Fun.c  2935        }
           Fun.c  2936        Monster_temp = Monster_LiveMonster[needFree_index];
           Fun.c  2937        if (needFree_index != *numOfMonster - 1)
    000019E4 63E2                   MOV.L       @R14,R3
    000019E6 6063                   MOV         R6,R0
    000019E8 4008                   SHLL2       R0
    000019EA 73FF                   ADD         #-1,R3
    000019EC 3630                   CMP/EQ      R3,R6
    000019EE 8D0B                   BT/S        L1064
    000019F0 0D4E                   MOV.L       @(R0,R4),R13
           Fun.c  2938        {
           Fun.c  2939            for (i = needFree_index; i  < *numOfMonster; i++)
    000019F2 A006                   BRA         L1065
    000019F4 6563                   MOV         R6,R5
    000019F6              L1066:                            
           Fun.c  2940            {
           Fun.c  2941                Monster_LiveMonster[i] = Monster_LiveMonster[i + 1];
    000019F6 6653                   MOV         R5,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  116


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019F8 4608                   SHLL2       R6
    000019FA 364C                   ADD         R4,R6
    000019FC 5361                   MOV.L       @(4,R6),R3
    000019FE 7501                   ADD         #1,R5
    00001A00 2632                   MOV.L       R3,@R6
    00001A02              L1065:                            
    00001A02 62E2                   MOV.L       @R14,R2
    00001A04 3523                   CMP/GE      R2,R5
    00001A06 8BF6                   BF          L1066
    00001A08              L1064:                            
           Fun.c  2942            }
           Fun.c  2943        }
           Fun.c  2944        free(Monster_temp->Monster_Live);
    00001A08 DC22                   MOV.L       L1230+16,R12; _free
    00001A0A 4C0B                   JSR         @R12
    00001A0C 64D2                   MOV.L       @R13,R4
           Fun.c  2945        free(Monster_temp->position);
    00001A0E 4C0B                   JSR         @R12
    00001A10 54D1                   MOV.L       @(4,R13),R4
           Fun.c  2946        free(Monster_temp->target_position);
    00001A12 4C0B                   JSR         @R12
    00001A14 54D2                   MOV.L       @(8,R13),R4
           Fun.c  2947        free(Monster_temp);
    00001A16 4C0B                   JSR         @R12
    00001A18 64D3                   MOV         R13,R4
           Fun.c  2948        *numOfMonster -= 1;
           Fun.c  2949        return 1;
    00001A1A E001                   MOV         #1,R0
    00001A1C 62E2                   MOV.L       @R14,R2
    00001A1E 72FF                   ADD         #-1,R2
    00001A20 2E22                   MOV.L       R2,@R14
           Fun.c  2950    }
    00001A22              L1063:                            
    00001A22 4F26                   LDS.L       @R15+,PR
    00001A24 6CF6                   MOV.L       @R15+,R12
    00001A26 6DF6                   MOV.L       @R15+,R13
    00001A28 000B                   RTS
    00001A2A 6EF6                   MOV.L       @R15+,R14
           Fun.c  2951    
           Fun.c  2952    char GetNumber(unsigned int key)
    00001A2C              _GetNumber:                      ; function: GetNumber
                                                           ; frame size=0
           Fun.c  2953    {
           Fun.c  2954        switch (key)
    00001A2C 6043                   MOV         R4,R0
    00001A2E 8830                   CMP/EQ      #48,R0
    00001A30 8913                   BT          L862
    00001A32 8831                   CMP/EQ      #49,R0
    00001A34 8913                   BT          L863
    00001A36 8832                   CMP/EQ      #50,R0
    00001A38 8913                   BT          L864
    00001A3A 8833                   CMP/EQ      #51,R0
    00001A3C 8913                   BT          L865
    00001A3E 8834                   CMP/EQ      #52,R0
    00001A40 8913                   BT          L866
    00001A42 8835                   CMP/EQ      #53,R0
    00001A44 8913                   BT          L867




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  117


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A46 8836                   CMP/EQ      #54,R0
    00001A48 8913                   BT          L868
    00001A4A 8837                   CMP/EQ      #55,R0
    00001A4C 8913                   BT          L869
    00001A4E 8838                   CMP/EQ      #56,R0
    00001A50 8913                   BT          L870
    00001A52 8839                   CMP/EQ      #57,R0
    00001A54 8913                   BT          L871
    00001A56 A013                   BRA         L1068
    00001A58 0009                   NOP
    00001A5A              L862:                            ; case label 
           Fun.c  2955        {
           Fun.c  2956        case KEY_CHAR_0:
           Fun.c  2957            return '0';
    00001A5A 000B                   RTS
    00001A5C E030                   MOV         #48,R0
    00001A5E              L863:                            ; case label 
           Fun.c  2958    
           Fun.c  2959        case KEY_CHAR_1:
           Fun.c  2960            return '1';
    00001A5E 000B                   RTS
    00001A60 E031                   MOV         #49,R0
    00001A62              L864:                            ; case label 
           Fun.c  2961    
           Fun.c  2962        case KEY_CHAR_2:
           Fun.c  2963            return '2';
    00001A62 000B                   RTS
    00001A64 E032                   MOV         #50,R0
    00001A66              L865:                            ; case label 
           Fun.c  2964    
           Fun.c  2965        case KEY_CHAR_3:
           Fun.c  2966            return '3';
    00001A66 000B                   RTS
    00001A68 E033                   MOV         #51,R0
    00001A6A              L866:                            ; case label 
           Fun.c  2967    
           Fun.c  2968        case KEY_CHAR_4:
           Fun.c  2969            return '4';
    00001A6A 000B                   RTS
    00001A6C E034                   MOV         #52,R0
    00001A6E              L867:                            ; case label 
           Fun.c  2970    
           Fun.c  2971        case KEY_CHAR_5:
           Fun.c  2972            return '5';
    00001A6E 000B                   RTS
    00001A70 E035                   MOV         #53,R0
    00001A72              L868:                            ; case label 
           Fun.c  2973    
           Fun.c  2974        case KEY_CHAR_6:
           Fun.c  2975            return '6';
    00001A72 000B                   RTS
    00001A74 E036                   MOV         #54,R0
    00001A76              L869:                            ; case label 
           Fun.c  2976    
           Fun.c  2977        case KEY_CHAR_7:
           Fun.c  2978            return '7';
    00001A76 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  118


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A78 E037                   MOV         #55,R0
    00001A7A              L870:                            ; case label 
           Fun.c  2979    
           Fun.c  2980        case KEY_CHAR_8:
           Fun.c  2981            return '8';
    00001A7A 000B                   RTS
    00001A7C E038                   MOV         #56,R0
    00001A7E              L871:                            ; case label 
           Fun.c  2982    
           Fun.c  2983        case KEY_CHAR_9:
           Fun.c  2984            return '9';
    00001A7E E039                   MOV         #57,R0
           Fun.c  2985        }
           Fun.c  2986    }
    00001A80              L1068:                            
    00001A80 000B                   RTS
    00001A82 0009                   NOP
    00001A84              L1230:                            
    00001A84 <00000000>             .DATA.L     _abs
    00001A88 <00000000>             .DATA.L     __itod
    00001A8C <00000000>             .DATA.L     __muld
    00001A90 <00000000>             .DATA.L     __addd
    00001A94 <00000000>             .DATA.L     _free
C   00000000              _SysCallWrapper:                 ; static: SysCallWrapper
    00000000 D201422B60             .DATA.L     H'D201422B,H'60F20000,H'80010070
             F200008001   
             0070         
    0000000C              _POINT:                          ; static: POINT
    0000000C 80                     .DATA.B     H'80
    0000000D              _cursor_graph_:                  ; static: cursor_graph_
    0000000D F0C0808181             .DATA.B     H'F0,H'C0,H'80,H'81,H'81,H'01,H'03,H'0F
             01030F       
    00000015              _spawn_door_graph_:              ; static: spawn_door_graph_
    00000015 FFFFBFFDC0             .DATA.B     H'FF,H'FF,H'BF,H'FD,H'C0,H'03,H'E0,H'07,H'EE,H'77,H'DE,H'7B,H'80,H'01,H'EF,H'F7,
             03E007EE77 +                       H'EF,H'F7,H'EF,H'F7,H'CF,H'F3,H'CF,H'F3,H'CF,H'F3,H'CF,H'F3,H'9F,H'F9,H'FF,H'FF
             DE7B8001EF   
             F7EFF7EFF7   
             CFF3CFF3CF   
             F3CFF39FF9   
             FFFF         
    00000035              _base_graph_:                    ; static: base_graph_
    00000035 00003FFC7C             .DATA.B     H'00,H'00,H'3F,H'FC,H'7C,H'1E,H'79,H'CE,H'73,H'C6,H'76,H'E6,H'76,H'E6,H'76,H'E6,
             1E79CE73C6 +                       H'75,H'66,H'75,H'66,H'76,H'E6,H'76,H'E6,H'76,H'E6,H'77,H'E6,H'3F,H'FC,H'00,H'00
             76E676E676   
             E675667566   
             76E676E676   
             E677E63FFC   
             0000         
    00000055              _check_point_1_graph_:           ; static: check_point_1_graph_
    00000055 00007FFE5F             .DATA.B     H'00,H'00,H'7F,H'FE,H'5F,H'FA,H'7E,H'7E,H'7C,H'7E,H'78,H'7E,H'7E,H'7E,H'7E,H'7E,
             FA7E7E7C7E +                       H'7E,H'7E,H'7E,H'7E,H'7E,H'7E,H'7E,H'7E,H'7F,H'FE,H'5F,H'FA,H'7F,H'FE,H'00,H'00
             787E7E7E7E   
             7E7E7E7E7E   
             7E7E7E7E7F   
             FE5FFA7FFE   
             0000         
    00000075              _check_point_2_graph_:           ; static: check_point_2_graph_




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  119


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000075 00007FFE5F             .DATA.B     H'00,H'00,H'7F,H'FE,H'5F,H'FA,H'78,H'1E,H'78,H'1E,H'7F,H'9E,H'7F,H'9E,H'78,H'1E,
             FA781E781E +                       H'78,H'1E,H'79,H'FE,H'79,H'FE,H'78,H'1E,H'78,H'1E,H'5F,H'FA,H'7F,H'FE,H'00,H'00
             7F9E7F9E78   
             1E781E79FE   
             79FE781E78   
             1E5FFA7FFE   
             0000         
    00000095              _check_point_3_graph_:           ; static: check_point_3_graph_
    00000095 00007FFE5F             .DATA.B     H'00,H'00,H'7F,H'FE,H'5F,H'FA,H'78,H'1E,H'78,H'1E,H'7F,H'9E,H'7F,H'9E,H'78,H'1E,
             FA781E781E +                       H'78,H'1E,H'7F,H'9E,H'7F,H'9E,H'78,H'1E,H'78,H'1E,H'5F,H'FA,H'7F,H'FE,H'00,H'00
             7F9E7F9E78   
             1E781E7F9E   
             7F9E781E78   
             1E5FFA7FFE   
             0000         
    000000B5              _check_point_4_graph_:           ; static: check_point_4_graph_
    000000B5 00007FFE5F             .DATA.B     H'00,H'00,H'7F,H'FE,H'5F,H'FA,H'79,H'9E,H'79,H'9E,H'79,H'9E,H'79,H'9E,H'78,H'1E,
             FA799E799E +                       H'78,H'1E,H'7F,H'9E,H'7F,H'9E,H'7F,H'9E,H'7F,H'9E,H'5F,H'FA,H'7F,H'FE,H'00,H'00
             799E799E78   
             1E781E7F9E   
             7F9E7F9E7F   
             9E5FFA7FFE   
             0000         
    000000D5              _check_point_5_graph_:           ; static: check_point_5_graph_
    000000D5 00007FFE5F             .DATA.B     H'00,H'00,H'7F,H'FE,H'5F,H'FA,H'78,H'1E,H'78,H'1E,H'79,H'FE,H'79,H'FE,H'78,H'1E,
             FA781E781E +                       H'78,H'1E,H'7F,H'9E,H'7F,H'9E,H'78,H'1E,H'78,H'1E,H'5F,H'FA,H'7F,H'FE,H'00,H'00
             79FE79FE78   
             1E781E7F9E   
             7F9E781E78   
             1E5FFA7FFE   
             0000         
    000000F5              _Wall_graph_:                    ; static: Wall_graph_
    000000F5 000077F677             .DATA.B     H'00,H'00,H'77,H'F6,H'77,H'F6,H'00,H'00,H'7E,H'FE,H'7E,H'FE,H'00,H'00,H'77,H'F6,
             F600007EFE +                       H'77,H'F6,H'00,H'00,H'7D,H'FE,H'7D,H'FE,H'00,H'00,H'77,H'F6,H'77,H'F6,H'00,H'00
             7EFE000077   
             F677F60000   
             7DFE7DFE00   
             0077F677F6   
             0000         
    00000115              _Tile_Default_graph_:            ; static: Tile_Default_graph_
    00000115 0000124824             .DATA.B     H'00,H'00,H'12,H'48,H'24,H'92,H'49,H'24,H'12,H'48,H'24,H'92,H'49,H'24,H'12,H'48,
             9249241248 +                       H'24,H'92,H'49,H'24,H'12,H'48,H'24,H'92,H'49,H'24,H'12,H'48,H'24,H'92,H'00,H'00
             2492492412   
             4824924924   
             1248249249   
             2412482492   
             0000         
    00000135              _Tower_Default_graph_:           ; static: Tower_Default_graph_
    00000135 000041C0A1             .DATA.B     H'00,H'00,H'41,H'C0,H'A1,H'40,H'A7,H'F0,H'4F,H'F8,H'0F,H'F8,H'0F,H'F8,H'06,H'10,
             40A7F04FF8 +                       H'07,H'B0,H'06,H'10,H'06,H'D0,H'06,H'10,H'07,H'F0,H'0F,H'F8,H'1F,H'FC,H'3F,H'FE
             0FF80FF806   
             1007B00610   
             06D0061007   
             F00FF81FFC   
             3FFE         
    00000155              _Tower_1_graph_:                 ; static: Tower_1_graph_
    00000155 00004000A1             .DATA.B     H'00,H'00,H'40,H'00,H'A1,H'E0,H'A1,H'20,H'47,H'38,H'03,H'F0,H'02,H'10,H'02,H'B0,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  120


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             E0A1204738 +                       H'02,H'10,H'02,H'50,H'07,H'F8,H'07,H'F8,H'01,H'E0,H'00,H'C0,H'00,H'C0,H'00,H'00
             03F0021002   
             B002100250   
             07F807F801   
             E000C000C0   
             0000         
    00000175              _Tower_2_graph_:                 ; static: Tower_2_graph_
    00000175 03E04410A4             .DATA.B     H'03,H'E0,H'44,H'10,H'A4,H'10,H'A4,H'10,H'44,H'10,H'07,H'F0,H'04,H'10,H'0C,H'10,
             10A4104410 +                       H'0D,H'58,H'0D,H'48,H'04,H'08,H'04,H'48,H'07,H'F8,H'0F,H'FC,H'1F,H'FE,H'00,H'00
             07F004100C   
             100D580D48   
             0408044807   
             F80FFC1FFE   
             0000         
    00000195              _Tower_3_graph_:                 ; static: Tower_3_graph_
    00000195 000041C0A1             .DATA.B     H'00,H'00,H'41,H'C0,H'A1,H'40,H'A3,H'E0,H'47,H'F0,H'08,H'08,H'10,H'04,H'22,H'12,
             40A3E047F0 +                       H'22,H'12,H'22,H'12,H'20,H'02,H'10,H'C4,H'08,H'08,H'07,H'F0,H'03,H'E0,H'01,H'C0
             0808100422   
             1222122212   
             200210C408   
             0807F003E0   
             01C0         
    000001B5              _Tower_4_graph_:                 ; static: Tower_4_graph_
    000001B5 00C041E0A3             .DATA.B     H'00,H'C0,H'41,H'E0,H'A3,H'F0,H'A4,H'08,H'44,H'08,H'0D,H'BC,H'0C,H'0C,H'0C,H'4C,
             F0A4084408 +                       H'04,H'08,H'04,H'08,H'04,H'08,H'02,H'10,H'01,H'E0,H'07,H'F8,H'0F,H'FC,H'00,H'00
             0DBC0C0C0C   
             4C04080408   
             0408021001   
             E007F80FFC   
             0000         
    000001D5              _MainMenu_graph_:                ; static: MainMenu_graph_
    000001D5 FFFFFFFFFF             .DATA.B     H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,
             FFFFFFFFFF +                       H'80,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             FFFFFFFFFF +                       H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FF80000000 +                       H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             0000000000 +                       H'BC,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'7D,
             0000000000 +                       H'BD,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'3D,
             0001BFFFFF +                       H'BD,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'BD,
             FFFFFFFFFF +                       H'BD,H'00,H'E0,H'1F,H'C3,H'1C,H'7F,H'8F,H'F1,H'FC,H'38,H'C7,H'F8,H'FE,H'01,H'BD,
             FFFFFFFFFF +                       H'BD,H'00,H'E0,H'1F,H'C3,H'1C,H'7C,H'8F,H'F1,H'CC,H'38,H'C4,H'F8,H'FE,H'01,H'BD,
             FFFFFDBFFF +                       H'BD,H'00,H'E0,H'1F,H'C3,H'9C,H'7C,H'8F,H'01,H'CC,H'39,H'C4,H'F8,H'9F,H'01,H'BD,
             FFFFFFFFFF +                       H'BD,H'00,H'E0,H'18,H'C3,H'DC,H'7F,H'8F,H'F1,H'FC,H'3B,H'C7,H'F8,H'9F,H'01,H'BD,
             FFFFFFFFFF +                       H'BD,H'00,H'E0,H'18,H'C3,H'FC,H'7F,H'8F,H'F1,H'FC,H'3F,H'C7,H'F8,H'FF,H'01,H'BD,
             FFFFFFFDBC +                       H'BD,H'00,H'E0,H'1F,H'E3,H'7C,H'1C,H'0F,H'F1,H'FC,H'3E,H'C0,H'E0,H'FF,H'01,H'BD,
             0000000000 +                       H'BD,H'00,H'E0,H'1F
             0000000000   
             000000007D   
             BDFFFFFFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   
             3DBD000000   
             0000000000   
             0000000000   
             01BDBD00E0   
             1FC31C7F8F   
             F1FC38C7F8   
             FE01BDBD00   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  121


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             E01FC31C7C   
             8FF1CC38C4   
             F8FE01BDBD   
             00E01FC39C   
             7C8F01CC39   
             C4F89F01BD   
             BD00E018C3   
             DC7F8FF1FC   
             3BC7F89F01   
             BDBD00E018   
             C3FC7F8FF1   
             FC3FC7F8FF   
             01BDBD00E0   
             1FE37C1C0F   
             F1FC3EC0E0   
             FF01BDBD00   
             E01F         
    000002A9 E33C1C0F01             .DATA.B     H'E3,H'3C,H'1C,H'0F,H'01,H'FC,H'3C,H'C0,H'E0,H'FF,H'01,H'BD,H'BD,H'00,H'FF,H'1F,
             FC3CC0E0FF +                       H'E3,H'3C,H'1C,H'0F,H'F1,H'CE,H'3C,H'C0,H'E0,H'FF,H'01,H'BD,H'BD,H'00,H'9F,H'1F,
             01BDBD00FF +                       H'E3,H'1C,H'1C,H'0F,H'F1,H'CE,H'38,H'C0,H'E0,H'FF,H'01,H'BD,H'BD,H'00,H'9F,H'18,
             1FE33C1C0F +                       H'63,H'1C,H'1C,H'0F,H'F1,H'CE,H'38,H'C0,H'E0,H'FF,H'01,H'BD,H'BD,H'00,H'FF,H'18,
             F1CE3CC0E0 +                       H'63,H'1C,H'1C,H'0F,H'F1,H'CE,H'38,H'C0,H'E0,H'FE,H'01,H'BD,H'BD,H'00,H'00,H'00,
             FF01BDBD00 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'BD,H'BD,H'00,H'00,H'00,
             9F1FE31C1C +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,H'BD,H'BD,H'FF,H'FF,H'FF,
             0FF1CE38C0 +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'BD,H'BC,H'FF,H'FF,H'FF,
             E0FF01BDBD +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'BD,H'BE,H'00,H'00,H'00,
             009F18631C +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'3D,H'BF,H'FF,H'FF,H'FF,
             1C0FF1CE38 +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,
             C0E0FF01BD +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,
             BD00FF1863 +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,
             1C1C0FF1CE +                       H'FF,H'FF,H'FF,H'FF
             38C0E0FE01   
             BDBD000000   
             0000000000   
             0000000000   
             01BDBD0000   
             0000000000   
             0000000000   
             0001BDBDFF   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFFFFBDBC   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFFFFFFBD   
             BE00000000   
             0000000000   
             0000000000   
             3DBFFFFFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFDBFFFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFFFDBFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  122


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             FFFFFFFDBF   
             FFFFFFFFFF   
             FFFF         
    0000037D FFFFFFFFFF             .DATA.B     H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,
             FFFFFDBFFF +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,
             FFFFFFFFFF +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,
             FFFFFFFFFF +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,
             FFFFFFFDBF +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'F0,H'00,H'00,
             FFFFFFFFFF +                       H'00,H'00,H'0F,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'EF,H'FF,H'FF,
             FFFFFFFFFF +                       H'FF,H'FF,H'F7,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'E8,H'00,H'00,
             FFFFFFFFFD +                       H'00,H'00,H'17,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'EB,H'B9,H'33,
             BFFFFFFFFF +                       H'88,H'95,H'D7,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'EB,H'12,H'A9,
             FFFFFFFFFF +                       H'11,H'5D,H'17,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'E9,H'93,H'B1,
             FFFFFFFFFF +                       H'15,H'D5,H'97,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'EB,H'92,H'A9,
             FDBFFFFFFF +                       H'0D,H'55,H'D7,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'E8,H'00,H'00,
             FFFFFFFFFF +                       H'00,H'00,H'17,H'FF,H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'EF,H'FF,H'FF,
             FFFFFFFFFF +                       H'FF,H'FF,H'F7,H'FF
             FFFDBFFFFF   
             FFFFF00000   
             00000FFFFF   
             FFFFFDBFFF   
             FFFFFFEFFF   
             FFFFFFF7FF   
             FFFFFFFDBF   
             FFFFFFFFE8   
             0000000017   
             FFFFFFFFFD   
             BFFFFFFFFF   
             EBB9338895   
             D7FFFFFFFF   
             FDBFFFFFFF   
             FFEB12A911   
             5D17FFFFFF   
             FFFDBFFFFF   
             FFFFE993B1   
             15D597FFFF   
             FFFFFDBFFF   
             FFFFFFEB92   
             A90D55D7FF   
             FFFFFFFDBF   
             FFFFFFFFE8   
             0000000017   
             FFFFFFFFFD   
             BFFFFFFFFF   
             EFFFFFFFFF   
             F7FF         
    00000451 FFFFFFFDBF             .DATA.B     H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'F0,H'00,H'00,H'00,H'00,H'0F,H'FF,
             FFFFFFFFF0 +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,
             000000000F +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'EE,H'FF,H'FF,H'FF,
             FFFFFFFFFD +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,H'FF,H'DB,H'7F,H'FF,H'FF,
             BFFFFFFFFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'BF,H'A5,H'BF,H'FF,H'FF,
             FFFFFFFFFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FB,H'FF,H'42,H'DF,H'FF,H'FF,
             FFFFFFFFFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'7E,H'FF,H'EF,H'FF,H'FF,
             FDBFFFFFFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'F9,H'CF,H'56,H'DF,H'FF,H'FF,
             FFFFFFFFEE +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FA,H'2F,H'56,H'DF,H'FF,H'FF,
             FFFFFFFFFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'E3,H'EF,H'5F,H'DF,H'FF,H'FF,
             FFFDBFFFFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'EA,H'AF,H'40,H'5F,H'FF,H'FF,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  123


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             FFFFFFFDFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'EB,H'EF,H'46,H'5F,H'FF,H'FF,
             DB7FFFFFFF +                       H'FF,H'FF,H'FF,H'FD,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'E3,H'EF,H'40,H'5F,H'FF,H'FF,
             FFFFFDBFFF +                       H'FF,H'FF,H'FF,H'FD
             FFFFFFFFFF   
             BFA5BFFFFF   
             FFFFFFFDBF   
             FFFFFFFFFF   
             FBFF42DFFF   
             FFFFFFFFFD   
             BFFFFFFFFF   
             FFFF7EFFEF   
             FFFFFFFFFF   
             FDBFFFFFFF   
             FFFFF9CF56   
             DFFFFFFFFF   
             FFFDBFFFFF   
             FFFFFFFA2F   
             56DFFFFFFF   
             FFFFFDBFFF   
             FFFFFFFFE3   
             EF5FDFFFFF   
             FFFFFFFDBF   
             FFFFFFFFFF   
             EAAF405FFF   
             FFFFFFFFFD   
             BFFFFFFFFF   
             FFEBEF465F   
             FFFFFFFFFF   
             FDBFFFFFFF   
             FFFFE3EF40   
             5FFFFFFFFF   
             FFFD         
    00000525 9FFFFFFFFF             .DATA.B     H'9F,H'FF,H'FF,H'FF,H'FF,H'FF,H'F9,H'CE,H'FF,H'CF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FFF9CEFFCF +                       H'AF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FE,H'3D,H'6B,H'E7,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FFFFFFFFFF +                       H'97,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FA,H'D7,H'F3,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FDAFFFFFFF +                       H'AB,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FFFFFE3D6B +                       H'95,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             E7FFFFFFFF +                       H'AA,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FFFD97FFFF +                       H'95,H'7F,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FFFFFFFFFA +                       H'AA,H'BF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             D7F3FFFFFF +                       H'95,H'5F,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FD,
             FFFFFDABFF +                       H'80,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'01,
             FFFFFFFFFF +                       H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF,H'FF
             FFFFFFFFFF   
             FFFFFFFD95   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFFFFFFFD   
             AAFFFFFFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FD957FFFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFDAABFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  124


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             FFFFFD955F   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFFFFFD80   
             0000000000   
             0000000000   
             0000000001   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FFFFFFFFFF   
             FF           
    000005D5              _Button_1_graph_:                ; static: Button_1_graph_
    000005D5 FEFFC0FD7F             .DATA.B     H'FE,H'FF,H'C0,H'FD,H'7F,H'C0,H'FB,H'BF,H'C0,H'F7,H'7F,H'C0,H'EA,H'BF,H'C0,H'F5,
             C0FBBFC0F7 +                       H'5F,H'80,H'FB,H'AF,H'00,H'FF,H'CE,H'00
             7FC0EABFC0   
             F55F80FBAF   
             00FFCE00     
    000005ED              _Button_2_graph_:                ; static: Button_2_graph_
    000005ED FFFFC0BB31             .DATA.B     H'FF,H'FF,H'C0,H'BB,H'31,H'C0,H'92,H'D6,H'C0,H'AA,H'11,H'C0,H'BA,H'D7,H'C0,H'BA,
             C092D6C0AA +                       H'D7,H'80,H'FF,H'FF,H'00,H'FF,H'FE,H'00
             11C0BAD7C0   
             BAD780FFFF   
             00FFFE00     
    00000605              _Button_3_graph_:                ; static: Button_3_graph_
    00000605 FFFFC01574             .DATA.B     H'FF,H'FF,H'C0,H'15,H'74,H'40,H'B5,H'25,H'40,H'B5,H'54,H'40,H'B5,H'55,H'C0,H'31,
             40B52540B5 +                       H'75,H'80,H'FF,H'FF,H'00,H'FF,H'FE,H'00
             5440B555C0   
             317580FFFF   
             00FFFE00     
    0000061D              _Button_4_graph_:                ; static: Button_4_graph_
    0000061D FFFFC0B444             .DATA.B     H'FF,H'FF,H'C0,H'B4,H'44,H'40,H'AD,H'DD,H'40,H'9C,H'CC,H'40,H'AD,H'DD,H'C0,H'B4,
             40ADDD409C +                       H'45,H'80,H'FF,H'FF,H'00,H'FF,H'FE,H'00
             CC40ADDDC0   
             B44580FFFF   
             00FFFE00     
    00000635              _Button_5_graph_:                ; static: Button_5_graph_
    00000635 FFFFC088D8             .DATA.B     H'FF,H'FF,H'C0,H'88,H'D8,H'C0,H'BD,H'AD,H'C0,H'8D,H'AD,H'C0,H'ED,H'8D,H'C0,H'8D,
             C0BDADC08D +                       H'AD,H'80,H'FF,H'FF,H'00,H'FF,H'FE,H'00
             ADC0ED8DC0   
             8DAD80FFFF   
             00FFFE00     
    0000064D              _monster_1_graph_:               ; static: monster_1_graph_
    0000064D 100819985B             .DATA.B     H'10,H'08,H'19,H'98,H'5B,H'DA,H'2F,H'F4,H'6B,H'D6,H'6D,H'B6,H'F7,H'EF,H'DB,H'DB,
             DA2FF46BD6 +                       H'BC,H'3D,H'37,H'EC,H'67,H'E6,H'73,H'CE,H'46,H'62,H'0C,H'30,H'1C,H'38,H'14,H'28
             6DB6F7EFDB   
             DBBC3D37EC   
             67E673CE46   
             620C301C38   
             1428         
    0000066D              _Monster_2_graph_:               ; static: Monster_2_graph_
    0000066D 0010007E00             .DATA.B     H'00,H'10,H'00,H'7E,H'00,H'EE,H'00,H'FE,H'01,H'FE,H'21,H'EA,H'11,H'F0,H'21,H'FC,
             EE00FE01FE +                       H'11,H'E0,H'10,H'F0,H'20,H'7C,H'20,H'1E,H'3D,H'EE,H'1F,H'FC,H'07,H'F0,H'00,H'00
             21EA11F021   
             FC11E010F0   
             207C201E3D   
             EE1FFC07F0   
             0000         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  125


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000068D              _Monster_3_graph_:               ; static: Monster_3_graph_
    0000068D 000007700D             .DATA.B     H'00,H'00,H'07,H'70,H'0D,H'D8,H'0D,H'D8,H'0D,H'D8,H'0F,H'FC,H'0E,H'3C,H'0F,H'FC,
             D80DD80DD8 +                       H'07,H'F8,H'00,H'00,H'03,H'F0,H'00,H'08,H'0B,H'F0,H'02,H'10,H'00,H'00,H'00,H'00
             0FFC0E3C0F   
             FC07F80000   
             03F000080B   
             F002100000   
             0000         
    000006AD              _Monster_4_graph_:               ; static: Monster_4_graph_
    000006AD 00001C1C03             .DATA.B     H'00,H'00,H'1C,H'1C,H'03,H'E0,H'07,H'F8,H'3C,H'CC,H'1F,H'F8,H'1F,H'F8,H'1F,H'F8,
             E007F83CCC +                       H'05,H'50,H'00,H'04,H'1D,H'FC,H'1D,H'FC,H'1F,H'F8,H'17,H'F8,H'04,H'10,H'00,H'00
             1FF81FF81F   
             F805500004   
             1DFC1DFC1F   
             F817F80410   
             0000         
    000006CD              _Monster_5_graph_:               ; static: Monster_5_graph_
    000006CD 000007F00E             .DATA.B     H'00,H'00,H'07,H'F0,H'0E,H'08,H'0C,H'24,H'1C,H'A4,H'1C,H'84,H'3C,H'04,H'34,H'04,
             080C241CA4 +                       H'26,H'08,H'03,H'F0,H'04,H'08,H'03,H'F0,H'03,H'F4,H'0B,H'F0,H'01,H'10,H'01,H'10
             1C843C0434   
             04260803F0   
             040803F003   
             F40BF00110   
             0110         
    000006ED 00000001               .RES.B      1
    000006EE 00000002               .RES.W      1
    000006F0              L573:
    000006F0 43616E6E6F             .SDATA      "Cannot block"
             7420626C6F   
             636B         
    000006FC 00                     .DATA.B     H'00
    000006FD 00000001               .RES.B      1
    000006FE 00000002               .RES.W      1
    00000700              L574:
    00000700 6576657279             .SDATA      "every line"
             206C696E65   
    0000070A 00                     .DATA.B     H'00
    0000070B 00000001               .RES.B      1
    0000070C              L575:
    0000070C 5072657373             .SDATA      "Press [EXE] key"
             205B455845   
             5D206B6579   
    0000071B 00                     .DATA.B     H'00
    0000071C              L578:
    0000071C 77726F6E67             .SDATA      "wrong position"
             20706F7369   
             74696F6E     
    0000072A 00                     .DATA.B     H'00
    0000072B 00000001               .RES.B      1
    0000072C              L579:
    0000072C 706C7A2073             .SDATA      "plz select empty"
             656C656374   
             20656D7074   
             79           
    0000073C 00                     .DATA.B     H'00
    0000073D 00000001               .RES.B      1
    0000073E 00000002               .RES.W      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  126


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000740              L590:
    00000740 63686F6F73             .SDATA      "choose right tower"
             6520726967   
             687420746F   
             776572       
    00000752 00                     .DATA.B     H'00
    00000753 00000001               .RES.B      1
    00000754              L616:
    00000754 506C656173             .SDATA      "Please enter the numb"
             6520656E74   
             6572207468   
             65206E756D   
             62           
    00000769 00                     .DATA.B     H'00
    0000076A 00000002               .RES.W      1
    0000076C              L617:
    0000076C 6572206F66             .SDATA      "er of rows:(0~33)"
             20726F7773   
             3A28307E33   
             3329         
    0000077D 00                     .DATA.B     H'00
    0000077E 00000002               .RES.W      1
    00000780              L624:
    00000780 57726F6E67             .SDATA      "Wrong number"
             206E756D62   
             6572         
    0000078C 00                     .DATA.B     H'00
    0000078D 00000001               .RES.B      1
    0000078E 00000002               .RES.W      1
    00000790              L625:
    00000790 5072657373             .SDATA      "Press [0] key"
             205B305D20   
             6B6579       
    0000079D 00                     .DATA.B     H'00
    0000079E 00000002               .RES.W      1
    000007A0              L628:
    000007A0 6572206F66             .SDATA      "er of cols:(0~29)"
             20636F6C73   
             3A28307E32   
             3929         
    000007B1 00                     .DATA.B     H'00
    000007B2 00000002               .RES.W      1
    000007B4              L669:
    000007B4 546F776572             .SDATA      "Tower Level:%d"
             204C657665   
             6C3A2564     
    000007C2 00                     .DATA.B     H'00
    000007C3 00000001               .RES.B      1
    000007C4              L670:
    000007C4 4154544143             .SDATA      "ATTACK:%f"
             4B3A2566     
    000007CD 00                     .DATA.B     H'00
    000007CE 00000002               .RES.W      1
    000007D0              L671:
    000007D0 4174746163             .SDATA      "Attack Frequency:%f"
             6B20467265   
             7175656E63   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE  127


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             793A2566     
    000007E3 00                     .DATA.B     H'00
    000007E4              L672:
    000007E4 4174746163             .SDATA      "Attack Range:%d"
             6B2052616E   
             67653A2564   
    000007F3 00                     .DATA.B     H'00
D   00000000              _iSysCallFuncPtr:                ; static: iSysCallFuncPtr
    00000000 <00000000>             .DATA.L     _SysCallWrapper
B   00000000              __$buff$450:                     ; static: buff
    00000000 000000C8               .RES.B      200
    000000C8              __$buff$457:                     ; static: buff
    000000C8 000000C8               .RES.B      200
















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 23-Mar-2023 23:07:47  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        47




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     2986



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001A98 Byte(s)
CONSTANT SECTION (C):                               000007F4 Byte(s)
DATA     SECTION (D):                               00000004 Byte(s)
BSS      SECTION (B):                               00000190 Byte(s)

 TOTAL PROGRAM SIZE: 00002420 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           25
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          51
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           419






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\hasee\AppData\Local\Temp\hmkD01D.tmp 

