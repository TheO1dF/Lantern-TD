SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Mar-2023 23:56:54  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\Lantern TD\Lantern TD\astar.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         astar.c     1    #include "stdio.h"
         astar.c     2    #include "stdlib.h"
         astar.c     3    #include "Astar.h"
         astar.c     4    
         astar.c     5    // find min f from OpenList
         astar.c     6    LPNODE GetNodeFormOpen(LPSTACK Open)
P   00000000              _GetNodeFormOpen:                ; function: GetNodeFormOpen
                                                           ; frame size=12
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF8                   ADD         #-8,R15
         astar.c     7    {
         astar.c     8        LPSTACK temp, min, minP;
         astar.c     9        LPNODE minx;
         astar.c    10    
         astar.c    11        temp = Open->next;
    00000004 5641                   MOV.L       @(4,R4),R6
    00000006 6563                   MOV         R6,R5
         astar.c    12        min = Open->next;
         astar.c    13        minP = Open;
         astar.c    14    
         astar.c    15        if (temp == NULL)
    00000008 2558                   TST         R5,R5
    0000000A 8B0D                   BF          L327
         astar.c    16        {
         astar.c    17            return NULL;
    0000000C 7F08                   ADD         #8,R15
    0000000E 4F26                   LDS.L       @R15+,PR
    00000010 000B                   RTS
    00000012 E000                   MOV         #0,R0
    00000014              L328:                             
         astar.c    18        }
         astar.c    19        while (temp->next != NULL)
         astar.c    20        {
         astar.c    21            if ((temp->next->nPoint->f) < (min->nPoint->f))
    00000014 5351                   MOV.L       @(4,R5),R3
    00000016 6232                   MOV.L       @R3,R2
    00000018 6162                   MOV.L       @R6,R1
    0000001A 6312                   MOV.L       @R1,R3
    0000001C 6222                   MOV.L       @R2,R2
    0000001E 3233                   CMP/GE      R3,R2
    00000020 8901                   BT          L329
         astar.c    22            {
         astar.c    23                min = temp->next;
         astar.c    24                minP = temp;
    00000022 6453                   MOV         R5,R4
    00000024 5651                   MOV.L       @(4,R5),R6
    00000026              L329:                             
         astar.c    25            }
         astar.c    26            temp = temp->next;
    00000026 5551                   MOV.L       @(4,R5),R5
    00000028              L327:                             
    00000028 5351                   MOV.L       @(4,R5),R3
    0000002A 2338                   TST         R3,R3
    0000002C 8BF2                   BF          L328




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Mar-2023 23:56:54  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         astar.c    27        }
         astar.c    28        minx = min->nPoint;
    0000002E 6362                   MOV.L       @R6,R3
    00000030 1F31                   MOV.L       R3,@(4,R15)
         astar.c    29        temp = minP->next;
    00000032 5241                   MOV.L       @(4,R4),R2
    00000034 2F22                   MOV.L       R2,@R15
         astar.c    30        minP->next = minP->next->next;
    00000036 6323                   MOV         R2,R3
    00000038 5231                   MOV.L       @(4,R3),R2
    0000003A 1421                   MOV.L       R2,@(4,R4)
         astar.c    31        free(temp);
    0000003C D32D                   MOV.L       L340,R3    ; _free
    0000003E 430B                   JSR         @R3
    00000040 64F2                   MOV.L       @R15,R4
         astar.c    32        return minx;
    00000042 50F1                   MOV.L       @(4,R15),R0
         astar.c    33    }
    00000044              L326:                             
    00000044 7F08                   ADD         #8,R15
    00000046 4F26                   LDS.L       @R15+,PR
    00000048 000B                   RTS
    0000004A 0009                   NOP
         astar.c    34    
         astar.c    35    // compare node
         astar.c    36    int Equal_Node(LPNODE node1, LPNODE node2)
    0000004C              _Equal_Node:                     ; function: Equal_Node
                                                           ; frame size=0
         astar.c    37    {
         astar.c    38        if ((node1->row == node2->row) && node1->col == node2->col)
    0000004C 5353                   MOV.L       @(12,R5),R3
    0000004E 5243                   MOV.L       @(12,R4),R2
    00000050 3230                   CMP/EQ      R3,R2
    00000052 8B05                   BF          L330
    00000054 5054                   MOV.L       @(16,R5),R0
    00000056 5144                   MOV.L       @(16,R4),R1
    00000058 3100                   CMP/EQ      R0,R1
    0000005A 8B01                   BF          L330
         astar.c    39            return 1;
    0000005C 000B                   RTS
    0000005E E001                   MOV         #1,R0
    00000060              L330:                             
         astar.c    40        else
         astar.c    41            return 2;
    00000060 E002                   MOV         #2,R0
         astar.c    42    }
    00000062              L331:                             
    00000062 000B                   RTS
    00000064 0009                   NOP
         astar.c    43    
         astar.c    44    //Determine whether the Node is in the OpenList or CloseList
         astar.c    45    LPNODE Determine_Node(LPNODE Node,LPSTACK List){
    00000066              _Determine_Node:                 ; function: Determine_Node
                                                           ; frame size=12
    00000066 2FE6                   MOV.L       R14,@-R15
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 7FFC                   ADD         #-4,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Mar-2023 23:56:54  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000006C 2F42                   MOV.L       R4,@R15
         astar.c    46        LPSTACK temp = List->next;
    0000006E 5E51                   MOV.L       @(4,R5),R14
         astar.c    47        if(temp == NULL){
    00000070 2EE8                   TST         R14,R14
    00000072 890E                   BT          L323
         astar.c    48            return NULL;
         astar.c    49        }
         astar.c    50        while(temp!=NULL){
    00000074 A00B                   BRA         L335
    00000076 0009                   NOP
    00000078              L336:                             
         astar.c    51            if(Equal_Node(Node,temp->nPoint)){
    00000078 65E2                   MOV.L       @R14,R5
    0000007A BFE7                   BSR         _Equal_Node
    0000007C 64F2                   MOV.L       @R15,R4
    0000007E 2008                   TST         R0,R0
    00000080 8904                   BT          L337
         astar.c    52                return temp->nPoint;
    00000082 60E2                   MOV.L       @R14,R0
    00000084 7F04                   ADD         #4,R15
    00000086 4F26                   LDS.L       @R15+,PR
    00000088 000B                   RTS
    0000008A 6EF6                   MOV.L       @R15+,R14
    0000008C              L337:                             
         astar.c    53            }
         astar.c    54            else{
         astar.c    55                temp = temp->next;
    0000008C 5EE1                   MOV.L       @(4,R14),R14
    0000008E              L335:                             
    0000008E 2EE8                   TST         R14,R14
    00000090 8BF2                   BF          L336
    00000092              L323:
         astar.c    56            }
         astar.c    57        }
         astar.c    58        return NULL;
    00000092 E000                   MOV         #0,R0
         astar.c    59    }
    00000094              L334:                             
    00000094 7F04                   ADD         #4,R15
    00000096 4F26                   LDS.L       @R15+,PR
    00000098 000B                   RTS
    0000009A 6EF6                   MOV.L       @R15+,R14
         astar.c    60    
         astar.c    61    //Put Node in List
         astar.c    62    void PutNodeInList(LPNODE Node,LPSTACK List){
    0000009C              _PutNodeInList:                  ; function: PutNodeInList
                                                           ; frame size=12
    0000009C 4F22                   STS.L       PR,@-R15
    0000009E 7FF8                   ADD         #-8,R15
         astar.c    63        LPSTACK temp;
         astar.c    64        temp=(LPSTACK)malloc(sizeof(Stack));
    000000A0 D315                   MOV.L       L340+4,R3  ; _malloc
    000000A2 1F41                   MOV.L       R4,@(4,R15)
    000000A4 2F52                   MOV.L       R5,@R15
    000000A6 430B                   JSR         @R3
    000000A8 E408                   MOV         #8,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Mar-2023 23:56:54  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000AA 6403                   MOV         R0,R4
         astar.c    65        temp->nPoint = Node;
    000000AC 52F1                   MOV.L       @(4,R15),R2
    000000AE 2422                   MOV.L       R2,@R4
         astar.c    66    
         astar.c    67        temp->next = List->next;
    000000B0 63F2                   MOV.L       @R15,R3
    000000B2 5231                   MOV.L       @(4,R3),R2
    000000B4 1421                   MOV.L       R2,@(4,R4)
         astar.c    68        List->next = temp;
    000000B6 63F2                   MOV.L       @R15,R3
    000000B8 1341                   MOV.L       R4,@(4,R3)
         astar.c    69    }
    000000BA 7F08                   ADD         #8,R15
    000000BC 4F26                   LDS.L       @R15+,PR
    000000BE 000B                   RTS
    000000C0 0009                   NOP
         astar.c    70    
         astar.c    71    int GetH(LPNODE node1,LPNODE node2){
    000000C2              _GetH:                           ; function: GetH
                                                           ; frame size=16
    000000C2 2F86                   MOV.L       R8,@-R15
    000000C4 4F22                   STS.L       PR,@-R15
    000000C6 7FF8                   ADD         #-8,R15
         astar.c    72        return (abs(node2->row-node1->row)+abs(node2->col-node1->col));
    000000C8 D20C                   MOV.L       L340+8,R2  ; _abs
    000000CA 2F42                   MOV.L       R4,@R15
    000000CC 1F51                   MOV.L       R5,@(4,R15)
    000000CE 6453                   MOV         R5,R4
    000000D0 63F2                   MOV.L       @R15,R3
    000000D2 5333                   MOV.L       @(12,R3),R3
    000000D4 5443                   MOV.L       @(12,R4),R4
    000000D6 420B                   JSR         @R2
    000000D8 3438                   SUB         R3,R4
    000000DA 6803                   MOV         R0,R8
    000000DC 54F1                   MOV.L       @(4,R15),R4
    000000DE 63F2                   MOV.L       @R15,R3
    000000E0 5444                   MOV.L       @(16,R4),R4
    000000E2 5334                   MOV.L       @(16,R3),R3
    000000E4 D205                   MOV.L       L340+8,R2  ; _abs
    000000E6 420B                   JSR         @R2
    000000E8 3438                   SUB         R3,R4
    000000EA 308C                   ADD         R8,R0
         astar.c    73    }
    000000EC 7F08                   ADD         #8,R15
    000000EE 4F26                   LDS.L       @R15+,PR
    000000F0 000B                   RTS
    000000F2 68F6                   MOV.L       @R15+,R8
    000000F4              L340:                             
    000000F4 <00000000>             .DATA.L     _free
    000000F8 <00000000>             .DATA.L     _malloc
    000000FC <00000000>             .DATA.L     _abs
         astar.c    74    








SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 19-Mar-2023 23:56:54  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       74



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000100 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000100 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            3
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           5
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            20






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\hasee\AppData\Local\Temp\hmk55A1.tmp 

